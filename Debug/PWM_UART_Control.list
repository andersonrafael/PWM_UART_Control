
PWM_UART_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008708  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080089a8  080089a8  000099a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008ad0  08008ad0  00009ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008ad8  08008ad8  00009ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008adc  08008adc  00009adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  08008ae0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000250  24000060  08008b40  0000a060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002b0  08008b40  0000a2b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015a38  00000000  00000000  0000a08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002629  00000000  00000000  0001fac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001088  00000000  00000000  000220f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000cfa  00000000  00000000  00023178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037ab0  00000000  00000000  00023e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016c3f  00000000  00000000  0005b922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016603c  00000000  00000000  00072561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d859d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004bb0  00000000  00000000  001d85e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  001dd190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008990 	.word	0x08008990

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	08008990 	.word	0x08008990

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08e      	sub	sp, #56	@ 0x38
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006c2:	f000 faf9 	bl	8000cb8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f000 fd67 	bl	8001198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f873 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f000 fa01 	bl	8000ad4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006d2:	f000 f8d9 	bl	8000888 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80006d6:	f000 f983 	bl	80009e0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // Inicia PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006da:	2100      	movs	r1, #0
 80006dc:	4830      	ldr	r0, [pc, #192]	@ (80007a0 <main+0xe4>)
 80006de:	f004 fdd5 	bl	800528c <HAL_TIM_PWM_Start>
  update_pwm(0);
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 fa62 	bl	8000bac <update_pwm>

  // Mostra menu inicial
  show_menu();
 80006e8:	f000 fa42 	bl	8000b70 <show_menu>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Espera por uma entrada do usuário via UART
	  if (HAL_UART_Receive(&huart3, &rx_data, 1, HAL_MAX_DELAY) == HAL_OK)
 80006ec:	f107 0137 	add.w	r1, r7, #55	@ 0x37
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
 80006f4:	2201      	movs	r2, #1
 80006f6:	482b      	ldr	r0, [pc, #172]	@ (80007a4 <main+0xe8>)
 80006f8:	f005 ff06 	bl	8006508 <HAL_UART_Receive>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d106      	bne.n	8000710 <main+0x54>
	  {
		  // Processa a opção recebida
		  process_option(rx_data);
 8000702:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000706:	4618      	mov	r0, r3
 8000708:	f000 fa76 	bl	8000bf8 <process_option>
		  // Mostra o menu novamente após a opção ser processada
		  show_menu();
 800070c:	f000 fa30 	bl	8000b70 <show_menu>
	  }

	  // Verifica o botão do usuário para a opção 4
	  if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET) // Botão pressionado (pull-up, então LOW quando pressionado)
 8000710:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000714:	4824      	ldr	r0, [pc, #144]	@ (80007a8 <main+0xec>)
 8000716:	f001 fe9d 	bl	8002454 <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1e5      	bne.n	80006ec <main+0x30>
	  {
		  HAL_Delay(50); // Debounce
 8000720:	2032      	movs	r0, #50	@ 0x32
 8000722:	f000 fdcb 	bl	80012bc <HAL_Delay>
		  if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET)
 8000726:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800072a:	481f      	ldr	r0, [pc, #124]	@ (80007a8 <main+0xec>)
 800072c:	f001 fe92 	bl	8002454 <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1da      	bne.n	80006ec <main+0x30>
		  {
			  // Só incrementa o duty cycle se a opção 4 estiver "ativa"
			  if (duty_cycle < 100)
 8000736:	4b1d      	ldr	r3, [pc, #116]	@ (80007ac <main+0xf0>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b63      	cmp	r3, #99	@ 0x63
 800073c:	d825      	bhi.n	800078a <main+0xce>
			  {
				  duty_cycle += 10;
 800073e:	4b1b      	ldr	r3, [pc, #108]	@ (80007ac <main+0xf0>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	330a      	adds	r3, #10
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b19      	ldr	r3, [pc, #100]	@ (80007ac <main+0xf0>)
 8000748:	701a      	strb	r2, [r3, #0]
				  if (duty_cycle > 100) duty_cycle = 100; // Garante que não excede 100
 800074a:	4b18      	ldr	r3, [pc, #96]	@ (80007ac <main+0xf0>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b64      	cmp	r3, #100	@ 0x64
 8000750:	d902      	bls.n	8000758 <main+0x9c>
 8000752:	4b16      	ldr	r3, [pc, #88]	@ (80007ac <main+0xf0>)
 8000754:	2264      	movs	r2, #100	@ 0x64
 8000756:	701a      	strb	r2, [r3, #0]
				  update_pwm(duty_cycle);
 8000758:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <main+0xf0>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fa25 	bl	8000bac <update_pwm>
				  char msg[50];
				  sprintf(msg, "\r\nDuty Cycle: %d%%\r\n", duty_cycle);
 8000762:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <main+0xf0>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	461a      	mov	r2, r3
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	4911      	ldr	r1, [pc, #68]	@ (80007b0 <main+0xf4>)
 800076c:	4618      	mov	r0, r3
 800076e:	f007 fc6f 	bl	8008050 <siprintf>
				  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fdb3 	bl	80002e0 <strlen>
 800077a:	4603      	mov	r3, r0
 800077c:	b29a      	uxth	r2, r3
 800077e:	1d39      	adds	r1, r7, #4
 8000780:	f04f 33ff 	mov.w	r3, #4294967295
 8000784:	4807      	ldr	r0, [pc, #28]	@ (80007a4 <main+0xe8>)
 8000786:	f005 fe31 	bl	80063ec <HAL_UART_Transmit>
			  }
			  while(HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET); // Espera o botão ser solto
 800078a:	bf00      	nop
 800078c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000790:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <main+0xec>)
 8000792:	f001 fe5f 	bl	8002454 <HAL_GPIO_ReadPin>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d0f7      	beq.n	800078c <main+0xd0>
	  if (HAL_UART_Receive(&huart3, &rx_data, 1, HAL_MAX_DELAY) == HAL_OK)
 800079c:	e7a6      	b.n	80006ec <main+0x30>
 800079e:	bf00      	nop
 80007a0:	2400007c 	.word	0x2400007c
 80007a4:	240000c8 	.word	0x240000c8
 80007a8:	58020800 	.word	0x58020800
 80007ac:	2400015c 	.word	0x2400015c
 80007b0:	080089a8 	.word	0x080089a8

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b09c      	sub	sp, #112	@ 0x70
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007be:	224c      	movs	r2, #76	@ 0x4c
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f007 fc66 	bl	8008094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2220      	movs	r2, #32
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f007 fc60 	bl	8008094 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007d4:	2002      	movs	r0, #2
 80007d6:	f001 fe55 	bl	8002484 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b28      	ldr	r3, [pc, #160]	@ (8000880 <SystemClock_Config+0xcc>)
 80007e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007e2:	4a27      	ldr	r2, [pc, #156]	@ (8000880 <SystemClock_Config+0xcc>)
 80007e4:	f023 0301 	bic.w	r3, r3, #1
 80007e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007ea:	4b25      	ldr	r3, [pc, #148]	@ (8000880 <SystemClock_Config+0xcc>)
 80007ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	4b23      	ldr	r3, [pc, #140]	@ (8000884 <SystemClock_Config+0xd0>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007fc:	4a21      	ldr	r2, [pc, #132]	@ (8000884 <SystemClock_Config+0xd0>)
 80007fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <SystemClock_Config+0xd0>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000810:	bf00      	nop
 8000812:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <SystemClock_Config+0xd0>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800081a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800081e:	d1f8      	bne.n	8000812 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000820:	2302      	movs	r3, #2
 8000822:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000824:	2301      	movs	r3, #1
 8000826:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000828:	2340      	movs	r3, #64	@ 0x40
 800082a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800082c:	2300      	movs	r3, #0
 800082e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fe5f 	bl	80024f8 <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000840:	f000 fa66 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	233f      	movs	r3, #63	@ 0x3f
 8000846:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000858:	2340      	movs	r3, #64	@ 0x40
 800085a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2101      	movs	r1, #1
 8000868:	4618      	mov	r0, r3
 800086a:	f002 fa9f 	bl	8002dac <HAL_RCC_ClockConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000874:	f000 fa4c 	bl	8000d10 <Error_Handler>
  }
}
 8000878:	bf00      	nop
 800087a:	3770      	adds	r7, #112	@ 0x70
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	58000400 	.word	0x58000400
 8000884:	58024800 	.word	0x58024800

08000888 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b09a      	sub	sp, #104	@ 0x68
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
 80008b8:	615a      	str	r2, [r3, #20]
 80008ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	222c      	movs	r2, #44	@ 0x2c
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f007 fbe6 	bl	8008094 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008c8:	4b43      	ldr	r3, [pc, #268]	@ (80009d8 <MX_TIM1_Init+0x150>)
 80008ca:	4a44      	ldr	r2, [pc, #272]	@ (80009dc <MX_TIM1_Init+0x154>)
 80008cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80008ce:	4b42      	ldr	r3, [pc, #264]	@ (80009d8 <MX_TIM1_Init+0x150>)
 80008d0:	224f      	movs	r2, #79	@ 0x4f
 80008d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d4:	4b40      	ldr	r3, [pc, #256]	@ (80009d8 <MX_TIM1_Init+0x150>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80008da:	4b3f      	ldr	r3, [pc, #252]	@ (80009d8 <MX_TIM1_Init+0x150>)
 80008dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e2:	4b3d      	ldr	r3, [pc, #244]	@ (80009d8 <MX_TIM1_Init+0x150>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e8:	4b3b      	ldr	r3, [pc, #236]	@ (80009d8 <MX_TIM1_Init+0x150>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ee:	4b3a      	ldr	r3, [pc, #232]	@ (80009d8 <MX_TIM1_Init+0x150>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008f4:	4838      	ldr	r0, [pc, #224]	@ (80009d8 <MX_TIM1_Init+0x150>)
 80008f6:	f004 fc11 	bl	800511c <HAL_TIM_Base_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000900:	f000 fa06 	bl	8000d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000904:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000908:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800090a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800090e:	4619      	mov	r1, r3
 8000910:	4831      	ldr	r0, [pc, #196]	@ (80009d8 <MX_TIM1_Init+0x150>)
 8000912:	f004 fedd 	bl	80056d0 <HAL_TIM_ConfigClockSource>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800091c:	f000 f9f8 	bl	8000d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000920:	482d      	ldr	r0, [pc, #180]	@ (80009d8 <MX_TIM1_Init+0x150>)
 8000922:	f004 fc52 	bl	80051ca <HAL_TIM_PWM_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800092c:	f000 f9f0 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000930:	2300      	movs	r3, #0
 8000932:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800093c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000940:	4619      	mov	r1, r3
 8000942:	4825      	ldr	r0, [pc, #148]	@ (80009d8 <MX_TIM1_Init+0x150>)
 8000944:	f005 fbf6 	bl	8006134 <HAL_TIMEx_MasterConfigSynchronization>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800094e:	f000 f9df 	bl	8000d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000952:	2360      	movs	r3, #96	@ 0x60
 8000954:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800095a:	2300      	movs	r3, #0
 800095c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800095e:	2300      	movs	r3, #0
 8000960:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000962:	2300      	movs	r3, #0
 8000964:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000966:	2300      	movs	r3, #0
 8000968:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800096a:	2300      	movs	r3, #0
 800096c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800096e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000972:	2200      	movs	r2, #0
 8000974:	4619      	mov	r1, r3
 8000976:	4818      	ldr	r0, [pc, #96]	@ (80009d8 <MX_TIM1_Init+0x150>)
 8000978:	f004 fd96 	bl	80054a8 <HAL_TIM_PWM_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000982:	f000 f9c5 	bl	8000d10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800099a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800099e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	4619      	mov	r1, r3
 80009ba:	4807      	ldr	r0, [pc, #28]	@ (80009d8 <MX_TIM1_Init+0x150>)
 80009bc:	f005 fc48 	bl	8006250 <HAL_TIMEx_ConfigBreakDeadTime>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80009c6:	f000 f9a3 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009ca:	4803      	ldr	r0, [pc, #12]	@ (80009d8 <MX_TIM1_Init+0x150>)
 80009cc:	f000 f9e2 	bl	8000d94 <HAL_TIM_MspPostInit>

}
 80009d0:	bf00      	nop
 80009d2:	3768      	adds	r7, #104	@ 0x68
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	2400007c 	.word	0x2400007c
 80009dc:	40010000 	.word	0x40010000

080009e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
  // Configuração adicional dos pinos PB10 (TX) e PB11 (RX)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	4b37      	ldr	r3, [pc, #220]	@ (8000ac4 <MX_USART3_UART_Init+0xe4>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ec:	4a35      	ldr	r2, [pc, #212]	@ (8000ac4 <MX_USART3_UART_Init+0xe4>)
 80009ee:	f043 0302 	orr.w	r3, r3, #2
 80009f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f6:	4b33      	ldr	r3, [pc, #204]	@ (8000ac4 <MX_USART3_UART_Init+0xe4>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fc:	f003 0302 	and.w	r3, r3, #2
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a12:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a20:	2302      	movs	r3, #2
 8000a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a24:	2307      	movs	r3, #7
 8000a26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4826      	ldr	r0, [pc, #152]	@ (8000ac8 <MX_USART3_UART_Init+0xe8>)
 8000a2e:	f001 fb61 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a32:	4b26      	ldr	r3, [pc, #152]	@ (8000acc <MX_USART3_UART_Init+0xec>)
 8000a34:	4a26      	ldr	r2, [pc, #152]	@ (8000ad0 <MX_USART3_UART_Init+0xf0>)
 8000a36:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a38:	4b24      	ldr	r3, [pc, #144]	@ (8000acc <MX_USART3_UART_Init+0xec>)
 8000a3a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a3e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a40:	4b22      	ldr	r3, [pc, #136]	@ (8000acc <MX_USART3_UART_Init+0xec>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a46:	4b21      	ldr	r3, [pc, #132]	@ (8000acc <MX_USART3_UART_Init+0xec>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000acc <MX_USART3_UART_Init+0xec>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a52:	4b1e      	ldr	r3, [pc, #120]	@ (8000acc <MX_USART3_UART_Init+0xec>)
 8000a54:	220c      	movs	r2, #12
 8000a56:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a58:	4b1c      	ldr	r3, [pc, #112]	@ (8000acc <MX_USART3_UART_Init+0xec>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000acc <MX_USART3_UART_Init+0xec>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a64:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <MX_USART3_UART_Init+0xec>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a6a:	4b18      	ldr	r3, [pc, #96]	@ (8000acc <MX_USART3_UART_Init+0xec>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a70:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <MX_USART3_UART_Init+0xec>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a76:	4815      	ldr	r0, [pc, #84]	@ (8000acc <MX_USART3_UART_Init+0xec>)
 8000a78:	f005 fc68 	bl	800634c <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART3_UART_Init+0xa6>
  {
    Error_Handler();
 8000a82:	f000 f945 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a86:	2100      	movs	r1, #0
 8000a88:	4810      	ldr	r0, [pc, #64]	@ (8000acc <MX_USART3_UART_Init+0xec>)
 8000a8a:	f007 fa17 	bl	8007ebc <HAL_UARTEx_SetTxFifoThreshold>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART3_UART_Init+0xb8>
  {
    Error_Handler();
 8000a94:	f000 f93c 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	480c      	ldr	r0, [pc, #48]	@ (8000acc <MX_USART3_UART_Init+0xec>)
 8000a9c:	f007 fa4c 	bl	8007f38 <HAL_UARTEx_SetRxFifoThreshold>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART3_UART_Init+0xca>
  {
    Error_Handler();
 8000aa6:	f000 f933 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000aaa:	4808      	ldr	r0, [pc, #32]	@ (8000acc <MX_USART3_UART_Init+0xec>)
 8000aac:	f007 f9cd 	bl	8007e4a <HAL_UARTEx_DisableFifoMode>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_USART3_UART_Init+0xda>
  {
    Error_Handler();
 8000ab6:	f000 f92b 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	58024400 	.word	0x58024400
 8000ac8:	58020400 	.word	0x58020400
 8000acc:	240000c8 	.word	0x240000c8
 8000ad0:	40004800 	.word	0x40004800

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	4b1f      	ldr	r3, [pc, #124]	@ (8000b68 <MX_GPIO_Init+0x94>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b68 <MX_GPIO_Init+0x94>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000afa:	4b1b      	ldr	r3, [pc, #108]	@ (8000b68 <MX_GPIO_Init+0x94>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b08:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <MX_GPIO_Init+0x94>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0e:	4a16      	ldr	r2, [pc, #88]	@ (8000b68 <MX_GPIO_Init+0x94>)
 8000b10:	f043 0310 	orr.w	r3, r3, #16
 8000b14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b18:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <MX_GPIO_Init+0x94>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1e:	f003 0310 	and.w	r3, r3, #16
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <MX_GPIO_Init+0x94>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2c:	4a0e      	ldr	r2, [pc, #56]	@ (8000b68 <MX_GPIO_Init+0x94>)
 8000b2e:	f043 0302 	orr.w	r3, r3, #2
 8000b32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b36:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <MX_GPIO_Init+0x94>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3c:	f003 0302 	and.w	r3, r3, #2
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000b44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	4619      	mov	r1, r3
 8000b58:	4804      	ldr	r0, [pc, #16]	@ (8000b6c <MX_GPIO_Init+0x98>)
 8000b5a:	f001 facb 	bl	80020f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b5e:	bf00      	nop
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	58024400 	.word	0x58024400
 8000b6c:	58020800 	.word	0x58020800

08000b70 <show_menu>:

/* USER CODE BEGIN 4 */
void show_menu(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b0a4      	sub	sp, #144	@ 0x90
 8000b74:	af00      	add	r7, sp, #0
  char menu[] = "\r\n===== CONTROLE DE PWM =====\r\n"
 8000b76:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba4 <show_menu+0x34>)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	228f      	movs	r2, #143	@ 0x8f
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f007 fabc 	bl	80080fc <memcpy>
                "[2] Duty fixo 80%\r\n"
                "[3] Ramp 0-100% em 5 s\r\n"
                "[4] +10% por clique no botao\r\n"
                "Selecione a opcao: ";

  HAL_UART_Transmit(&huart3, (uint8_t*)menu, strlen(menu), HAL_MAX_DELAY);
 8000b84:	463b      	mov	r3, r7
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fbaa 	bl	80002e0 <strlen>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	4639      	mov	r1, r7
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <show_menu+0x38>)
 8000b98:	f005 fc28 	bl	80063ec <HAL_UART_Transmit>
}
 8000b9c:	bf00      	nop
 8000b9e:	3790      	adds	r7, #144	@ 0x90
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	080089c0 	.word	0x080089c0
 8000ba8:	240000c8 	.word	0x240000c8

08000bac <update_pwm>:

void update_pwm(uint8_t duty)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  // Garante que o duty está entre 0 e 100
  if(duty > 100) duty = 100;
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2b64      	cmp	r3, #100	@ 0x64
 8000bba:	d901      	bls.n	8000bc0 <update_pwm+0x14>
 8000bbc:	2364      	movs	r3, #100	@ 0x64
 8000bbe:	71fb      	strb	r3, [r7, #7]

  // Atualiza o valor do PWM
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (htim1.Init.Period * duty) / 100);
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <update_pwm+0x40>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	79fa      	ldrb	r2, [r7, #7]
 8000bc6:	fb03 f202 	mul.w	r2, r3, r2
 8000bca:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <update_pwm+0x40>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4908      	ldr	r1, [pc, #32]	@ (8000bf0 <update_pwm+0x44>)
 8000bd0:	fba1 1202 	umull	r1, r2, r1, r2
 8000bd4:	0952      	lsrs	r2, r2, #5
 8000bd6:	635a      	str	r2, [r3, #52]	@ 0x34
  duty_cycle = duty;
 8000bd8:	4a06      	ldr	r2, [pc, #24]	@ (8000bf4 <update_pwm+0x48>)
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	7013      	strb	r3, [r2, #0]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	2400007c 	.word	0x2400007c
 8000bf0:	51eb851f 	.word	0x51eb851f
 8000bf4:	2400015c 	.word	0x2400015c

08000bf8 <process_option>:

void process_option(uint8_t option)
{
 8000bf8:	b5b0      	push	{r4, r5, r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  switch(option)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	3b31      	subs	r3, #49	@ 0x31
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	d81c      	bhi.n	8000c44 <process_option+0x4c>
 8000c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c10 <process_option+0x18>)
 8000c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c10:	08000c21 	.word	0x08000c21
 8000c14:	08000c29 	.word	0x08000c29
 8000c18:	08000c31 	.word	0x08000c31
 8000c1c:	08000c37 	.word	0x08000c37
  {
    case '1':
      update_pwm(20);
 8000c20:	2014      	movs	r0, #20
 8000c22:	f7ff ffc3 	bl	8000bac <update_pwm>
      break;
 8000c26:	e024      	b.n	8000c72 <process_option+0x7a>

    case '2':
      update_pwm(80);
 8000c28:	2050      	movs	r0, #80	@ 0x50
 8000c2a:	f7ff ffbf 	bl	8000bac <update_pwm>
      break;
 8000c2e:	e020      	b.n	8000c72 <process_option+0x7a>

    case '3':
      ramp_pwm();
 8000c30:	f000 f82a 	bl	8000c88 <ramp_pwm>
      break;
 8000c34:	e01d      	b.n	8000c72 <process_option+0x7a>

    case '4':
      duty_cycle = 0; // Reseta o duty cycle para a opção do botão
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <process_option+0x84>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
      update_pwm(0);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff ffb5 	bl	8000bac <update_pwm>
      break;
 8000c42:	e016      	b.n	8000c72 <process_option+0x7a>

    default:
      // Opção inválida
      char msg[] = "\r\nOpcao invalida!\r\n";
 8000c44:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <process_option+0x88>)
 8000c46:	f107 040c 	add.w	r4, r7, #12
 8000c4a:	461d      	mov	r5, r3
 8000c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c50:	682b      	ldr	r3, [r5, #0]
 8000c52:	6023      	str	r3, [r4, #0]
      HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fb41 	bl	80002e0 <strlen>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	f107 010c 	add.w	r1, r7, #12
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	4806      	ldr	r0, [pc, #24]	@ (8000c84 <process_option+0x8c>)
 8000c6c:	f005 fbbe 	bl	80063ec <HAL_UART_Transmit>
      break;
 8000c70:	bf00      	nop
  }
}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bdb0      	pop	{r4, r5, r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2400015c 	.word	0x2400015c
 8000c80:	08008a50 	.word	0x08008a50
 8000c84:	240000c8 	.word	0x240000c8

08000c88 <ramp_pwm>:

void ramp_pwm(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
  for(uint8_t i = 0; i <= 100; i++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	71fb      	strb	r3, [r7, #7]
 8000c92:	e009      	b.n	8000ca8 <ramp_pwm+0x20>
  {
    update_pwm(i);
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff88 	bl	8000bac <update_pwm>
    HAL_Delay(50); // 5000ms / 100 steps = 50ms por step
 8000c9c:	2032      	movs	r0, #50	@ 0x32
 8000c9e:	f000 fb0d 	bl	80012bc <HAL_Delay>
  for(uint8_t i = 0; i <= 100; i++)
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	71fb      	strb	r3, [r7, #7]
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b64      	cmp	r3, #100	@ 0x64
 8000cac:	d9f2      	bls.n	8000c94 <ramp_pwm+0xc>
  }
}
 8000cae:	bf00      	nop
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000cca:	f000 fc37 	bl	800153c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000cda:	231f      	movs	r3, #31
 8000cdc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000cde:	2387      	movs	r3, #135	@ 0x87
 8000ce0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000cea:	2301      	movs	r3, #1
 8000cec:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 fc55 	bl	80015ac <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d02:	2004      	movs	r0, #4
 8000d04:	f000 fc32 	bl	800156c <HAL_MPU_Enable>

}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <Error_Handler+0x8>

08000d1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <HAL_MspInit+0x30>)
 8000d24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d28:	4a08      	ldr	r2, [pc, #32]	@ (8000d4c <HAL_MspInit+0x30>)
 8000d2a:	f043 0302 	orr.w	r3, r3, #2
 8000d2e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <HAL_MspInit+0x30>)
 8000d34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d38:	f003 0302 	and.w	r3, r3, #2
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	58024400 	.word	0x58024400

08000d50 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d8c <HAL_TIM_Base_MspInit+0x3c>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d10e      	bne.n	8000d80 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d62:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <HAL_TIM_Base_MspInit+0x40>)
 8000d64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d68:	4a09      	ldr	r2, [pc, #36]	@ (8000d90 <HAL_TIM_Base_MspInit+0x40>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000d72:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <HAL_TIM_Base_MspInit+0x40>)
 8000d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	40010000 	.word	0x40010000
 8000d90:	58024400 	.word	0x58024400

08000d94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a13      	ldr	r2, [pc, #76]	@ (8000e00 <HAL_TIM_MspPostInit+0x6c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d11f      	bne.n	8000df6 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db6:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <HAL_TIM_MspPostInit+0x70>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbc:	4a11      	ldr	r2, [pc, #68]	@ (8000e04 <HAL_TIM_MspPostInit+0x70>)
 8000dbe:	f043 0310 	orr.w	r3, r3, #16
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <HAL_TIM_MspPostInit+0x70>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <HAL_TIM_MspPostInit+0x74>)
 8000df2:	f001 f97f 	bl	80020f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000df6:	bf00      	nop
 8000df8:	3720      	adds	r7, #32
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40010000 	.word	0x40010000
 8000e04:	58024400 	.word	0x58024400
 8000e08:	58021000 	.word	0x58021000

08000e0c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b0ba      	sub	sp, #232	@ 0xe8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	22c0      	movs	r2, #192	@ 0xc0
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f007 f931 	bl	8008094 <memset>
  if(huart->Instance==USART3)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a2b      	ldr	r2, [pc, #172]	@ (8000ee4 <HAL_UART_MspInit+0xd8>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d14e      	bne.n	8000eda <HAL_UART_MspInit+0xce>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e3c:	f04f 0202 	mov.w	r2, #2
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fb36 	bl	80034c4 <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e5e:	f7ff ff57 	bl	8000d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e62:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <HAL_UART_MspInit+0xdc>)
 8000e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e68:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee8 <HAL_UART_MspInit+0xdc>)
 8000e6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e72:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee8 <HAL_UART_MspInit+0xdc>)
 8000e74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e80:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <HAL_UART_MspInit+0xdc>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e86:	4a18      	ldr	r2, [pc, #96]	@ (8000ee8 <HAL_UART_MspInit+0xdc>)
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e90:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <HAL_UART_MspInit+0xdc>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e9e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ea2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eb8:	2307      	movs	r3, #7
 8000eba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4809      	ldr	r0, [pc, #36]	@ (8000eec <HAL_UART_MspInit+0xe0>)
 8000ec6:	f001 f915 	bl	80020f4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2027      	movs	r0, #39	@ 0x27
 8000ed0:	f000 faff 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ed4:	2027      	movs	r0, #39	@ 0x27
 8000ed6:	f000 fb16 	bl	8001506 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000eda:	bf00      	nop
 8000edc:	37e8      	adds	r7, #232	@ 0xe8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40004800 	.word	0x40004800
 8000ee8:	58024400 	.word	0x58024400
 8000eec:	58020400 	.word	0x58020400

08000ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <NMI_Handler+0x4>

08000ef8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <MemManage_Handler+0x4>

08000f08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <BusFault_Handler+0x4>

08000f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <UsageFault_Handler+0x4>

08000f18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f46:	f000 f999 	bl	800127c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f54:	4802      	ldr	r0, [pc, #8]	@ (8000f60 <USART3_IRQHandler+0x10>)
 8000f56:	f005 fb9f 	bl	8006698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	240000c8 	.word	0x240000c8

08000f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f6c:	4a14      	ldr	r2, [pc, #80]	@ (8000fc0 <_sbrk+0x5c>)
 8000f6e:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <_sbrk+0x60>)
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f78:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f80:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <_sbrk+0x64>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <_sbrk+0x68>)
 8000f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f86:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d207      	bcs.n	8000fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f94:	f007 f886 	bl	80080a4 <__errno>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	e009      	b.n	8000fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000faa:	4b07      	ldr	r3, [pc, #28]	@ (8000fc8 <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4a05      	ldr	r2, [pc, #20]	@ (8000fc8 <_sbrk+0x64>)
 8000fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	24080000 	.word	0x24080000
 8000fc4:	00000400 	.word	0x00000400
 8000fc8:	24000160 	.word	0x24000160
 8000fcc:	240002b0 	.word	0x240002b0

08000fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fd4:	4b43      	ldr	r3, [pc, #268]	@ (80010e4 <SystemInit+0x114>)
 8000fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fda:	4a42      	ldr	r2, [pc, #264]	@ (80010e4 <SystemInit+0x114>)
 8000fdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fe0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fe4:	4b40      	ldr	r3, [pc, #256]	@ (80010e8 <SystemInit+0x118>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 030f 	and.w	r3, r3, #15
 8000fec:	2b06      	cmp	r3, #6
 8000fee:	d807      	bhi.n	8001000 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ff0:	4b3d      	ldr	r3, [pc, #244]	@ (80010e8 <SystemInit+0x118>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f023 030f 	bic.w	r3, r3, #15
 8000ff8:	4a3b      	ldr	r2, [pc, #236]	@ (80010e8 <SystemInit+0x118>)
 8000ffa:	f043 0307 	orr.w	r3, r3, #7
 8000ffe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001000:	4b3a      	ldr	r3, [pc, #232]	@ (80010ec <SystemInit+0x11c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a39      	ldr	r2, [pc, #228]	@ (80010ec <SystemInit+0x11c>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800100c:	4b37      	ldr	r3, [pc, #220]	@ (80010ec <SystemInit+0x11c>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001012:	4b36      	ldr	r3, [pc, #216]	@ (80010ec <SystemInit+0x11c>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4935      	ldr	r1, [pc, #212]	@ (80010ec <SystemInit+0x11c>)
 8001018:	4b35      	ldr	r3, [pc, #212]	@ (80010f0 <SystemInit+0x120>)
 800101a:	4013      	ands	r3, r2
 800101c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800101e:	4b32      	ldr	r3, [pc, #200]	@ (80010e8 <SystemInit+0x118>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0308 	and.w	r3, r3, #8
 8001026:	2b00      	cmp	r3, #0
 8001028:	d007      	beq.n	800103a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800102a:	4b2f      	ldr	r3, [pc, #188]	@ (80010e8 <SystemInit+0x118>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f023 030f 	bic.w	r3, r3, #15
 8001032:	4a2d      	ldr	r2, [pc, #180]	@ (80010e8 <SystemInit+0x118>)
 8001034:	f043 0307 	orr.w	r3, r3, #7
 8001038:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800103a:	4b2c      	ldr	r3, [pc, #176]	@ (80010ec <SystemInit+0x11c>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001040:	4b2a      	ldr	r3, [pc, #168]	@ (80010ec <SystemInit+0x11c>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001046:	4b29      	ldr	r3, [pc, #164]	@ (80010ec <SystemInit+0x11c>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800104c:	4b27      	ldr	r3, [pc, #156]	@ (80010ec <SystemInit+0x11c>)
 800104e:	4a29      	ldr	r2, [pc, #164]	@ (80010f4 <SystemInit+0x124>)
 8001050:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001052:	4b26      	ldr	r3, [pc, #152]	@ (80010ec <SystemInit+0x11c>)
 8001054:	4a28      	ldr	r2, [pc, #160]	@ (80010f8 <SystemInit+0x128>)
 8001056:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001058:	4b24      	ldr	r3, [pc, #144]	@ (80010ec <SystemInit+0x11c>)
 800105a:	4a28      	ldr	r2, [pc, #160]	@ (80010fc <SystemInit+0x12c>)
 800105c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800105e:	4b23      	ldr	r3, [pc, #140]	@ (80010ec <SystemInit+0x11c>)
 8001060:	2200      	movs	r2, #0
 8001062:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001064:	4b21      	ldr	r3, [pc, #132]	@ (80010ec <SystemInit+0x11c>)
 8001066:	4a25      	ldr	r2, [pc, #148]	@ (80010fc <SystemInit+0x12c>)
 8001068:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800106a:	4b20      	ldr	r3, [pc, #128]	@ (80010ec <SystemInit+0x11c>)
 800106c:	2200      	movs	r2, #0
 800106e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001070:	4b1e      	ldr	r3, [pc, #120]	@ (80010ec <SystemInit+0x11c>)
 8001072:	4a22      	ldr	r2, [pc, #136]	@ (80010fc <SystemInit+0x12c>)
 8001074:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001076:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <SystemInit+0x11c>)
 8001078:	2200      	movs	r2, #0
 800107a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800107c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ec <SystemInit+0x11c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a1a      	ldr	r2, [pc, #104]	@ (80010ec <SystemInit+0x11c>)
 8001082:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001086:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001088:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <SystemInit+0x11c>)
 800108a:	2200      	movs	r2, #0
 800108c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800108e:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <SystemInit+0x130>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <SystemInit+0x134>)
 8001094:	4013      	ands	r3, r2
 8001096:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800109a:	d202      	bcs.n	80010a2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800109c:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <SystemInit+0x138>)
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80010a2:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <SystemInit+0x11c>)
 80010a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d113      	bne.n	80010d8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80010b0:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <SystemInit+0x11c>)
 80010b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010b6:	4a0d      	ldr	r2, [pc, #52]	@ (80010ec <SystemInit+0x11c>)
 80010b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010bc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010c0:	4b12      	ldr	r3, [pc, #72]	@ (800110c <SystemInit+0x13c>)
 80010c2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80010c6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80010c8:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <SystemInit+0x11c>)
 80010ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010ce:	4a07      	ldr	r2, [pc, #28]	@ (80010ec <SystemInit+0x11c>)
 80010d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010d4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00
 80010e8:	52002000 	.word	0x52002000
 80010ec:	58024400 	.word	0x58024400
 80010f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80010f4:	02020200 	.word	0x02020200
 80010f8:	01ff0000 	.word	0x01ff0000
 80010fc:	01010280 	.word	0x01010280
 8001100:	5c001000 	.word	0x5c001000
 8001104:	ffff0000 	.word	0xffff0000
 8001108:	51008108 	.word	0x51008108
 800110c:	52004000 	.word	0x52004000

08001110 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001114:	4b09      	ldr	r3, [pc, #36]	@ (800113c <ExitRun0Mode+0x2c>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	4a08      	ldr	r2, [pc, #32]	@ (800113c <ExitRun0Mode+0x2c>)
 800111a:	f043 0302 	orr.w	r3, r3, #2
 800111e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001120:	bf00      	nop
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <ExitRun0Mode+0x2c>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0f9      	beq.n	8001122 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	58024800 	.word	0x58024800

08001140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001140:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800117c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001144:	f7ff ffe4 	bl	8001110 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001148:	f7ff ff42 	bl	8000fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800114c:	480c      	ldr	r0, [pc, #48]	@ (8001180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800114e:	490d      	ldr	r1, [pc, #52]	@ (8001184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001150:	4a0d      	ldr	r2, [pc, #52]	@ (8001188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001164:	4c0a      	ldr	r4, [pc, #40]	@ (8001190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001172:	f006 ff9d 	bl	80080b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001176:	f7ff faa1 	bl	80006bc <main>
  bx  lr
 800117a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800117c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001180:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001184:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001188:	08008ae0 	.word	0x08008ae0
  ldr r2, =_sbss
 800118c:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001190:	240002b0 	.word	0x240002b0

08001194 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC3_IRQHandler>
	...

08001198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119e:	2003      	movs	r0, #3
 80011a0:	f000 f98c 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011a4:	f001 ffb8 	bl	8003118 <HAL_RCC_GetSysClockFreq>
 80011a8:	4602      	mov	r2, r0
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <HAL_Init+0x68>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	0a1b      	lsrs	r3, r3, #8
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	4913      	ldr	r1, [pc, #76]	@ (8001204 <HAL_Init+0x6c>)
 80011b6:	5ccb      	ldrb	r3, [r1, r3]
 80011b8:	f003 031f 	and.w	r3, r3, #31
 80011bc:	fa22 f303 	lsr.w	r3, r2, r3
 80011c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <HAL_Init+0x68>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001204 <HAL_Init+0x6c>)
 80011cc:	5cd3      	ldrb	r3, [r2, r3]
 80011ce:	f003 031f 	and.w	r3, r3, #31
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	fa22 f303 	lsr.w	r3, r2, r3
 80011d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001208 <HAL_Init+0x70>)
 80011da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011dc:	4a0b      	ldr	r2, [pc, #44]	@ (800120c <HAL_Init+0x74>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e2:	200f      	movs	r0, #15
 80011e4:	f000 f814 	bl	8001210 <HAL_InitTick>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e002      	b.n	80011f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011f2:	f7ff fd93 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	58024400 	.word	0x58024400
 8001204:	08008a64 	.word	0x08008a64
 8001208:	24000004 	.word	0x24000004
 800120c:	24000000 	.word	0x24000000

08001210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001218:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <HAL_InitTick+0x60>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e021      	b.n	8001268 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001224:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <HAL_InitTick+0x64>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <HAL_InitTick+0x60>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001232:	fbb3 f3f1 	udiv	r3, r3, r1
 8001236:	fbb2 f3f3 	udiv	r3, r2, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f971 	bl	8001522 <HAL_SYSTICK_Config>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e00e      	b.n	8001268 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b0f      	cmp	r3, #15
 800124e:	d80a      	bhi.n	8001266 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001250:	2200      	movs	r2, #0
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f000 f93b 	bl	80014d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800125c:	4a06      	ldr	r2, [pc, #24]	@ (8001278 <HAL_InitTick+0x68>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	e000      	b.n	8001268 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	2400000c 	.word	0x2400000c
 8001274:	24000000 	.word	0x24000000
 8001278:	24000008 	.word	0x24000008

0800127c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_IncTick+0x20>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_IncTick+0x24>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4413      	add	r3, r2
 800128c:	4a04      	ldr	r2, [pc, #16]	@ (80012a0 <HAL_IncTick+0x24>)
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	2400000c 	.word	0x2400000c
 80012a0:	24000164 	.word	0x24000164

080012a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b03      	ldr	r3, [pc, #12]	@ (80012b8 <HAL_GetTick+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	24000164 	.word	0x24000164

080012bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff ffee 	bl	80012a4 <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d005      	beq.n	80012e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <HAL_Delay+0x44>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e2:	bf00      	nop
 80012e4:	f7ff ffde 	bl	80012a4 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d8f7      	bhi.n	80012e4 <HAL_Delay+0x28>
  {
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2400000c 	.word	0x2400000c

08001304 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001308:	4b03      	ldr	r3, [pc, #12]	@ (8001318 <HAL_GetREVID+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	0c1b      	lsrs	r3, r3, #16
}
 800130e:	4618      	mov	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	5c001000 	.word	0x5c001000

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <__NVIC_SetPriorityGrouping+0x40>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001346:	4313      	orrs	r3, r2
 8001348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134a:	4a04      	ldr	r2, [pc, #16]	@ (800135c <__NVIC_SetPriorityGrouping+0x40>)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	60d3      	str	r3, [r2, #12]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00
 8001360:	05fa0000 	.word	0x05fa0000

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	@ (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4907      	ldr	r1, [pc, #28]	@ (80013b8 <__NVIC_EnableIRQ+0x38>)
 800139a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	@ (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	@ (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	@ 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f7ff ff8e 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff29 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff40 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff90 	bl	8001410 <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5f 	bl	80013bc <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff33 	bl	8001380 <__NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffa4 	bl	8001478 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001540:	f3bf 8f5f 	dmb	sy
}
 8001544:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001546:	4b07      	ldr	r3, [pc, #28]	@ (8001564 <HAL_MPU_Disable+0x28>)
 8001548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154a:	4a06      	ldr	r2, [pc, #24]	@ (8001564 <HAL_MPU_Disable+0x28>)
 800154c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001550:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001552:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <HAL_MPU_Disable+0x2c>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00
 8001568:	e000ed90 	.word	0xe000ed90

0800156c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001574:	4a0b      	ldr	r2, [pc, #44]	@ (80015a4 <HAL_MPU_Enable+0x38>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800157e:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <HAL_MPU_Enable+0x3c>)
 8001580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001582:	4a09      	ldr	r2, [pc, #36]	@ (80015a8 <HAL_MPU_Enable+0x3c>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001588:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800158a:	f3bf 8f4f 	dsb	sy
}
 800158e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001590:	f3bf 8f6f 	isb	sy
}
 8001594:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed90 	.word	0xe000ed90
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	785a      	ldrb	r2, [r3, #1]
 80015b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <HAL_MPU_ConfigRegion+0x7c>)
 80015ba:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80015bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <HAL_MPU_ConfigRegion+0x7c>)
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	4a19      	ldr	r2, [pc, #100]	@ (8001628 <HAL_MPU_ConfigRegion+0x7c>)
 80015c2:	f023 0301 	bic.w	r3, r3, #1
 80015c6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80015c8:	4a17      	ldr	r2, [pc, #92]	@ (8001628 <HAL_MPU_ConfigRegion+0x7c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	7b1b      	ldrb	r3, [r3, #12]
 80015d4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	7adb      	ldrb	r3, [r3, #11]
 80015da:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	7a9b      	ldrb	r3, [r3, #10]
 80015e2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7b5b      	ldrb	r3, [r3, #13]
 80015ea:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	7b9b      	ldrb	r3, [r3, #14]
 80015f2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	7bdb      	ldrb	r3, [r3, #15]
 80015fa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	7a5b      	ldrb	r3, [r3, #9]
 8001602:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001604:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7a1b      	ldrb	r3, [r3, #8]
 800160a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800160c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001614:	4a04      	ldr	r2, [pc, #16]	@ (8001628 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001616:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001618:	6113      	str	r3, [r2, #16]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed90 	.word	0xe000ed90

0800162c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001634:	f7ff fe36 	bl	80012a4 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e2dc      	b.n	8001bfe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d008      	beq.n	8001662 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2280      	movs	r2, #128	@ 0x80
 8001654:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e2cd      	b.n	8001bfe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a76      	ldr	r2, [pc, #472]	@ (8001840 <HAL_DMA_Abort+0x214>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d04a      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a74      	ldr	r2, [pc, #464]	@ (8001844 <HAL_DMA_Abort+0x218>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d045      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a73      	ldr	r2, [pc, #460]	@ (8001848 <HAL_DMA_Abort+0x21c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d040      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a71      	ldr	r2, [pc, #452]	@ (800184c <HAL_DMA_Abort+0x220>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d03b      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a70      	ldr	r2, [pc, #448]	@ (8001850 <HAL_DMA_Abort+0x224>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d036      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a6e      	ldr	r2, [pc, #440]	@ (8001854 <HAL_DMA_Abort+0x228>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d031      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a6d      	ldr	r2, [pc, #436]	@ (8001858 <HAL_DMA_Abort+0x22c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d02c      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a6b      	ldr	r2, [pc, #428]	@ (800185c <HAL_DMA_Abort+0x230>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d027      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a6a      	ldr	r2, [pc, #424]	@ (8001860 <HAL_DMA_Abort+0x234>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d022      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a68      	ldr	r2, [pc, #416]	@ (8001864 <HAL_DMA_Abort+0x238>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d01d      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a67      	ldr	r2, [pc, #412]	@ (8001868 <HAL_DMA_Abort+0x23c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d018      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a65      	ldr	r2, [pc, #404]	@ (800186c <HAL_DMA_Abort+0x240>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d013      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a64      	ldr	r2, [pc, #400]	@ (8001870 <HAL_DMA_Abort+0x244>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d00e      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a62      	ldr	r2, [pc, #392]	@ (8001874 <HAL_DMA_Abort+0x248>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d009      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a61      	ldr	r2, [pc, #388]	@ (8001878 <HAL_DMA_Abort+0x24c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d004      	beq.n	8001702 <HAL_DMA_Abort+0xd6>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a5f      	ldr	r2, [pc, #380]	@ (800187c <HAL_DMA_Abort+0x250>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_DMA_Abort+0xda>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <HAL_DMA_Abort+0xdc>
 8001706:	2300      	movs	r3, #0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d013      	beq.n	8001734 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 021e 	bic.w	r2, r2, #30
 800171a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	695a      	ldr	r2, [r3, #20]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800172a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	e00a      	b.n	800174a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 020e 	bic.w	r2, r2, #14
 8001742:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a3c      	ldr	r2, [pc, #240]	@ (8001840 <HAL_DMA_Abort+0x214>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d072      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a3a      	ldr	r2, [pc, #232]	@ (8001844 <HAL_DMA_Abort+0x218>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d06d      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a39      	ldr	r2, [pc, #228]	@ (8001848 <HAL_DMA_Abort+0x21c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d068      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a37      	ldr	r2, [pc, #220]	@ (800184c <HAL_DMA_Abort+0x220>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d063      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a36      	ldr	r2, [pc, #216]	@ (8001850 <HAL_DMA_Abort+0x224>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d05e      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a34      	ldr	r2, [pc, #208]	@ (8001854 <HAL_DMA_Abort+0x228>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d059      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a33      	ldr	r2, [pc, #204]	@ (8001858 <HAL_DMA_Abort+0x22c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d054      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a31      	ldr	r2, [pc, #196]	@ (800185c <HAL_DMA_Abort+0x230>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d04f      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a30      	ldr	r2, [pc, #192]	@ (8001860 <HAL_DMA_Abort+0x234>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d04a      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001864 <HAL_DMA_Abort+0x238>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d045      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001868 <HAL_DMA_Abort+0x23c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d040      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a2b      	ldr	r2, [pc, #172]	@ (800186c <HAL_DMA_Abort+0x240>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d03b      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a2a      	ldr	r2, [pc, #168]	@ (8001870 <HAL_DMA_Abort+0x244>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d036      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a28      	ldr	r2, [pc, #160]	@ (8001874 <HAL_DMA_Abort+0x248>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d031      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a27      	ldr	r2, [pc, #156]	@ (8001878 <HAL_DMA_Abort+0x24c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d02c      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a25      	ldr	r2, [pc, #148]	@ (800187c <HAL_DMA_Abort+0x250>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d027      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a24      	ldr	r2, [pc, #144]	@ (8001880 <HAL_DMA_Abort+0x254>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d022      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a22      	ldr	r2, [pc, #136]	@ (8001884 <HAL_DMA_Abort+0x258>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d01d      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a21      	ldr	r2, [pc, #132]	@ (8001888 <HAL_DMA_Abort+0x25c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d018      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1f      	ldr	r2, [pc, #124]	@ (800188c <HAL_DMA_Abort+0x260>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1e      	ldr	r2, [pc, #120]	@ (8001890 <HAL_DMA_Abort+0x264>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d00e      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1c      	ldr	r2, [pc, #112]	@ (8001894 <HAL_DMA_Abort+0x268>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d009      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a1b      	ldr	r2, [pc, #108]	@ (8001898 <HAL_DMA_Abort+0x26c>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d004      	beq.n	800183a <HAL_DMA_Abort+0x20e>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a19      	ldr	r2, [pc, #100]	@ (800189c <HAL_DMA_Abort+0x270>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d132      	bne.n	80018a0 <HAL_DMA_Abort+0x274>
 800183a:	2301      	movs	r3, #1
 800183c:	e031      	b.n	80018a2 <HAL_DMA_Abort+0x276>
 800183e:	bf00      	nop
 8001840:	40020010 	.word	0x40020010
 8001844:	40020028 	.word	0x40020028
 8001848:	40020040 	.word	0x40020040
 800184c:	40020058 	.word	0x40020058
 8001850:	40020070 	.word	0x40020070
 8001854:	40020088 	.word	0x40020088
 8001858:	400200a0 	.word	0x400200a0
 800185c:	400200b8 	.word	0x400200b8
 8001860:	40020410 	.word	0x40020410
 8001864:	40020428 	.word	0x40020428
 8001868:	40020440 	.word	0x40020440
 800186c:	40020458 	.word	0x40020458
 8001870:	40020470 	.word	0x40020470
 8001874:	40020488 	.word	0x40020488
 8001878:	400204a0 	.word	0x400204a0
 800187c:	400204b8 	.word	0x400204b8
 8001880:	58025408 	.word	0x58025408
 8001884:	5802541c 	.word	0x5802541c
 8001888:	58025430 	.word	0x58025430
 800188c:	58025444 	.word	0x58025444
 8001890:	58025458 	.word	0x58025458
 8001894:	5802546c 	.word	0x5802546c
 8001898:	58025480 	.word	0x58025480
 800189c:	58025494 	.word	0x58025494
 80018a0:	2300      	movs	r3, #0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d007      	beq.n	80018b6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a6d      	ldr	r2, [pc, #436]	@ (8001a70 <HAL_DMA_Abort+0x444>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d04a      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a6b      	ldr	r2, [pc, #428]	@ (8001a74 <HAL_DMA_Abort+0x448>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d045      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a6a      	ldr	r2, [pc, #424]	@ (8001a78 <HAL_DMA_Abort+0x44c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d040      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a68      	ldr	r2, [pc, #416]	@ (8001a7c <HAL_DMA_Abort+0x450>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d03b      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a67      	ldr	r2, [pc, #412]	@ (8001a80 <HAL_DMA_Abort+0x454>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d036      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a65      	ldr	r2, [pc, #404]	@ (8001a84 <HAL_DMA_Abort+0x458>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d031      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a64      	ldr	r2, [pc, #400]	@ (8001a88 <HAL_DMA_Abort+0x45c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d02c      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a62      	ldr	r2, [pc, #392]	@ (8001a8c <HAL_DMA_Abort+0x460>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d027      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a61      	ldr	r2, [pc, #388]	@ (8001a90 <HAL_DMA_Abort+0x464>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d022      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a5f      	ldr	r2, [pc, #380]	@ (8001a94 <HAL_DMA_Abort+0x468>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d01d      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a5e      	ldr	r2, [pc, #376]	@ (8001a98 <HAL_DMA_Abort+0x46c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d018      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a5c      	ldr	r2, [pc, #368]	@ (8001a9c <HAL_DMA_Abort+0x470>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a5b      	ldr	r2, [pc, #364]	@ (8001aa0 <HAL_DMA_Abort+0x474>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d00e      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a59      	ldr	r2, [pc, #356]	@ (8001aa4 <HAL_DMA_Abort+0x478>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d009      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a58      	ldr	r2, [pc, #352]	@ (8001aa8 <HAL_DMA_Abort+0x47c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d004      	beq.n	8001956 <HAL_DMA_Abort+0x32a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a56      	ldr	r2, [pc, #344]	@ (8001aac <HAL_DMA_Abort+0x480>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d108      	bne.n	8001968 <HAL_DMA_Abort+0x33c>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0201 	bic.w	r2, r2, #1
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	e007      	b.n	8001978 <HAL_DMA_Abort+0x34c>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001978:	e013      	b.n	80019a2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800197a:	f7ff fc93 	bl	80012a4 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b05      	cmp	r3, #5
 8001986:	d90c      	bls.n	80019a2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2220      	movs	r2, #32
 800198c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2203      	movs	r2, #3
 8001992:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e12d      	b.n	8001bfe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1e5      	bne.n	800197a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001a70 <HAL_DMA_Abort+0x444>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d04a      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001a74 <HAL_DMA_Abort+0x448>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d045      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001a78 <HAL_DMA_Abort+0x44c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d040      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a2a      	ldr	r2, [pc, #168]	@ (8001a7c <HAL_DMA_Abort+0x450>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d03b      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a29      	ldr	r2, [pc, #164]	@ (8001a80 <HAL_DMA_Abort+0x454>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d036      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a27      	ldr	r2, [pc, #156]	@ (8001a84 <HAL_DMA_Abort+0x458>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d031      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a26      	ldr	r2, [pc, #152]	@ (8001a88 <HAL_DMA_Abort+0x45c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d02c      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a24      	ldr	r2, [pc, #144]	@ (8001a8c <HAL_DMA_Abort+0x460>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d027      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a23      	ldr	r2, [pc, #140]	@ (8001a90 <HAL_DMA_Abort+0x464>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d022      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a21      	ldr	r2, [pc, #132]	@ (8001a94 <HAL_DMA_Abort+0x468>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d01d      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a20      	ldr	r2, [pc, #128]	@ (8001a98 <HAL_DMA_Abort+0x46c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d018      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a1e      	ldr	r2, [pc, #120]	@ (8001a9c <HAL_DMA_Abort+0x470>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d013      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa0 <HAL_DMA_Abort+0x474>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d00e      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa4 <HAL_DMA_Abort+0x478>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d009      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8001aa8 <HAL_DMA_Abort+0x47c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d004      	beq.n	8001a4e <HAL_DMA_Abort+0x422>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a18      	ldr	r2, [pc, #96]	@ (8001aac <HAL_DMA_Abort+0x480>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d101      	bne.n	8001a52 <HAL_DMA_Abort+0x426>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_DMA_Abort+0x428>
 8001a52:	2300      	movs	r3, #0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d02b      	beq.n	8001ab0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a62:	f003 031f 	and.w	r3, r3, #31
 8001a66:	223f      	movs	r2, #63	@ 0x3f
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	e02a      	b.n	8001ac6 <HAL_DMA_Abort+0x49a>
 8001a70:	40020010 	.word	0x40020010
 8001a74:	40020028 	.word	0x40020028
 8001a78:	40020040 	.word	0x40020040
 8001a7c:	40020058 	.word	0x40020058
 8001a80:	40020070 	.word	0x40020070
 8001a84:	40020088 	.word	0x40020088
 8001a88:	400200a0 	.word	0x400200a0
 8001a8c:	400200b8 	.word	0x400200b8
 8001a90:	40020410 	.word	0x40020410
 8001a94:	40020428 	.word	0x40020428
 8001a98:	40020440 	.word	0x40020440
 8001a9c:	40020458 	.word	0x40020458
 8001aa0:	40020470 	.word	0x40020470
 8001aa4:	40020488 	.word	0x40020488
 8001aa8:	400204a0 	.word	0x400204a0
 8001aac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	2201      	movs	r2, #1
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a4f      	ldr	r2, [pc, #316]	@ (8001c08 <HAL_DMA_Abort+0x5dc>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d072      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a4d      	ldr	r2, [pc, #308]	@ (8001c0c <HAL_DMA_Abort+0x5e0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d06d      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a4c      	ldr	r2, [pc, #304]	@ (8001c10 <HAL_DMA_Abort+0x5e4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d068      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a4a      	ldr	r2, [pc, #296]	@ (8001c14 <HAL_DMA_Abort+0x5e8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d063      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a49      	ldr	r2, [pc, #292]	@ (8001c18 <HAL_DMA_Abort+0x5ec>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d05e      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a47      	ldr	r2, [pc, #284]	@ (8001c1c <HAL_DMA_Abort+0x5f0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d059      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a46      	ldr	r2, [pc, #280]	@ (8001c20 <HAL_DMA_Abort+0x5f4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d054      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a44      	ldr	r2, [pc, #272]	@ (8001c24 <HAL_DMA_Abort+0x5f8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d04f      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a43      	ldr	r2, [pc, #268]	@ (8001c28 <HAL_DMA_Abort+0x5fc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d04a      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a41      	ldr	r2, [pc, #260]	@ (8001c2c <HAL_DMA_Abort+0x600>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d045      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a40      	ldr	r2, [pc, #256]	@ (8001c30 <HAL_DMA_Abort+0x604>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d040      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a3e      	ldr	r2, [pc, #248]	@ (8001c34 <HAL_DMA_Abort+0x608>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d03b      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a3d      	ldr	r2, [pc, #244]	@ (8001c38 <HAL_DMA_Abort+0x60c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d036      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c3c <HAL_DMA_Abort+0x610>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d031      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a3a      	ldr	r2, [pc, #232]	@ (8001c40 <HAL_DMA_Abort+0x614>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d02c      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a38      	ldr	r2, [pc, #224]	@ (8001c44 <HAL_DMA_Abort+0x618>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d027      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a37      	ldr	r2, [pc, #220]	@ (8001c48 <HAL_DMA_Abort+0x61c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d022      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a35      	ldr	r2, [pc, #212]	@ (8001c4c <HAL_DMA_Abort+0x620>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d01d      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a34      	ldr	r2, [pc, #208]	@ (8001c50 <HAL_DMA_Abort+0x624>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d018      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a32      	ldr	r2, [pc, #200]	@ (8001c54 <HAL_DMA_Abort+0x628>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d013      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a31      	ldr	r2, [pc, #196]	@ (8001c58 <HAL_DMA_Abort+0x62c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d00e      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a2f      	ldr	r2, [pc, #188]	@ (8001c5c <HAL_DMA_Abort+0x630>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d009      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a2e      	ldr	r2, [pc, #184]	@ (8001c60 <HAL_DMA_Abort+0x634>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d004      	beq.n	8001bb6 <HAL_DMA_Abort+0x58a>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a2c      	ldr	r2, [pc, #176]	@ (8001c64 <HAL_DMA_Abort+0x638>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_DMA_Abort+0x58e>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <HAL_DMA_Abort+0x590>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d015      	beq.n	8001bec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001bc8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00c      	beq.n	8001bec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001be0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001bea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40020010 	.word	0x40020010
 8001c0c:	40020028 	.word	0x40020028
 8001c10:	40020040 	.word	0x40020040
 8001c14:	40020058 	.word	0x40020058
 8001c18:	40020070 	.word	0x40020070
 8001c1c:	40020088 	.word	0x40020088
 8001c20:	400200a0 	.word	0x400200a0
 8001c24:	400200b8 	.word	0x400200b8
 8001c28:	40020410 	.word	0x40020410
 8001c2c:	40020428 	.word	0x40020428
 8001c30:	40020440 	.word	0x40020440
 8001c34:	40020458 	.word	0x40020458
 8001c38:	40020470 	.word	0x40020470
 8001c3c:	40020488 	.word	0x40020488
 8001c40:	400204a0 	.word	0x400204a0
 8001c44:	400204b8 	.word	0x400204b8
 8001c48:	58025408 	.word	0x58025408
 8001c4c:	5802541c 	.word	0x5802541c
 8001c50:	58025430 	.word	0x58025430
 8001c54:	58025444 	.word	0x58025444
 8001c58:	58025458 	.word	0x58025458
 8001c5c:	5802546c 	.word	0x5802546c
 8001c60:	58025480 	.word	0x58025480
 8001c64:	58025494 	.word	0x58025494

08001c68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e237      	b.n	80020ea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d004      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2280      	movs	r2, #128	@ 0x80
 8001c8a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e22c      	b.n	80020ea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a5c      	ldr	r2, [pc, #368]	@ (8001e08 <HAL_DMA_Abort_IT+0x1a0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d04a      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a5b      	ldr	r2, [pc, #364]	@ (8001e0c <HAL_DMA_Abort_IT+0x1a4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d045      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a59      	ldr	r2, [pc, #356]	@ (8001e10 <HAL_DMA_Abort_IT+0x1a8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d040      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a58      	ldr	r2, [pc, #352]	@ (8001e14 <HAL_DMA_Abort_IT+0x1ac>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d03b      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a56      	ldr	r2, [pc, #344]	@ (8001e18 <HAL_DMA_Abort_IT+0x1b0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d036      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a55      	ldr	r2, [pc, #340]	@ (8001e1c <HAL_DMA_Abort_IT+0x1b4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d031      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a53      	ldr	r2, [pc, #332]	@ (8001e20 <HAL_DMA_Abort_IT+0x1b8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d02c      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a52      	ldr	r2, [pc, #328]	@ (8001e24 <HAL_DMA_Abort_IT+0x1bc>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d027      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a50      	ldr	r2, [pc, #320]	@ (8001e28 <HAL_DMA_Abort_IT+0x1c0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d022      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a4f      	ldr	r2, [pc, #316]	@ (8001e2c <HAL_DMA_Abort_IT+0x1c4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d01d      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a4d      	ldr	r2, [pc, #308]	@ (8001e30 <HAL_DMA_Abort_IT+0x1c8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d018      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a4c      	ldr	r2, [pc, #304]	@ (8001e34 <HAL_DMA_Abort_IT+0x1cc>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d013      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a4a      	ldr	r2, [pc, #296]	@ (8001e38 <HAL_DMA_Abort_IT+0x1d0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00e      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a49      	ldr	r2, [pc, #292]	@ (8001e3c <HAL_DMA_Abort_IT+0x1d4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d009      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a47      	ldr	r2, [pc, #284]	@ (8001e40 <HAL_DMA_Abort_IT+0x1d8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d004      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xc8>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a46      	ldr	r2, [pc, #280]	@ (8001e44 <HAL_DMA_Abort_IT+0x1dc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d101      	bne.n	8001d34 <HAL_DMA_Abort_IT+0xcc>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <HAL_DMA_Abort_IT+0xce>
 8001d34:	2300      	movs	r3, #0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 8086 	beq.w	8001e48 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2204      	movs	r2, #4
 8001d40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a2f      	ldr	r2, [pc, #188]	@ (8001e08 <HAL_DMA_Abort_IT+0x1a0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d04a      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a2e      	ldr	r2, [pc, #184]	@ (8001e0c <HAL_DMA_Abort_IT+0x1a4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d045      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e10 <HAL_DMA_Abort_IT+0x1a8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d040      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a2b      	ldr	r2, [pc, #172]	@ (8001e14 <HAL_DMA_Abort_IT+0x1ac>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d03b      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a29      	ldr	r2, [pc, #164]	@ (8001e18 <HAL_DMA_Abort_IT+0x1b0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d036      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a28      	ldr	r2, [pc, #160]	@ (8001e1c <HAL_DMA_Abort_IT+0x1b4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d031      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a26      	ldr	r2, [pc, #152]	@ (8001e20 <HAL_DMA_Abort_IT+0x1b8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d02c      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a25      	ldr	r2, [pc, #148]	@ (8001e24 <HAL_DMA_Abort_IT+0x1bc>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d027      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a23      	ldr	r2, [pc, #140]	@ (8001e28 <HAL_DMA_Abort_IT+0x1c0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d022      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a22      	ldr	r2, [pc, #136]	@ (8001e2c <HAL_DMA_Abort_IT+0x1c4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d01d      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a20      	ldr	r2, [pc, #128]	@ (8001e30 <HAL_DMA_Abort_IT+0x1c8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d018      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e34 <HAL_DMA_Abort_IT+0x1cc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d013      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e38 <HAL_DMA_Abort_IT+0x1d0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d00e      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a1c      	ldr	r2, [pc, #112]	@ (8001e3c <HAL_DMA_Abort_IT+0x1d4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d009      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8001e40 <HAL_DMA_Abort_IT+0x1d8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d004      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x17c>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a19      	ldr	r2, [pc, #100]	@ (8001e44 <HAL_DMA_Abort_IT+0x1dc>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d108      	bne.n	8001df6 <HAL_DMA_Abort_IT+0x18e>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	e178      	b.n	80020e8 <HAL_DMA_Abort_IT+0x480>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0201 	bic.w	r2, r2, #1
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	e16f      	b.n	80020e8 <HAL_DMA_Abort_IT+0x480>
 8001e08:	40020010 	.word	0x40020010
 8001e0c:	40020028 	.word	0x40020028
 8001e10:	40020040 	.word	0x40020040
 8001e14:	40020058 	.word	0x40020058
 8001e18:	40020070 	.word	0x40020070
 8001e1c:	40020088 	.word	0x40020088
 8001e20:	400200a0 	.word	0x400200a0
 8001e24:	400200b8 	.word	0x400200b8
 8001e28:	40020410 	.word	0x40020410
 8001e2c:	40020428 	.word	0x40020428
 8001e30:	40020440 	.word	0x40020440
 8001e34:	40020458 	.word	0x40020458
 8001e38:	40020470 	.word	0x40020470
 8001e3c:	40020488 	.word	0x40020488
 8001e40:	400204a0 	.word	0x400204a0
 8001e44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 020e 	bic.w	r2, r2, #14
 8001e56:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a6c      	ldr	r2, [pc, #432]	@ (8002010 <HAL_DMA_Abort_IT+0x3a8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d04a      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a6b      	ldr	r2, [pc, #428]	@ (8002014 <HAL_DMA_Abort_IT+0x3ac>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d045      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a69      	ldr	r2, [pc, #420]	@ (8002018 <HAL_DMA_Abort_IT+0x3b0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d040      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a68      	ldr	r2, [pc, #416]	@ (800201c <HAL_DMA_Abort_IT+0x3b4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d03b      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a66      	ldr	r2, [pc, #408]	@ (8002020 <HAL_DMA_Abort_IT+0x3b8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d036      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a65      	ldr	r2, [pc, #404]	@ (8002024 <HAL_DMA_Abort_IT+0x3bc>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d031      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a63      	ldr	r2, [pc, #396]	@ (8002028 <HAL_DMA_Abort_IT+0x3c0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d02c      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a62      	ldr	r2, [pc, #392]	@ (800202c <HAL_DMA_Abort_IT+0x3c4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d027      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a60      	ldr	r2, [pc, #384]	@ (8002030 <HAL_DMA_Abort_IT+0x3c8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d022      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a5f      	ldr	r2, [pc, #380]	@ (8002034 <HAL_DMA_Abort_IT+0x3cc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d01d      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a5d      	ldr	r2, [pc, #372]	@ (8002038 <HAL_DMA_Abort_IT+0x3d0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d018      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a5c      	ldr	r2, [pc, #368]	@ (800203c <HAL_DMA_Abort_IT+0x3d4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d013      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a5a      	ldr	r2, [pc, #360]	@ (8002040 <HAL_DMA_Abort_IT+0x3d8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00e      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a59      	ldr	r2, [pc, #356]	@ (8002044 <HAL_DMA_Abort_IT+0x3dc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d009      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a57      	ldr	r2, [pc, #348]	@ (8002048 <HAL_DMA_Abort_IT+0x3e0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d004      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x290>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a56      	ldr	r2, [pc, #344]	@ (800204c <HAL_DMA_Abort_IT+0x3e4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d108      	bne.n	8001f0a <HAL_DMA_Abort_IT+0x2a2>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0201 	bic.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	e007      	b.n	8001f1a <HAL_DMA_Abort_IT+0x2b2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0201 	bic.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a3c      	ldr	r2, [pc, #240]	@ (8002010 <HAL_DMA_Abort_IT+0x3a8>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d072      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a3a      	ldr	r2, [pc, #232]	@ (8002014 <HAL_DMA_Abort_IT+0x3ac>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d06d      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a39      	ldr	r2, [pc, #228]	@ (8002018 <HAL_DMA_Abort_IT+0x3b0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d068      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a37      	ldr	r2, [pc, #220]	@ (800201c <HAL_DMA_Abort_IT+0x3b4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d063      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a36      	ldr	r2, [pc, #216]	@ (8002020 <HAL_DMA_Abort_IT+0x3b8>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d05e      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a34      	ldr	r2, [pc, #208]	@ (8002024 <HAL_DMA_Abort_IT+0x3bc>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d059      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a33      	ldr	r2, [pc, #204]	@ (8002028 <HAL_DMA_Abort_IT+0x3c0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d054      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a31      	ldr	r2, [pc, #196]	@ (800202c <HAL_DMA_Abort_IT+0x3c4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d04f      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a30      	ldr	r2, [pc, #192]	@ (8002030 <HAL_DMA_Abort_IT+0x3c8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d04a      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a2e      	ldr	r2, [pc, #184]	@ (8002034 <HAL_DMA_Abort_IT+0x3cc>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d045      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a2d      	ldr	r2, [pc, #180]	@ (8002038 <HAL_DMA_Abort_IT+0x3d0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d040      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a2b      	ldr	r2, [pc, #172]	@ (800203c <HAL_DMA_Abort_IT+0x3d4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d03b      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a2a      	ldr	r2, [pc, #168]	@ (8002040 <HAL_DMA_Abort_IT+0x3d8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d036      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a28      	ldr	r2, [pc, #160]	@ (8002044 <HAL_DMA_Abort_IT+0x3dc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d031      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a27      	ldr	r2, [pc, #156]	@ (8002048 <HAL_DMA_Abort_IT+0x3e0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d02c      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a25      	ldr	r2, [pc, #148]	@ (800204c <HAL_DMA_Abort_IT+0x3e4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d027      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a24      	ldr	r2, [pc, #144]	@ (8002050 <HAL_DMA_Abort_IT+0x3e8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d022      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a22      	ldr	r2, [pc, #136]	@ (8002054 <HAL_DMA_Abort_IT+0x3ec>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01d      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a21      	ldr	r2, [pc, #132]	@ (8002058 <HAL_DMA_Abort_IT+0x3f0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d018      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a1f      	ldr	r2, [pc, #124]	@ (800205c <HAL_DMA_Abort_IT+0x3f4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8002060 <HAL_DMA_Abort_IT+0x3f8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d00e      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8002064 <HAL_DMA_Abort_IT+0x3fc>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d009      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a1b      	ldr	r2, [pc, #108]	@ (8002068 <HAL_DMA_Abort_IT+0x400>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d004      	beq.n	800200a <HAL_DMA_Abort_IT+0x3a2>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a19      	ldr	r2, [pc, #100]	@ (800206c <HAL_DMA_Abort_IT+0x404>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d132      	bne.n	8002070 <HAL_DMA_Abort_IT+0x408>
 800200a:	2301      	movs	r3, #1
 800200c:	e031      	b.n	8002072 <HAL_DMA_Abort_IT+0x40a>
 800200e:	bf00      	nop
 8002010:	40020010 	.word	0x40020010
 8002014:	40020028 	.word	0x40020028
 8002018:	40020040 	.word	0x40020040
 800201c:	40020058 	.word	0x40020058
 8002020:	40020070 	.word	0x40020070
 8002024:	40020088 	.word	0x40020088
 8002028:	400200a0 	.word	0x400200a0
 800202c:	400200b8 	.word	0x400200b8
 8002030:	40020410 	.word	0x40020410
 8002034:	40020428 	.word	0x40020428
 8002038:	40020440 	.word	0x40020440
 800203c:	40020458 	.word	0x40020458
 8002040:	40020470 	.word	0x40020470
 8002044:	40020488 	.word	0x40020488
 8002048:	400204a0 	.word	0x400204a0
 800204c:	400204b8 	.word	0x400204b8
 8002050:	58025408 	.word	0x58025408
 8002054:	5802541c 	.word	0x5802541c
 8002058:	58025430 	.word	0x58025430
 800205c:	58025444 	.word	0x58025444
 8002060:	58025458 	.word	0x58025458
 8002064:	5802546c 	.word	0x5802546c
 8002068:	58025480 	.word	0x58025480
 800206c:	58025494 	.word	0x58025494
 8002070:	2300      	movs	r3, #0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d028      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002080:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002084:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	2201      	movs	r2, #1
 8002096:	409a      	lsls	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80020a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00c      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80020c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop

080020f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	@ 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002102:	4b89      	ldr	r3, [pc, #548]	@ (8002328 <HAL_GPIO_Init+0x234>)
 8002104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002106:	e194      	b.n	8002432 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	2101      	movs	r1, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa01 f303 	lsl.w	r3, r1, r3
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 8186 	beq.w	800242c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b01      	cmp	r3, #1
 800212a:	d005      	beq.n	8002138 <HAL_GPIO_Init+0x44>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d130      	bne.n	800219a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	2203      	movs	r2, #3
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800216e:	2201      	movs	r2, #1
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	091b      	lsrs	r3, r3, #4
 8002184:	f003 0201 	and.w	r2, r3, #1
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d017      	beq.n	80021d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	2203      	movs	r2, #3
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d123      	bne.n	800222a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	08da      	lsrs	r2, r3, #3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3208      	adds	r2, #8
 80021ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	220f      	movs	r2, #15
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	691a      	ldr	r2, [r3, #16]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	08da      	lsrs	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3208      	adds	r2, #8
 8002224:	69b9      	ldr	r1, [r7, #24]
 8002226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	2203      	movs	r2, #3
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0203 	and.w	r2, r3, #3
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80e0 	beq.w	800242c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226c:	4b2f      	ldr	r3, [pc, #188]	@ (800232c <HAL_GPIO_Init+0x238>)
 800226e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002272:	4a2e      	ldr	r2, [pc, #184]	@ (800232c <HAL_GPIO_Init+0x238>)
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800227c:	4b2b      	ldr	r3, [pc, #172]	@ (800232c <HAL_GPIO_Init+0x238>)
 800227e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800228a:	4a29      	ldr	r2, [pc, #164]	@ (8002330 <HAL_GPIO_Init+0x23c>)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	3302      	adds	r3, #2
 8002292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	220f      	movs	r2, #15
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4013      	ands	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a20      	ldr	r2, [pc, #128]	@ (8002334 <HAL_GPIO_Init+0x240>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d052      	beq.n	800235c <HAL_GPIO_Init+0x268>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002338 <HAL_GPIO_Init+0x244>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d031      	beq.n	8002322 <HAL_GPIO_Init+0x22e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a1e      	ldr	r2, [pc, #120]	@ (800233c <HAL_GPIO_Init+0x248>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d02b      	beq.n	800231e <HAL_GPIO_Init+0x22a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002340 <HAL_GPIO_Init+0x24c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d025      	beq.n	800231a <HAL_GPIO_Init+0x226>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002344 <HAL_GPIO_Init+0x250>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d01f      	beq.n	8002316 <HAL_GPIO_Init+0x222>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002348 <HAL_GPIO_Init+0x254>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d019      	beq.n	8002312 <HAL_GPIO_Init+0x21e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a1a      	ldr	r2, [pc, #104]	@ (800234c <HAL_GPIO_Init+0x258>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d013      	beq.n	800230e <HAL_GPIO_Init+0x21a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a19      	ldr	r2, [pc, #100]	@ (8002350 <HAL_GPIO_Init+0x25c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00d      	beq.n	800230a <HAL_GPIO_Init+0x216>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a18      	ldr	r2, [pc, #96]	@ (8002354 <HAL_GPIO_Init+0x260>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d007      	beq.n	8002306 <HAL_GPIO_Init+0x212>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a17      	ldr	r2, [pc, #92]	@ (8002358 <HAL_GPIO_Init+0x264>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d101      	bne.n	8002302 <HAL_GPIO_Init+0x20e>
 80022fe:	2309      	movs	r3, #9
 8002300:	e02d      	b.n	800235e <HAL_GPIO_Init+0x26a>
 8002302:	230a      	movs	r3, #10
 8002304:	e02b      	b.n	800235e <HAL_GPIO_Init+0x26a>
 8002306:	2308      	movs	r3, #8
 8002308:	e029      	b.n	800235e <HAL_GPIO_Init+0x26a>
 800230a:	2307      	movs	r3, #7
 800230c:	e027      	b.n	800235e <HAL_GPIO_Init+0x26a>
 800230e:	2306      	movs	r3, #6
 8002310:	e025      	b.n	800235e <HAL_GPIO_Init+0x26a>
 8002312:	2305      	movs	r3, #5
 8002314:	e023      	b.n	800235e <HAL_GPIO_Init+0x26a>
 8002316:	2304      	movs	r3, #4
 8002318:	e021      	b.n	800235e <HAL_GPIO_Init+0x26a>
 800231a:	2303      	movs	r3, #3
 800231c:	e01f      	b.n	800235e <HAL_GPIO_Init+0x26a>
 800231e:	2302      	movs	r3, #2
 8002320:	e01d      	b.n	800235e <HAL_GPIO_Init+0x26a>
 8002322:	2301      	movs	r3, #1
 8002324:	e01b      	b.n	800235e <HAL_GPIO_Init+0x26a>
 8002326:	bf00      	nop
 8002328:	58000080 	.word	0x58000080
 800232c:	58024400 	.word	0x58024400
 8002330:	58000400 	.word	0x58000400
 8002334:	58020000 	.word	0x58020000
 8002338:	58020400 	.word	0x58020400
 800233c:	58020800 	.word	0x58020800
 8002340:	58020c00 	.word	0x58020c00
 8002344:	58021000 	.word	0x58021000
 8002348:	58021400 	.word	0x58021400
 800234c:	58021800 	.word	0x58021800
 8002350:	58021c00 	.word	0x58021c00
 8002354:	58022000 	.word	0x58022000
 8002358:	58022400 	.word	0x58022400
 800235c:	2300      	movs	r3, #0
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	f002 0203 	and.w	r2, r2, #3
 8002364:	0092      	lsls	r2, r2, #2
 8002366:	4093      	lsls	r3, r2
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800236e:	4938      	ldr	r1, [pc, #224]	@ (8002450 <HAL_GPIO_Init+0x35c>)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	089b      	lsrs	r3, r3, #2
 8002374:	3302      	adds	r3, #2
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800237c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80023a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	3301      	adds	r3, #1
 8002430:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	f47f ae63 	bne.w	8002108 <HAL_GPIO_Init+0x14>
  }
}
 8002442:	bf00      	nop
 8002444:	bf00      	nop
 8002446:	3724      	adds	r7, #36	@ 0x24
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	58000400 	.word	0x58000400

08002454 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	887b      	ldrh	r3, [r7, #2]
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
 8002470:	e001      	b.n	8002476 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002472:	2300      	movs	r3, #0
 8002474:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800248c:	4b19      	ldr	r3, [pc, #100]	@ (80024f4 <HAL_PWREx_ConfigSupply+0x70>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b04      	cmp	r3, #4
 8002496:	d00a      	beq.n	80024ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002498:	4b16      	ldr	r3, [pc, #88]	@ (80024f4 <HAL_PWREx_ConfigSupply+0x70>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d001      	beq.n	80024aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e01f      	b.n	80024ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e01d      	b.n	80024ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024ae:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <HAL_PWREx_ConfigSupply+0x70>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f023 0207 	bic.w	r2, r3, #7
 80024b6:	490f      	ldr	r1, [pc, #60]	@ (80024f4 <HAL_PWREx_ConfigSupply+0x70>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024be:	f7fe fef1 	bl	80012a4 <HAL_GetTick>
 80024c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024c4:	e009      	b.n	80024da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024c6:	f7fe feed 	bl	80012a4 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024d4:	d901      	bls.n	80024da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e007      	b.n	80024ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_PWREx_ConfigSupply+0x70>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024e6:	d1ee      	bne.n	80024c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	58024800 	.word	0x58024800

080024f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08c      	sub	sp, #48	@ 0x30
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d102      	bne.n	800250c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	f000 bc48 	b.w	8002d9c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 8088 	beq.w	800262a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251a:	4b99      	ldr	r3, [pc, #612]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002522:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002524:	4b96      	ldr	r3, [pc, #600]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002528:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800252a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800252c:	2b10      	cmp	r3, #16
 800252e:	d007      	beq.n	8002540 <HAL_RCC_OscConfig+0x48>
 8002530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002532:	2b18      	cmp	r3, #24
 8002534:	d111      	bne.n	800255a <HAL_RCC_OscConfig+0x62>
 8002536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d10c      	bne.n	800255a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	4b8f      	ldr	r3, [pc, #572]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d06d      	beq.n	8002628 <HAL_RCC_OscConfig+0x130>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d169      	bne.n	8002628 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	f000 bc21 	b.w	8002d9c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002562:	d106      	bne.n	8002572 <HAL_RCC_OscConfig+0x7a>
 8002564:	4b86      	ldr	r3, [pc, #536]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a85      	ldr	r2, [pc, #532]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 800256a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	e02e      	b.n	80025d0 <HAL_RCC_OscConfig+0xd8>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10c      	bne.n	8002594 <HAL_RCC_OscConfig+0x9c>
 800257a:	4b81      	ldr	r3, [pc, #516]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a80      	ldr	r2, [pc, #512]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b7e      	ldr	r3, [pc, #504]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a7d      	ldr	r2, [pc, #500]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 800258c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e01d      	b.n	80025d0 <HAL_RCC_OscConfig+0xd8>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0xc0>
 800259e:	4b78      	ldr	r3, [pc, #480]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a77      	ldr	r2, [pc, #476]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80025a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b75      	ldr	r3, [pc, #468]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a74      	ldr	r2, [pc, #464]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0xd8>
 80025b8:	4b71      	ldr	r3, [pc, #452]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a70      	ldr	r2, [pc, #448]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80025be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b6e      	ldr	r3, [pc, #440]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a6d      	ldr	r2, [pc, #436]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80025ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d013      	beq.n	8002600 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe fe64 	bl	80012a4 <HAL_GetTick>
 80025dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e0:	f7fe fe60 	bl	80012a4 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	@ 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e3d4      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025f2:	4b63      	ldr	r3, [pc, #396]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0xe8>
 80025fe:	e014      	b.n	800262a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7fe fe50 	bl	80012a4 <HAL_GetTick>
 8002604:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002608:	f7fe fe4c 	bl	80012a4 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	@ 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e3c0      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800261a:	4b59      	ldr	r3, [pc, #356]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x110>
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80ca 	beq.w	80027cc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002638:	4b51      	ldr	r3, [pc, #324]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002640:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002642:	4b4f      	ldr	r3, [pc, #316]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002646:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d007      	beq.n	800265e <HAL_RCC_OscConfig+0x166>
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	2b18      	cmp	r3, #24
 8002652:	d156      	bne.n	8002702 <HAL_RCC_OscConfig+0x20a>
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d151      	bne.n	8002702 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800265e:	4b48      	ldr	r3, [pc, #288]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_RCC_OscConfig+0x17e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e392      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002676:	4b42      	ldr	r3, [pc, #264]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 0219 	bic.w	r2, r3, #25
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	493f      	ldr	r1, [pc, #252]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002684:	4313      	orrs	r3, r2
 8002686:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7fe fe0c 	bl	80012a4 <HAL_GetTick>
 800268c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002690:	f7fe fe08 	bl	80012a4 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e37c      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026a2:	4b37      	ldr	r3, [pc, #220]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ae:	f7fe fe29 	bl	8001304 <HAL_GetREVID>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d817      	bhi.n	80026ec <HAL_RCC_OscConfig+0x1f4>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	2b40      	cmp	r3, #64	@ 0x40
 80026c2:	d108      	bne.n	80026d6 <HAL_RCC_OscConfig+0x1de>
 80026c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80026cc:	4a2c      	ldr	r2, [pc, #176]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80026ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d4:	e07a      	b.n	80027cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	031b      	lsls	r3, r3, #12
 80026e4:	4926      	ldr	r1, [pc, #152]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ea:	e06f      	b.n	80027cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ec:	4b24      	ldr	r3, [pc, #144]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	061b      	lsls	r3, r3, #24
 80026fa:	4921      	ldr	r1, [pc, #132]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002700:	e064      	b.n	80027cc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d047      	beq.n	800279a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800270a:	4b1d      	ldr	r3, [pc, #116]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 0219 	bic.w	r2, r3, #25
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	491a      	ldr	r1, [pc, #104]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002718:	4313      	orrs	r3, r2
 800271a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fdc2 	bl	80012a4 <HAL_GetTick>
 8002720:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002724:	f7fe fdbe 	bl	80012a4 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e332      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002736:	4b12      	ldr	r3, [pc, #72]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002742:	f7fe fddf 	bl	8001304 <HAL_GetREVID>
 8002746:	4603      	mov	r3, r0
 8002748:	f241 0203 	movw	r2, #4099	@ 0x1003
 800274c:	4293      	cmp	r3, r2
 800274e:	d819      	bhi.n	8002784 <HAL_RCC_OscConfig+0x28c>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b40      	cmp	r3, #64	@ 0x40
 8002756:	d108      	bne.n	800276a <HAL_RCC_OscConfig+0x272>
 8002758:	4b09      	ldr	r3, [pc, #36]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002760:	4a07      	ldr	r2, [pc, #28]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 8002762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002766:	6053      	str	r3, [r2, #4]
 8002768:	e030      	b.n	80027cc <HAL_RCC_OscConfig+0x2d4>
 800276a:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	031b      	lsls	r3, r3, #12
 8002778:	4901      	ldr	r1, [pc, #4]	@ (8002780 <HAL_RCC_OscConfig+0x288>)
 800277a:	4313      	orrs	r3, r2
 800277c:	604b      	str	r3, [r1, #4]
 800277e:	e025      	b.n	80027cc <HAL_RCC_OscConfig+0x2d4>
 8002780:	58024400 	.word	0x58024400
 8002784:	4b9a      	ldr	r3, [pc, #616]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	061b      	lsls	r3, r3, #24
 8002792:	4997      	ldr	r1, [pc, #604]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
 8002798:	e018      	b.n	80027cc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279a:	4b95      	ldr	r3, [pc, #596]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a94      	ldr	r2, [pc, #592]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80027a0:	f023 0301 	bic.w	r3, r3, #1
 80027a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a6:	f7fe fd7d 	bl	80012a4 <HAL_GetTick>
 80027aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ae:	f7fe fd79 	bl	80012a4 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e2ed      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027c0:	4b8b      	ldr	r3, [pc, #556]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f0      	bne.n	80027ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80a9 	beq.w	800292c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027da:	4b85      	ldr	r3, [pc, #532]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027e4:	4b82      	ldr	r3, [pc, #520]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80027e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d007      	beq.n	8002800 <HAL_RCC_OscConfig+0x308>
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	2b18      	cmp	r3, #24
 80027f4:	d13a      	bne.n	800286c <HAL_RCC_OscConfig+0x374>
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d135      	bne.n	800286c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002800:	4b7b      	ldr	r3, [pc, #492]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_OscConfig+0x320>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	2b80      	cmp	r3, #128	@ 0x80
 8002812:	d001      	beq.n	8002818 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e2c1      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002818:	f7fe fd74 	bl	8001304 <HAL_GetREVID>
 800281c:	4603      	mov	r3, r0
 800281e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002822:	4293      	cmp	r3, r2
 8002824:	d817      	bhi.n	8002856 <HAL_RCC_OscConfig+0x35e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	2b20      	cmp	r3, #32
 800282c:	d108      	bne.n	8002840 <HAL_RCC_OscConfig+0x348>
 800282e:	4b70      	ldr	r3, [pc, #448]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002836:	4a6e      	ldr	r2, [pc, #440]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002838:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800283c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800283e:	e075      	b.n	800292c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002840:	4b6b      	ldr	r3, [pc, #428]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	069b      	lsls	r3, r3, #26
 800284e:	4968      	ldr	r1, [pc, #416]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002854:	e06a      	b.n	800292c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002856:	4b66      	ldr	r3, [pc, #408]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	061b      	lsls	r3, r3, #24
 8002864:	4962      	ldr	r1, [pc, #392]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002866:	4313      	orrs	r3, r2
 8002868:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800286a:	e05f      	b.n	800292c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d042      	beq.n	80028fa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002874:	4b5e      	ldr	r3, [pc, #376]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a5d      	ldr	r2, [pc, #372]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 800287a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800287e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7fe fd10 	bl	80012a4 <HAL_GetTick>
 8002884:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002888:	f7fe fd0c 	bl	80012a4 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e280      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800289a:	4b55      	ldr	r3, [pc, #340]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028a6:	f7fe fd2d 	bl	8001304 <HAL_GetREVID>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d817      	bhi.n	80028e4 <HAL_RCC_OscConfig+0x3ec>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d108      	bne.n	80028ce <HAL_RCC_OscConfig+0x3d6>
 80028bc:	4b4c      	ldr	r3, [pc, #304]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80028c4:	4a4a      	ldr	r2, [pc, #296]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80028c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80028ca:	6053      	str	r3, [r2, #4]
 80028cc:	e02e      	b.n	800292c <HAL_RCC_OscConfig+0x434>
 80028ce:	4b48      	ldr	r3, [pc, #288]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	069b      	lsls	r3, r3, #26
 80028dc:	4944      	ldr	r1, [pc, #272]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	604b      	str	r3, [r1, #4]
 80028e2:	e023      	b.n	800292c <HAL_RCC_OscConfig+0x434>
 80028e4:	4b42      	ldr	r3, [pc, #264]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	061b      	lsls	r3, r3, #24
 80028f2:	493f      	ldr	r1, [pc, #252]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	60cb      	str	r3, [r1, #12]
 80028f8:	e018      	b.n	800292c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028fa:	4b3d      	ldr	r3, [pc, #244]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a3c      	ldr	r2, [pc, #240]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002900:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002906:	f7fe fccd 	bl	80012a4 <HAL_GetTick>
 800290a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800290e:	f7fe fcc9 	bl	80012a4 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e23d      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002920:	4b33      	ldr	r3, [pc, #204]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f0      	bne.n	800290e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d036      	beq.n	80029a6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d019      	beq.n	8002974 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002940:	4b2b      	ldr	r3, [pc, #172]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002944:	4a2a      	ldr	r2, [pc, #168]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294c:	f7fe fcaa 	bl	80012a4 <HAL_GetTick>
 8002950:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002954:	f7fe fca6 	bl	80012a4 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e21a      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002966:	4b22      	ldr	r3, [pc, #136]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x45c>
 8002972:	e018      	b.n	80029a6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002974:	4b1e      	ldr	r3, [pc, #120]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 8002976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002978:	4a1d      	ldr	r2, [pc, #116]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 800297a:	f023 0301 	bic.w	r3, r3, #1
 800297e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002980:	f7fe fc90 	bl	80012a4 <HAL_GetTick>
 8002984:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002988:	f7fe fc8c 	bl	80012a4 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e200      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800299a:	4b15      	ldr	r3, [pc, #84]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 800299c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d039      	beq.n	8002a26 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d01c      	beq.n	80029f4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029ba:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a0c      	ldr	r2, [pc, #48]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80029c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029c6:	f7fe fc6d 	bl	80012a4 <HAL_GetTick>
 80029ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029ce:	f7fe fc69 	bl	80012a4 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e1dd      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029e0:	4b03      	ldr	r3, [pc, #12]	@ (80029f0 <HAL_RCC_OscConfig+0x4f8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x4d6>
 80029ec:	e01b      	b.n	8002a26 <HAL_RCC_OscConfig+0x52e>
 80029ee:	bf00      	nop
 80029f0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029f4:	4b9b      	ldr	r3, [pc, #620]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a9a      	ldr	r2, [pc, #616]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 80029fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a00:	f7fe fc50 	bl	80012a4 <HAL_GetTick>
 8002a04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a08:	f7fe fc4c 	bl	80012a4 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e1c0      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a1a:	4b92      	ldr	r3, [pc, #584]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 8081 	beq.w	8002b36 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a34:	4b8c      	ldr	r3, [pc, #560]	@ (8002c68 <HAL_RCC_OscConfig+0x770>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a8b      	ldr	r2, [pc, #556]	@ (8002c68 <HAL_RCC_OscConfig+0x770>)
 8002a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a40:	f7fe fc30 	bl	80012a4 <HAL_GetTick>
 8002a44:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a48:	f7fe fc2c 	bl	80012a4 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	@ 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e1a0      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a5a:	4b83      	ldr	r3, [pc, #524]	@ (8002c68 <HAL_RCC_OscConfig+0x770>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d106      	bne.n	8002a7c <HAL_RCC_OscConfig+0x584>
 8002a6e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a72:	4a7c      	ldr	r2, [pc, #496]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a7a:	e02d      	b.n	8002ad8 <HAL_RCC_OscConfig+0x5e0>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10c      	bne.n	8002a9e <HAL_RCC_OscConfig+0x5a6>
 8002a84:	4b77      	ldr	r3, [pc, #476]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a88:	4a76      	ldr	r2, [pc, #472]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002a8a:	f023 0301 	bic.w	r3, r3, #1
 8002a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a90:	4b74      	ldr	r3, [pc, #464]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a94:	4a73      	ldr	r2, [pc, #460]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002a96:	f023 0304 	bic.w	r3, r3, #4
 8002a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a9c:	e01c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x5e0>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b05      	cmp	r3, #5
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x5c8>
 8002aa6:	4b6f      	ldr	r3, [pc, #444]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aaa:	4a6e      	ldr	r2, [pc, #440]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab2:	4b6c      	ldr	r3, [pc, #432]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab6:	4a6b      	ldr	r2, [pc, #428]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0x5e0>
 8002ac0:	4b68      	ldr	r3, [pc, #416]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac4:	4a67      	ldr	r2, [pc, #412]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002acc:	4b65      	ldr	r3, [pc, #404]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad0:	4a64      	ldr	r2, [pc, #400]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002ad2:	f023 0304 	bic.w	r3, r3, #4
 8002ad6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d015      	beq.n	8002b0c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae0:	f7fe fbe0 	bl	80012a4 <HAL_GetTick>
 8002ae4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae8:	f7fe fbdc 	bl	80012a4 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e14e      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002afe:	4b59      	ldr	r3, [pc, #356]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0ee      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x5f0>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0c:	f7fe fbca 	bl	80012a4 <HAL_GetTick>
 8002b10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b14:	f7fe fbc6 	bl	80012a4 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e138      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b2a:	4b4e      	ldr	r3, [pc, #312]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1ee      	bne.n	8002b14 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 812d 	beq.w	8002d9a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b40:	4b48      	ldr	r3, [pc, #288]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b48:	2b18      	cmp	r3, #24
 8002b4a:	f000 80bd 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	f040 809e 	bne.w	8002c94 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b58:	4b42      	ldr	r3, [pc, #264]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a41      	ldr	r2, [pc, #260]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7fe fb9e 	bl	80012a4 <HAL_GetTick>
 8002b68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7fe fb9a 	bl	80012a4 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e10e      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b7e:	4b39      	ldr	r3, [pc, #228]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b8a:	4b36      	ldr	r3, [pc, #216]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002b8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b8e:	4b37      	ldr	r3, [pc, #220]	@ (8002c6c <HAL_RCC_OscConfig+0x774>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b9a:	0112      	lsls	r2, r2, #4
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	4931      	ldr	r1, [pc, #196]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	628b      	str	r3, [r1, #40]	@ 0x28
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	025b      	lsls	r3, r3, #9
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	041b      	lsls	r3, r3, #16
 8002bc2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	061b      	lsls	r3, r3, #24
 8002bd0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002bd4:	4923      	ldr	r1, [pc, #140]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002bda:	4b22      	ldr	r3, [pc, #136]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bde:	4a21      	ldr	r2, [pc, #132]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002be6:	4b1f      	ldr	r3, [pc, #124]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002be8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bea:	4b21      	ldr	r3, [pc, #132]	@ (8002c70 <HAL_RCC_OscConfig+0x778>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bf2:	00d2      	lsls	r2, r2, #3
 8002bf4:	491b      	ldr	r1, [pc, #108]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfe:	f023 020c 	bic.w	r2, r3, #12
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	4917      	ldr	r1, [pc, #92]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c0c:	4b15      	ldr	r3, [pc, #84]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c10:	f023 0202 	bic.w	r2, r3, #2
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c18:	4912      	ldr	r1, [pc, #72]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c1e:	4b11      	ldr	r3, [pc, #68]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c22:	4a10      	ldr	r2, [pc, #64]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2e:	4a0d      	ldr	r2, [pc, #52]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c36:	4b0b      	ldr	r3, [pc, #44]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c42:	4b08      	ldr	r3, [pc, #32]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c46:	4a07      	ldr	r2, [pc, #28]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c4e:	4b05      	ldr	r3, [pc, #20]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a04      	ldr	r2, [pc, #16]	@ (8002c64 <HAL_RCC_OscConfig+0x76c>)
 8002c54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7fe fb23 	bl	80012a4 <HAL_GetTick>
 8002c5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c60:	e011      	b.n	8002c86 <HAL_RCC_OscConfig+0x78e>
 8002c62:	bf00      	nop
 8002c64:	58024400 	.word	0x58024400
 8002c68:	58024800 	.word	0x58024800
 8002c6c:	fffffc0c 	.word	0xfffffc0c
 8002c70:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c74:	f7fe fb16 	bl	80012a4 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e08a      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c86:	4b47      	ldr	r3, [pc, #284]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0x77c>
 8002c92:	e082      	b.n	8002d9a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c94:	4b43      	ldr	r3, [pc, #268]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a42      	ldr	r2, [pc, #264]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002c9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fb00 	bl	80012a4 <HAL_GetTick>
 8002ca4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fe fafc 	bl	80012a4 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e070      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cba:	4b3a      	ldr	r3, [pc, #232]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x7b0>
 8002cc6:	e068      	b.n	8002d9a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002cc8:	4b36      	ldr	r3, [pc, #216]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ccc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002cce:	4b35      	ldr	r3, [pc, #212]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d031      	beq.n	8002d40 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f003 0203 	and.w	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d12a      	bne.n	8002d40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d122      	bne.n	8002d40 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d04:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d11a      	bne.n	8002d40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	0a5b      	lsrs	r3, r3, #9
 8002d0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d16:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d111      	bne.n	8002d40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	0c1b      	lsrs	r3, r3, #16
 8002d20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d28:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d108      	bne.n	8002d40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	0e1b      	lsrs	r3, r3, #24
 8002d32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e02b      	b.n	8002d9c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d44:	4b17      	ldr	r3, [pc, #92]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d48:	08db      	lsrs	r3, r3, #3
 8002d4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d4e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d01f      	beq.n	8002d9a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d5a:	4b12      	ldr	r3, [pc, #72]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5e:	4a11      	ldr	r2, [pc, #68]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d66:	f7fe fa9d 	bl	80012a4 <HAL_GetTick>
 8002d6a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d6c:	bf00      	nop
 8002d6e:	f7fe fa99 	bl	80012a4 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d0f9      	beq.n	8002d6e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002da8 <HAL_RCC_OscConfig+0x8b0>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d86:	00d2      	lsls	r2, r2, #3
 8002d88:	4906      	ldr	r1, [pc, #24]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d8e:	4b05      	ldr	r3, [pc, #20]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d92:	4a04      	ldr	r2, [pc, #16]	@ (8002da4 <HAL_RCC_OscConfig+0x8ac>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3730      	adds	r7, #48	@ 0x30
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	58024400 	.word	0x58024400
 8002da8:	ffff0007 	.word	0xffff0007

08002dac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e19c      	b.n	80030fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc0:	4b8a      	ldr	r3, [pc, #552]	@ (8002fec <HAL_RCC_ClockConfig+0x240>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d910      	bls.n	8002df0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dce:	4b87      	ldr	r3, [pc, #540]	@ (8002fec <HAL_RCC_ClockConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 020f 	bic.w	r2, r3, #15
 8002dd6:	4985      	ldr	r1, [pc, #532]	@ (8002fec <HAL_RCC_ClockConfig+0x240>)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dde:	4b83      	ldr	r3, [pc, #524]	@ (8002fec <HAL_RCC_ClockConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e184      	b.n	80030fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d010      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	4b7b      	ldr	r3, [pc, #492]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d908      	bls.n	8002e1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e0c:	4b78      	ldr	r3, [pc, #480]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	4975      	ldr	r1, [pc, #468]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d010      	beq.n	8002e4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	4b70      	ldr	r3, [pc, #448]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d908      	bls.n	8002e4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	496a      	ldr	r1, [pc, #424]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d010      	beq.n	8002e7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699a      	ldr	r2, [r3, #24]
 8002e5c:	4b64      	ldr	r3, [pc, #400]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d908      	bls.n	8002e7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e68:	4b61      	ldr	r3, [pc, #388]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	495e      	ldr	r1, [pc, #376]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d010      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69da      	ldr	r2, [r3, #28]
 8002e8a:	4b59      	ldr	r3, [pc, #356]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d908      	bls.n	8002ea8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e96:	4b56      	ldr	r3, [pc, #344]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	4953      	ldr	r1, [pc, #332]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d010      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	4b4d      	ldr	r3, [pc, #308]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d908      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec4:	4b4a      	ldr	r3, [pc, #296]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f023 020f 	bic.w	r2, r3, #15
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4947      	ldr	r1, [pc, #284]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d055      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ee2:	4b43      	ldr	r3, [pc, #268]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	4940      	ldr	r1, [pc, #256]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d107      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002efc:	4b3c      	ldr	r3, [pc, #240]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d121      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0f6      	b.n	80030fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d107      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f14:	4b36      	ldr	r3, [pc, #216]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d115      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0ea      	b.n	80030fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f2c:	4b30      	ldr	r3, [pc, #192]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0de      	b.n	80030fa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f3c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0d6      	b.n	80030fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f4c:	4b28      	ldr	r3, [pc, #160]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f023 0207 	bic.w	r2, r3, #7
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4925      	ldr	r1, [pc, #148]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f5e:	f7fe f9a1 	bl	80012a4 <HAL_GetTick>
 8002f62:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f64:	e00a      	b.n	8002f7c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f66:	f7fe f99d 	bl	80012a4 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e0be      	b.n	80030fa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d1eb      	bne.n	8002f66 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d010      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	4b14      	ldr	r3, [pc, #80]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d208      	bcs.n	8002fbc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002faa:	4b11      	ldr	r3, [pc, #68]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f023 020f 	bic.w	r2, r3, #15
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	490e      	ldr	r1, [pc, #56]	@ (8002ff0 <HAL_RCC_ClockConfig+0x244>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <HAL_RCC_ClockConfig+0x240>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d214      	bcs.n	8002ff4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fca:	4b08      	ldr	r3, [pc, #32]	@ (8002fec <HAL_RCC_ClockConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f023 020f 	bic.w	r2, r3, #15
 8002fd2:	4906      	ldr	r1, [pc, #24]	@ (8002fec <HAL_RCC_ClockConfig+0x240>)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fda:	4b04      	ldr	r3, [pc, #16]	@ (8002fec <HAL_RCC_ClockConfig+0x240>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e086      	b.n	80030fa <HAL_RCC_ClockConfig+0x34e>
 8002fec:	52002000 	.word	0x52002000
 8002ff0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d010      	beq.n	8003022 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	4b3f      	ldr	r3, [pc, #252]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800300c:	429a      	cmp	r2, r3
 800300e:	d208      	bcs.n	8003022 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003010:	4b3c      	ldr	r3, [pc, #240]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	4939      	ldr	r1, [pc, #228]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 800301e:	4313      	orrs	r3, r2
 8003020:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d010      	beq.n	8003050 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	4b34      	ldr	r3, [pc, #208]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800303a:	429a      	cmp	r2, r3
 800303c:	d208      	bcs.n	8003050 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800303e:	4b31      	ldr	r3, [pc, #196]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	492e      	ldr	r1, [pc, #184]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 800304c:	4313      	orrs	r3, r2
 800304e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b00      	cmp	r3, #0
 800305a:	d010      	beq.n	800307e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	4b28      	ldr	r3, [pc, #160]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003068:	429a      	cmp	r2, r3
 800306a:	d208      	bcs.n	800307e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800306c:	4b25      	ldr	r3, [pc, #148]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	4922      	ldr	r1, [pc, #136]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 800307a:	4313      	orrs	r3, r2
 800307c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0320 	and.w	r3, r3, #32
 8003086:	2b00      	cmp	r3, #0
 8003088:	d010      	beq.n	80030ac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69da      	ldr	r2, [r3, #28]
 800308e:	4b1d      	ldr	r3, [pc, #116]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003096:	429a      	cmp	r2, r3
 8003098:	d208      	bcs.n	80030ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800309a:	4b1a      	ldr	r3, [pc, #104]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	4917      	ldr	r1, [pc, #92]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030ac:	f000 f834 	bl	8003118 <HAL_RCC_GetSysClockFreq>
 80030b0:	4602      	mov	r2, r0
 80030b2:	4b14      	ldr	r3, [pc, #80]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	0a1b      	lsrs	r3, r3, #8
 80030b8:	f003 030f 	and.w	r3, r3, #15
 80030bc:	4912      	ldr	r1, [pc, #72]	@ (8003108 <HAL_RCC_ClockConfig+0x35c>)
 80030be:	5ccb      	ldrb	r3, [r1, r3]
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	fa22 f303 	lsr.w	r3, r2, r3
 80030c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003104 <HAL_RCC_ClockConfig+0x358>)
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003108 <HAL_RCC_ClockConfig+0x35c>)
 80030d4:	5cd3      	ldrb	r3, [r2, r3]
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
 80030e0:	4a0a      	ldr	r2, [pc, #40]	@ (800310c <HAL_RCC_ClockConfig+0x360>)
 80030e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003110 <HAL_RCC_ClockConfig+0x364>)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80030ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003114 <HAL_RCC_ClockConfig+0x368>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe f88e 	bl	8001210 <HAL_InitTick>
 80030f4:	4603      	mov	r3, r0
 80030f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	58024400 	.word	0x58024400
 8003108:	08008a64 	.word	0x08008a64
 800310c:	24000004 	.word	0x24000004
 8003110:	24000000 	.word	0x24000000
 8003114:	24000008 	.word	0x24000008

08003118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003118:	b480      	push	{r7}
 800311a:	b089      	sub	sp, #36	@ 0x24
 800311c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800311e:	4bb3      	ldr	r3, [pc, #716]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003126:	2b18      	cmp	r3, #24
 8003128:	f200 8155 	bhi.w	80033d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800312c:	a201      	add	r2, pc, #4	@ (adr r2, 8003134 <HAL_RCC_GetSysClockFreq+0x1c>)
 800312e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003132:	bf00      	nop
 8003134:	08003199 	.word	0x08003199
 8003138:	080033d7 	.word	0x080033d7
 800313c:	080033d7 	.word	0x080033d7
 8003140:	080033d7 	.word	0x080033d7
 8003144:	080033d7 	.word	0x080033d7
 8003148:	080033d7 	.word	0x080033d7
 800314c:	080033d7 	.word	0x080033d7
 8003150:	080033d7 	.word	0x080033d7
 8003154:	080031bf 	.word	0x080031bf
 8003158:	080033d7 	.word	0x080033d7
 800315c:	080033d7 	.word	0x080033d7
 8003160:	080033d7 	.word	0x080033d7
 8003164:	080033d7 	.word	0x080033d7
 8003168:	080033d7 	.word	0x080033d7
 800316c:	080033d7 	.word	0x080033d7
 8003170:	080033d7 	.word	0x080033d7
 8003174:	080031c5 	.word	0x080031c5
 8003178:	080033d7 	.word	0x080033d7
 800317c:	080033d7 	.word	0x080033d7
 8003180:	080033d7 	.word	0x080033d7
 8003184:	080033d7 	.word	0x080033d7
 8003188:	080033d7 	.word	0x080033d7
 800318c:	080033d7 	.word	0x080033d7
 8003190:	080033d7 	.word	0x080033d7
 8003194:	080031cb 	.word	0x080031cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003198:	4b94      	ldr	r3, [pc, #592]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0320 	and.w	r3, r3, #32
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d009      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031a4:	4b91      	ldr	r3, [pc, #580]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	08db      	lsrs	r3, r3, #3
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	4a90      	ldr	r2, [pc, #576]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
 80031b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80031b6:	e111      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031b8:	4b8d      	ldr	r3, [pc, #564]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031ba:	61bb      	str	r3, [r7, #24]
      break;
 80031bc:	e10e      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80031be:	4b8d      	ldr	r3, [pc, #564]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031c0:	61bb      	str	r3, [r7, #24]
      break;
 80031c2:	e10b      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80031c4:	4b8c      	ldr	r3, [pc, #560]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031c6:	61bb      	str	r3, [r7, #24]
      break;
 80031c8:	e108      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031ca:	4b88      	ldr	r3, [pc, #544]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80031d4:	4b85      	ldr	r3, [pc, #532]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031e0:	4b82      	ldr	r3, [pc, #520]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80031ea:	4b80      	ldr	r3, [pc, #512]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ee:	08db      	lsrs	r3, r3, #3
 80031f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003202:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80e1 	beq.w	80033d0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2b02      	cmp	r3, #2
 8003212:	f000 8083 	beq.w	800331c <HAL_RCC_GetSysClockFreq+0x204>
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b02      	cmp	r3, #2
 800321a:	f200 80a1 	bhi.w	8003360 <HAL_RCC_GetSysClockFreq+0x248>
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x114>
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d056      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800322a:	e099      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800322c:	4b6f      	ldr	r3, [pc, #444]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0320 	and.w	r3, r3, #32
 8003234:	2b00      	cmp	r3, #0
 8003236:	d02d      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003238:	4b6c      	ldr	r3, [pc, #432]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	08db      	lsrs	r3, r3, #3
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	4a6b      	ldr	r2, [pc, #428]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
 8003248:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	ee07 3a90 	vmov	s15, r3
 8003250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003262:	4b62      	ldr	r3, [pc, #392]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800326a:	ee07 3a90 	vmov	s15, r3
 800326e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003272:	ed97 6a02 	vldr	s12, [r7, #8]
 8003276:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80033fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800327a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800327e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800328a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003292:	e087      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	ee07 3a90 	vmov	s15, r3
 800329a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003400 <HAL_RCC_GetSysClockFreq+0x2e8>
 80032a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032a6:	4b51      	ldr	r3, [pc, #324]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ae:	ee07 3a90 	vmov	s15, r3
 80032b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80033fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80032be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032d6:	e065      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003404 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ea:	4b40      	ldr	r3, [pc, #256]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80032fe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80033fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800330a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800330e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003316:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800331a:	e043      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	ee07 3a90 	vmov	s15, r3
 8003322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003326:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003408 <HAL_RCC_GetSysClockFreq+0x2f0>
 800332a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332e:	4b2f      	ldr	r3, [pc, #188]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800333e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003342:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80033fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800334a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800334e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800335e:	e021      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	ee07 3a90 	vmov	s15, r3
 8003366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800336a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003404 <HAL_RCC_GetSysClockFreq+0x2ec>
 800336e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003372:	4b1e      	ldr	r3, [pc, #120]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800337a:	ee07 3a90 	vmov	s15, r3
 800337e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003382:	ed97 6a02 	vldr	s12, [r7, #8]
 8003386:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80033fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800338a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800338e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800339a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80033a4:	4b11      	ldr	r3, [pc, #68]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a8:	0a5b      	lsrs	r3, r3, #9
 80033aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033ae:	3301      	adds	r3, #1
 80033b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	ee07 3a90 	vmov	s15, r3
 80033b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80033c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033c8:	ee17 3a90 	vmov	r3, s15
 80033cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80033ce:	e005      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61bb      	str	r3, [r7, #24]
      break;
 80033d4:	e002      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80033d6:	4b07      	ldr	r3, [pc, #28]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033d8:	61bb      	str	r3, [r7, #24]
      break;
 80033da:	bf00      	nop
  }

  return sysclockfreq;
 80033dc:	69bb      	ldr	r3, [r7, #24]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3724      	adds	r7, #36	@ 0x24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	58024400 	.word	0x58024400
 80033f0:	03d09000 	.word	0x03d09000
 80033f4:	003d0900 	.word	0x003d0900
 80033f8:	017d7840 	.word	0x017d7840
 80033fc:	46000000 	.word	0x46000000
 8003400:	4c742400 	.word	0x4c742400
 8003404:	4a742400 	.word	0x4a742400
 8003408:	4bbebc20 	.word	0x4bbebc20

0800340c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003412:	f7ff fe81 	bl	8003118 <HAL_RCC_GetSysClockFreq>
 8003416:	4602      	mov	r2, r0
 8003418:	4b10      	ldr	r3, [pc, #64]	@ (800345c <HAL_RCC_GetHCLKFreq+0x50>)
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	0a1b      	lsrs	r3, r3, #8
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	490f      	ldr	r1, [pc, #60]	@ (8003460 <HAL_RCC_GetHCLKFreq+0x54>)
 8003424:	5ccb      	ldrb	r3, [r1, r3]
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	fa22 f303 	lsr.w	r3, r2, r3
 800342e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003430:	4b0a      	ldr	r3, [pc, #40]	@ (800345c <HAL_RCC_GetHCLKFreq+0x50>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	4a09      	ldr	r2, [pc, #36]	@ (8003460 <HAL_RCC_GetHCLKFreq+0x54>)
 800343a:	5cd3      	ldrb	r3, [r2, r3]
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	fa22 f303 	lsr.w	r3, r2, r3
 8003446:	4a07      	ldr	r2, [pc, #28]	@ (8003464 <HAL_RCC_GetHCLKFreq+0x58>)
 8003448:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800344a:	4a07      	ldr	r2, [pc, #28]	@ (8003468 <HAL_RCC_GetHCLKFreq+0x5c>)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003450:	4b04      	ldr	r3, [pc, #16]	@ (8003464 <HAL_RCC_GetHCLKFreq+0x58>)
 8003452:	681b      	ldr	r3, [r3, #0]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	58024400 	.word	0x58024400
 8003460:	08008a64 	.word	0x08008a64
 8003464:	24000004 	.word	0x24000004
 8003468:	24000000 	.word	0x24000000

0800346c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003470:	f7ff ffcc 	bl	800340c <HAL_RCC_GetHCLKFreq>
 8003474:	4602      	mov	r2, r0
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	091b      	lsrs	r3, r3, #4
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	4904      	ldr	r1, [pc, #16]	@ (8003494 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003482:	5ccb      	ldrb	r3, [r1, r3]
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800348c:	4618      	mov	r0, r3
 800348e:	bd80      	pop	{r7, pc}
 8003490:	58024400 	.word	0x58024400
 8003494:	08008a64 	.word	0x08008a64

08003498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800349c:	f7ff ffb6 	bl	800340c <HAL_RCC_GetHCLKFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	4b06      	ldr	r3, [pc, #24]	@ (80034bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	0a1b      	lsrs	r3, r3, #8
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	4904      	ldr	r1, [pc, #16]	@ (80034c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034ae:	5ccb      	ldrb	r3, [r1, r3]
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	58024400 	.word	0x58024400
 80034c0:	08008a64 	.word	0x08008a64

080034c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c8:	b0ca      	sub	sp, #296	@ 0x128
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034d0:	2300      	movs	r3, #0
 80034d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034d6:	2300      	movs	r3, #0
 80034d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80034e8:	2500      	movs	r5, #0
 80034ea:	ea54 0305 	orrs.w	r3, r4, r5
 80034ee:	d049      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80034f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034fa:	d02f      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80034fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003500:	d828      	bhi.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003502:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003506:	d01a      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003508:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800350c:	d822      	bhi.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003512:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003516:	d007      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003518:	e01c      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800351a:	4bb8      	ldr	r3, [pc, #736]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800351c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351e:	4ab7      	ldr	r2, [pc, #732]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003524:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003526:	e01a      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352c:	3308      	adds	r3, #8
 800352e:	2102      	movs	r1, #2
 8003530:	4618      	mov	r0, r3
 8003532:	f001 fc8f 	bl	8004e54 <RCCEx_PLL2_Config>
 8003536:	4603      	mov	r3, r0
 8003538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800353c:	e00f      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800353e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003542:	3328      	adds	r3, #40	@ 0x28
 8003544:	2102      	movs	r1, #2
 8003546:	4618      	mov	r0, r3
 8003548:	f001 fd36 	bl	8004fb8 <RCCEx_PLL3_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003552:	e004      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800355a:	e000      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800355c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800355e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10a      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003566:	4ba5      	ldr	r3, [pc, #660]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800356a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800356e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003572:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003574:	4aa1      	ldr	r2, [pc, #644]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003576:	430b      	orrs	r3, r1
 8003578:	6513      	str	r3, [r2, #80]	@ 0x50
 800357a:	e003      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800357c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003580:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003590:	f04f 0900 	mov.w	r9, #0
 8003594:	ea58 0309 	orrs.w	r3, r8, r9
 8003598:	d047      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800359a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d82a      	bhi.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80035a4:	a201      	add	r2, pc, #4	@ (adr r2, 80035ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80035a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035aa:	bf00      	nop
 80035ac:	080035c1 	.word	0x080035c1
 80035b0:	080035cf 	.word	0x080035cf
 80035b4:	080035e5 	.word	0x080035e5
 80035b8:	08003603 	.word	0x08003603
 80035bc:	08003603 	.word	0x08003603
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035c0:	4b8e      	ldr	r3, [pc, #568]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c4:	4a8d      	ldr	r2, [pc, #564]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035cc:	e01a      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d2:	3308      	adds	r3, #8
 80035d4:	2100      	movs	r1, #0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f001 fc3c 	bl	8004e54 <RCCEx_PLL2_Config>
 80035dc:	4603      	mov	r3, r0
 80035de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035e2:	e00f      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e8:	3328      	adds	r3, #40	@ 0x28
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 fce3 	bl	8004fb8 <RCCEx_PLL3_Config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035f8:	e004      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003600:	e000      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003604:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10a      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800360c:	4b7b      	ldr	r3, [pc, #492]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800360e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003610:	f023 0107 	bic.w	r1, r3, #7
 8003614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	4a78      	ldr	r2, [pc, #480]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800361c:	430b      	orrs	r3, r1
 800361e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003620:	e003      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003626:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800362a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003632:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003636:	f04f 0b00 	mov.w	fp, #0
 800363a:	ea5a 030b 	orrs.w	r3, sl, fp
 800363e:	d04c      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800364a:	d030      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800364c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003650:	d829      	bhi.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003652:	2bc0      	cmp	r3, #192	@ 0xc0
 8003654:	d02d      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003656:	2bc0      	cmp	r3, #192	@ 0xc0
 8003658:	d825      	bhi.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800365a:	2b80      	cmp	r3, #128	@ 0x80
 800365c:	d018      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800365e:	2b80      	cmp	r3, #128	@ 0x80
 8003660:	d821      	bhi.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003666:	2b40      	cmp	r3, #64	@ 0x40
 8003668:	d007      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800366a:	e01c      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800366c:	4b63      	ldr	r3, [pc, #396]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800366e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003670:	4a62      	ldr	r2, [pc, #392]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003672:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003676:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003678:	e01c      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800367a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367e:	3308      	adds	r3, #8
 8003680:	2100      	movs	r1, #0
 8003682:	4618      	mov	r0, r3
 8003684:	f001 fbe6 	bl	8004e54 <RCCEx_PLL2_Config>
 8003688:	4603      	mov	r3, r0
 800368a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800368e:	e011      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003694:	3328      	adds	r3, #40	@ 0x28
 8003696:	2100      	movs	r1, #0
 8003698:	4618      	mov	r0, r3
 800369a:	f001 fc8d 	bl	8004fb8 <RCCEx_PLL3_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036a4:	e006      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036ac:	e002      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036ae:	bf00      	nop
 80036b0:	e000      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80036bc:	4b4f      	ldr	r3, [pc, #316]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80036c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ca:	4a4c      	ldr	r2, [pc, #304]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036cc:	430b      	orrs	r3, r1
 80036ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80036d0:	e003      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80036e6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80036ea:	2300      	movs	r3, #0
 80036ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80036f0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80036f4:	460b      	mov	r3, r1
 80036f6:	4313      	orrs	r3, r2
 80036f8:	d053      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80036fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003702:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003706:	d035      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003708:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800370c:	d82e      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800370e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003712:	d031      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003714:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003718:	d828      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800371a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800371e:	d01a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003720:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003724:	d822      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800372a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800372e:	d007      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003730:	e01c      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003732:	4b32      	ldr	r3, [pc, #200]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003736:	4a31      	ldr	r2, [pc, #196]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800373c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800373e:	e01c      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003744:	3308      	adds	r3, #8
 8003746:	2100      	movs	r1, #0
 8003748:	4618      	mov	r0, r3
 800374a:	f001 fb83 	bl	8004e54 <RCCEx_PLL2_Config>
 800374e:	4603      	mov	r3, r0
 8003750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003754:	e011      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375a:	3328      	adds	r3, #40	@ 0x28
 800375c:	2100      	movs	r1, #0
 800375e:	4618      	mov	r0, r3
 8003760:	f001 fc2a 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800376a:	e006      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003772:	e002      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003774:	bf00      	nop
 8003776:	e000      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800377a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10b      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003782:	4b1e      	ldr	r3, [pc, #120]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003786:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800378a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003792:	4a1a      	ldr	r2, [pc, #104]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003794:	430b      	orrs	r3, r1
 8003796:	6593      	str	r3, [r2, #88]	@ 0x58
 8003798:	e003      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800379e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037aa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80037ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80037b2:	2300      	movs	r3, #0
 80037b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80037b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80037bc:	460b      	mov	r3, r1
 80037be:	4313      	orrs	r3, r2
 80037c0:	d056      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80037c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037ce:	d038      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80037d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037d4:	d831      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037da:	d034      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80037dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037e0:	d82b      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037e6:	d01d      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80037e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037ec:	d825      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d006      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80037f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037f6:	d00a      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80037f8:	e01f      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037fa:	bf00      	nop
 80037fc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003800:	4ba2      	ldr	r3, [pc, #648]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003804:	4aa1      	ldr	r2, [pc, #644]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800380a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800380c:	e01c      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800380e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003812:	3308      	adds	r3, #8
 8003814:	2100      	movs	r1, #0
 8003816:	4618      	mov	r0, r3
 8003818:	f001 fb1c 	bl	8004e54 <RCCEx_PLL2_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003822:	e011      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003828:	3328      	adds	r3, #40	@ 0x28
 800382a:	2100      	movs	r1, #0
 800382c:	4618      	mov	r0, r3
 800382e:	f001 fbc3 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003838:	e006      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003840:	e002      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003842:	bf00      	nop
 8003844:	e000      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003846:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10b      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003850:	4b8e      	ldr	r3, [pc, #568]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003854:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003860:	4a8a      	ldr	r2, [pc, #552]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003862:	430b      	orrs	r3, r1
 8003864:	6593      	str	r3, [r2, #88]	@ 0x58
 8003866:	e003      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800386c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800387c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003880:	2300      	movs	r3, #0
 8003882:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003886:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800388a:	460b      	mov	r3, r1
 800388c:	4313      	orrs	r3, r2
 800388e:	d03a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003896:	2b30      	cmp	r3, #48	@ 0x30
 8003898:	d01f      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x416>
 800389a:	2b30      	cmp	r3, #48	@ 0x30
 800389c:	d819      	bhi.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d00c      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	d815      	bhi.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d019      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80038aa:	2b10      	cmp	r3, #16
 80038ac:	d111      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ae:	4b77      	ldr	r3, [pc, #476]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b2:	4a76      	ldr	r2, [pc, #472]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038ba:	e011      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c0:	3308      	adds	r3, #8
 80038c2:	2102      	movs	r1, #2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f001 fac5 	bl	8004e54 <RCCEx_PLL2_Config>
 80038ca:	4603      	mov	r3, r0
 80038cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038d0:	e006      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038d8:	e002      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038da:	bf00      	nop
 80038dc:	e000      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80038e8:	4b68      	ldr	r3, [pc, #416]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f6:	4a65      	ldr	r2, [pc, #404]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038f8:	430b      	orrs	r3, r1
 80038fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038fc:	e003      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003902:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003912:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003916:	2300      	movs	r3, #0
 8003918:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800391c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003920:	460b      	mov	r3, r1
 8003922:	4313      	orrs	r3, r2
 8003924:	d051      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003930:	d035      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003932:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003936:	d82e      	bhi.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003938:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800393c:	d031      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800393e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003942:	d828      	bhi.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003944:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003948:	d01a      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800394a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800394e:	d822      	bhi.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003958:	d007      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800395a:	e01c      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800395c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800395e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003960:	4a4a      	ldr	r2, [pc, #296]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003962:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003966:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003968:	e01c      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800396a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396e:	3308      	adds	r3, #8
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f001 fa6e 	bl	8004e54 <RCCEx_PLL2_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800397e:	e011      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003984:	3328      	adds	r3, #40	@ 0x28
 8003986:	2100      	movs	r1, #0
 8003988:	4618      	mov	r0, r3
 800398a:	f001 fb15 	bl	8004fb8 <RCCEx_PLL3_Config>
 800398e:	4603      	mov	r3, r0
 8003990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003994:	e006      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800399c:	e002      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800399e:	bf00      	nop
 80039a0:	e000      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039ac:	4b37      	ldr	r3, [pc, #220]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ba:	4a34      	ldr	r2, [pc, #208]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039bc:	430b      	orrs	r3, r1
 80039be:	6513      	str	r3, [r2, #80]	@ 0x50
 80039c0:	e003      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80039d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039da:	2300      	movs	r3, #0
 80039dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80039e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80039e4:	460b      	mov	r3, r1
 80039e6:	4313      	orrs	r3, r2
 80039e8:	d056      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80039ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039f4:	d033      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80039f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039fa:	d82c      	bhi.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a00:	d02f      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003a02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a06:	d826      	bhi.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a0c:	d02b      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003a0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a12:	d820      	bhi.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a18:	d012      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003a1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a1e:	d81a      	bhi.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d022      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a28:	d115      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2e:	3308      	adds	r3, #8
 8003a30:	2101      	movs	r1, #1
 8003a32:	4618      	mov	r0, r3
 8003a34:	f001 fa0e 	bl	8004e54 <RCCEx_PLL2_Config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a3e:	e015      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a44:	3328      	adds	r3, #40	@ 0x28
 8003a46:	2101      	movs	r1, #1
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f001 fab5 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a54:	e00a      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a5c:	e006      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a5e:	bf00      	nop
 8003a60:	e004      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a62:	bf00      	nop
 8003a64:	e002      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a66:	bf00      	nop
 8003a68:	e000      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10d      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a74:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a78:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a82:	4a02      	ldr	r2, [pc, #8]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a88:	e006      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a8a:	bf00      	nop
 8003a8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003aae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	d055      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003abc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ac4:	d033      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aca:	d82c      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad0:	d02f      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad6:	d826      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ad8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003adc:	d02b      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003ade:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ae2:	d820      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ae4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ae8:	d012      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003aea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aee:	d81a      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d022      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003af4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003af8:	d115      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afe:	3308      	adds	r3, #8
 8003b00:	2101      	movs	r1, #1
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 f9a6 	bl	8004e54 <RCCEx_PLL2_Config>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b0e:	e015      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b14:	3328      	adds	r3, #40	@ 0x28
 8003b16:	2101      	movs	r1, #1
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f001 fa4d 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b24:	e00a      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b2c:	e006      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b2e:	bf00      	nop
 8003b30:	e004      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b32:	bf00      	nop
 8003b34:	e002      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b36:	bf00      	nop
 8003b38:	e000      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10b      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b44:	4ba3      	ldr	r3, [pc, #652]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b48:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b54:	4a9f      	ldr	r2, [pc, #636]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b56:	430b      	orrs	r3, r1
 8003b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b5a:	e003      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003b70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b74:	2300      	movs	r3, #0
 8003b76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003b7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4313      	orrs	r3, r2
 8003b82:	d037      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b8e:	d00e      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003b90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b94:	d816      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d018      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003b9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b9e:	d111      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba0:	4b8c      	ldr	r3, [pc, #560]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba4:	4a8b      	ldr	r2, [pc, #556]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003baa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bac:	e00f      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f001 f94c 	bl	8004e54 <RCCEx_PLL2_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bc2:	e004      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bca:	e000      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10a      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bd6:	4b7f      	ldr	r3, [pc, #508]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bda:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be4:	4a7b      	ldr	r2, [pc, #492]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be6:	430b      	orrs	r3, r1
 8003be8:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bea:	e003      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003c00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c04:	2300      	movs	r3, #0
 8003c06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c0a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4313      	orrs	r3, r2
 8003c12:	d039      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d81c      	bhi.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c24 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003c61 	.word	0x08003c61
 8003c28:	08003c35 	.word	0x08003c35
 8003c2c:	08003c43 	.word	0x08003c43
 8003c30:	08003c61 	.word	0x08003c61
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c34:	4b67      	ldr	r3, [pc, #412]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c38:	4a66      	ldr	r2, [pc, #408]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c40:	e00f      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c46:	3308      	adds	r3, #8
 8003c48:	2102      	movs	r1, #2
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f001 f902 	bl	8004e54 <RCCEx_PLL2_Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c56:	e004      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c5e:	e000      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10a      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c6a:	4b5a      	ldr	r3, [pc, #360]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6e:	f023 0103 	bic.w	r1, r3, #3
 8003c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c78:	4a56      	ldr	r2, [pc, #344]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c7a:	430b      	orrs	r3, r1
 8003c7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c7e:	e003      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003c94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c9e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f000 809f 	beq.w	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003caa:	4b4b      	ldr	r3, [pc, #300]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a4a      	ldr	r2, [pc, #296]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cb6:	f7fd faf5 	bl	80012a4 <HAL_GetTick>
 8003cba:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cbe:	e00b      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc0:	f7fd faf0 	bl	80012a4 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b64      	cmp	r3, #100	@ 0x64
 8003cce:	d903      	bls.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cd6:	e005      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cd8:	4b3f      	ldr	r3, [pc, #252]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0ed      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d179      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003cec:	4b39      	ldr	r3, [pc, #228]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cf8:	4053      	eors	r3, r2
 8003cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d015      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d02:	4b34      	ldr	r3, [pc, #208]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d0a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d0e:	4b31      	ldr	r3, [pc, #196]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d12:	4a30      	ldr	r2, [pc, #192]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d18:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1e:	4a2d      	ldr	r2, [pc, #180]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d24:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d26:	4a2b      	ldr	r2, [pc, #172]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d2c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d3a:	d118      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fd fab2 	bl	80012a4 <HAL_GetTick>
 8003d40:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d44:	e00d      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d46:	f7fd faad 	bl	80012a4 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d50:	1ad2      	subs	r2, r2, r3
 8003d52:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d903      	bls.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003d60:	e005      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d62:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0eb      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d129      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d86:	d10e      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003d88:	4b12      	ldr	r3, [pc, #72]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d98:	091a      	lsrs	r2, r3, #4
 8003d9a:	4b10      	ldr	r3, [pc, #64]	@ (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	4a0d      	ldr	r2, [pc, #52]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da0:	430b      	orrs	r3, r1
 8003da2:	6113      	str	r3, [r2, #16]
 8003da4:	e005      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003da6:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003db0:	6113      	str	r3, [r2, #16]
 8003db2:	4b08      	ldr	r3, [pc, #32]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003db4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc2:	4a04      	ldr	r2, [pc, #16]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc8:	e00e      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003dd2:	e009      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003dd4:	58024400 	.word	0x58024400
 8003dd8:	58024800 	.word	0x58024800
 8003ddc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003de4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	f002 0301 	and.w	r3, r2, #1
 8003df4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003dfe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f000 8089 	beq.w	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e10:	2b28      	cmp	r3, #40	@ 0x28
 8003e12:	d86b      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003e14:	a201      	add	r2, pc, #4	@ (adr r2, 8003e1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003ef5 	.word	0x08003ef5
 8003e20:	08003eed 	.word	0x08003eed
 8003e24:	08003eed 	.word	0x08003eed
 8003e28:	08003eed 	.word	0x08003eed
 8003e2c:	08003eed 	.word	0x08003eed
 8003e30:	08003eed 	.word	0x08003eed
 8003e34:	08003eed 	.word	0x08003eed
 8003e38:	08003eed 	.word	0x08003eed
 8003e3c:	08003ec1 	.word	0x08003ec1
 8003e40:	08003eed 	.word	0x08003eed
 8003e44:	08003eed 	.word	0x08003eed
 8003e48:	08003eed 	.word	0x08003eed
 8003e4c:	08003eed 	.word	0x08003eed
 8003e50:	08003eed 	.word	0x08003eed
 8003e54:	08003eed 	.word	0x08003eed
 8003e58:	08003eed 	.word	0x08003eed
 8003e5c:	08003ed7 	.word	0x08003ed7
 8003e60:	08003eed 	.word	0x08003eed
 8003e64:	08003eed 	.word	0x08003eed
 8003e68:	08003eed 	.word	0x08003eed
 8003e6c:	08003eed 	.word	0x08003eed
 8003e70:	08003eed 	.word	0x08003eed
 8003e74:	08003eed 	.word	0x08003eed
 8003e78:	08003eed 	.word	0x08003eed
 8003e7c:	08003ef5 	.word	0x08003ef5
 8003e80:	08003eed 	.word	0x08003eed
 8003e84:	08003eed 	.word	0x08003eed
 8003e88:	08003eed 	.word	0x08003eed
 8003e8c:	08003eed 	.word	0x08003eed
 8003e90:	08003eed 	.word	0x08003eed
 8003e94:	08003eed 	.word	0x08003eed
 8003e98:	08003eed 	.word	0x08003eed
 8003e9c:	08003ef5 	.word	0x08003ef5
 8003ea0:	08003eed 	.word	0x08003eed
 8003ea4:	08003eed 	.word	0x08003eed
 8003ea8:	08003eed 	.word	0x08003eed
 8003eac:	08003eed 	.word	0x08003eed
 8003eb0:	08003eed 	.word	0x08003eed
 8003eb4:	08003eed 	.word	0x08003eed
 8003eb8:	08003eed 	.word	0x08003eed
 8003ebc:	08003ef5 	.word	0x08003ef5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 ffc3 	bl	8004e54 <RCCEx_PLL2_Config>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ed4:	e00f      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eda:	3328      	adds	r3, #40	@ 0x28
 8003edc:	2101      	movs	r1, #1
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 f86a 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003eea:	e004      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ef2:	e000      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10a      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003efe:	4bbf      	ldr	r3, [pc, #764]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f02:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f0c:	4abb      	ldr	r2, [pc, #748]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f12:	e003      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f002 0302 	and.w	r3, r2, #2
 8003f28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003f36:	460b      	mov	r3, r1
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	d041      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f42:	2b05      	cmp	r3, #5
 8003f44:	d824      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003f46:	a201      	add	r2, pc, #4	@ (adr r2, 8003f4c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4c:	08003f99 	.word	0x08003f99
 8003f50:	08003f65 	.word	0x08003f65
 8003f54:	08003f7b 	.word	0x08003f7b
 8003f58:	08003f99 	.word	0x08003f99
 8003f5c:	08003f99 	.word	0x08003f99
 8003f60:	08003f99 	.word	0x08003f99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f68:	3308      	adds	r3, #8
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 ff71 	bl	8004e54 <RCCEx_PLL2_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f78:	e00f      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7e:	3328      	adds	r3, #40	@ 0x28
 8003f80:	2101      	movs	r1, #1
 8003f82:	4618      	mov	r0, r3
 8003f84:	f001 f818 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f8e:	e004      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f96:	e000      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fa2:	4b96      	ldr	r3, [pc, #600]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa6:	f023 0107 	bic.w	r1, r3, #7
 8003faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fb0:	4a92      	ldr	r2, [pc, #584]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fb2:	430b      	orrs	r3, r1
 8003fb4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fb6:	e003      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc8:	f002 0304 	and.w	r3, r2, #4
 8003fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fd6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	d044      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fe8:	2b05      	cmp	r3, #5
 8003fea:	d825      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003fec:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff2:	bf00      	nop
 8003ff4:	08004041 	.word	0x08004041
 8003ff8:	0800400d 	.word	0x0800400d
 8003ffc:	08004023 	.word	0x08004023
 8004000:	08004041 	.word	0x08004041
 8004004:	08004041 	.word	0x08004041
 8004008:	08004041 	.word	0x08004041
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800400c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004010:	3308      	adds	r3, #8
 8004012:	2101      	movs	r1, #1
 8004014:	4618      	mov	r0, r3
 8004016:	f000 ff1d 	bl	8004e54 <RCCEx_PLL2_Config>
 800401a:	4603      	mov	r3, r0
 800401c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004020:	e00f      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004026:	3328      	adds	r3, #40	@ 0x28
 8004028:	2101      	movs	r1, #1
 800402a:	4618      	mov	r0, r3
 800402c:	f000 ffc4 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004036:	e004      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800403e:	e000      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10b      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800404a:	4b6c      	ldr	r3, [pc, #432]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800404c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404e:	f023 0107 	bic.w	r1, r3, #7
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800405a:	4a68      	ldr	r2, [pc, #416]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800405c:	430b      	orrs	r3, r1
 800405e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004060:	e003      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004066:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	f002 0320 	and.w	r3, r2, #32
 8004076:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800407a:	2300      	movs	r3, #0
 800407c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004080:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004084:	460b      	mov	r3, r1
 8004086:	4313      	orrs	r3, r2
 8004088:	d055      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800408a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004092:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004096:	d033      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004098:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800409c:	d82c      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800409e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a2:	d02f      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80040a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a8:	d826      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040ae:	d02b      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80040b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040b4:	d820      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040ba:	d012      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80040bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040c0:	d81a      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d022      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80040c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040ca:	d115      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d0:	3308      	adds	r3, #8
 80040d2:	2100      	movs	r1, #0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 febd 	bl	8004e54 <RCCEx_PLL2_Config>
 80040da:	4603      	mov	r3, r0
 80040dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040e0:	e015      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e6:	3328      	adds	r3, #40	@ 0x28
 80040e8:	2102      	movs	r1, #2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 ff64 	bl	8004fb8 <RCCEx_PLL3_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040f6:	e00a      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040fe:	e006      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004100:	bf00      	nop
 8004102:	e004      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004104:	bf00      	nop
 8004106:	e002      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004108:	bf00      	nop
 800410a:	e000      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800410c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800410e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10b      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004116:	4b39      	ldr	r3, [pc, #228]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800411a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800411e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004126:	4a35      	ldr	r2, [pc, #212]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004128:	430b      	orrs	r3, r1
 800412a:	6553      	str	r3, [r2, #84]	@ 0x54
 800412c:	e003      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004132:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004142:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004146:	2300      	movs	r3, #0
 8004148:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800414c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004150:	460b      	mov	r3, r1
 8004152:	4313      	orrs	r3, r2
 8004154:	d058      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800415e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004162:	d033      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004164:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004168:	d82c      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800416a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800416e:	d02f      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004174:	d826      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004176:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800417a:	d02b      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800417c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004180:	d820      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004182:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004186:	d012      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800418c:	d81a      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800418e:	2b00      	cmp	r3, #0
 8004190:	d022      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004196:	d115      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419c:	3308      	adds	r3, #8
 800419e:	2100      	movs	r1, #0
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fe57 	bl	8004e54 <RCCEx_PLL2_Config>
 80041a6:	4603      	mov	r3, r0
 80041a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041ac:	e015      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b2:	3328      	adds	r3, #40	@ 0x28
 80041b4:	2102      	movs	r1, #2
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fefe 	bl	8004fb8 <RCCEx_PLL3_Config>
 80041bc:	4603      	mov	r3, r0
 80041be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041c2:	e00a      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041ca:	e006      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041cc:	bf00      	nop
 80041ce:	e004      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041d0:	bf00      	nop
 80041d2:	e002      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041d4:	bf00      	nop
 80041d6:	e000      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10e      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041e2:	4b06      	ldr	r3, [pc, #24]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041f2:	4a02      	ldr	r2, [pc, #8]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041f4:	430b      	orrs	r3, r1
 80041f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80041f8:	e006      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80041fa:	bf00      	nop
 80041fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004200:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004204:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004210:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004214:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004218:	2300      	movs	r3, #0
 800421a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800421e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004222:	460b      	mov	r3, r1
 8004224:	4313      	orrs	r3, r2
 8004226:	d055      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004230:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004234:	d033      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004236:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800423a:	d82c      	bhi.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800423c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004240:	d02f      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004242:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004246:	d826      	bhi.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004248:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800424c:	d02b      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800424e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004252:	d820      	bhi.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004254:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004258:	d012      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800425a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800425e:	d81a      	bhi.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004260:	2b00      	cmp	r3, #0
 8004262:	d022      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004264:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004268:	d115      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800426a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426e:	3308      	adds	r3, #8
 8004270:	2100      	movs	r1, #0
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fdee 	bl	8004e54 <RCCEx_PLL2_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800427e:	e015      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004284:	3328      	adds	r3, #40	@ 0x28
 8004286:	2102      	movs	r1, #2
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fe95 	bl	8004fb8 <RCCEx_PLL3_Config>
 800428e:	4603      	mov	r3, r0
 8004290:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004294:	e00a      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800429c:	e006      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800429e:	bf00      	nop
 80042a0:	e004      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042a2:	bf00      	nop
 80042a4:	e002      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042a6:	bf00      	nop
 80042a8:	e000      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10b      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042b4:	4ba1      	ldr	r3, [pc, #644]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80042bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042c4:	4a9d      	ldr	r2, [pc, #628]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042c6:	430b      	orrs	r3, r1
 80042c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80042ca:	e003      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80042d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042dc:	f002 0308 	and.w	r3, r2, #8
 80042e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042e4:	2300      	movs	r3, #0
 80042e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80042ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80042ee:	460b      	mov	r3, r1
 80042f0:	4313      	orrs	r3, r2
 80042f2:	d01e      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80042f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004300:	d10c      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004306:	3328      	adds	r3, #40	@ 0x28
 8004308:	2102      	movs	r1, #2
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fe54 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800431c:	4b87      	ldr	r3, [pc, #540]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800431e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004320:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004328:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800432c:	4a83      	ldr	r2, [pc, #524]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800432e:	430b      	orrs	r3, r1
 8004330:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	f002 0310 	and.w	r3, r2, #16
 800433e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004342:	2300      	movs	r3, #0
 8004344:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004348:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800434c:	460b      	mov	r3, r1
 800434e:	4313      	orrs	r3, r2
 8004350:	d01e      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004356:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800435a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800435e:	d10c      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004364:	3328      	adds	r3, #40	@ 0x28
 8004366:	2102      	movs	r1, #2
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fe25 	bl	8004fb8 <RCCEx_PLL3_Config>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800437a:	4b70      	ldr	r3, [pc, #448]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800437c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004386:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800438a:	4a6c      	ldr	r2, [pc, #432]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800438c:	430b      	orrs	r3, r1
 800438e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800439c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043a0:	2300      	movs	r3, #0
 80043a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80043aa:	460b      	mov	r3, r1
 80043ac:	4313      	orrs	r3, r2
 80043ae:	d03e      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043bc:	d022      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80043be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043c2:	d81b      	bhi.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80043c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043cc:	d00b      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80043ce:	e015      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d4:	3308      	adds	r3, #8
 80043d6:	2100      	movs	r1, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fd3b 	bl	8004e54 <RCCEx_PLL2_Config>
 80043de:	4603      	mov	r3, r0
 80043e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043e4:	e00f      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ea:	3328      	adds	r3, #40	@ 0x28
 80043ec:	2102      	movs	r1, #2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fde2 	bl	8004fb8 <RCCEx_PLL3_Config>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043fa:	e004      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004402:	e000      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10b      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800440e:	4b4b      	ldr	r3, [pc, #300]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004412:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800441e:	4a47      	ldr	r2, [pc, #284]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004420:	430b      	orrs	r3, r1
 8004422:	6593      	str	r3, [r2, #88]	@ 0x58
 8004424:	e003      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800442a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800442e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004436:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800443a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800443c:	2300      	movs	r3, #0
 800443e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004440:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004444:	460b      	mov	r3, r1
 8004446:	4313      	orrs	r3, r2
 8004448:	d03b      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800444a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004452:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004456:	d01f      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004458:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800445c:	d818      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800445e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004462:	d003      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004464:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004468:	d007      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800446a:	e011      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446c:	4b33      	ldr	r3, [pc, #204]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800446e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004470:	4a32      	ldr	r2, [pc, #200]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004476:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004478:	e00f      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800447a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447e:	3328      	adds	r3, #40	@ 0x28
 8004480:	2101      	movs	r1, #1
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fd98 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800448e:	e004      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004496:	e000      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800449a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10b      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044a2:	4b26      	ldr	r3, [pc, #152]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b2:	4a22      	ldr	r2, [pc, #136]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044b4:	430b      	orrs	r3, r1
 80044b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80044b8:	e003      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80044ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80044d0:	2300      	movs	r3, #0
 80044d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80044d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80044d8:	460b      	mov	r3, r1
 80044da:	4313      	orrs	r3, r2
 80044dc:	d034      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80044e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ec:	d007      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80044ee:	e011      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f0:	4b12      	ldr	r3, [pc, #72]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f4:	4a11      	ldr	r2, [pc, #68]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044fc:	e00e      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004502:	3308      	adds	r3, #8
 8004504:	2102      	movs	r1, #2
 8004506:	4618      	mov	r0, r3
 8004508:	f000 fca4 	bl	8004e54 <RCCEx_PLL2_Config>
 800450c:	4603      	mov	r3, r0
 800450e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004512:	e003      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800451a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800451c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10d      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004524:	4b05      	ldr	r3, [pc, #20]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004528:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800452c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004532:	4a02      	ldr	r2, [pc, #8]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004534:	430b      	orrs	r3, r1
 8004536:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004538:	e006      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800453a:	bf00      	nop
 800453c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004540:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004544:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004550:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004554:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004556:	2300      	movs	r3, #0
 8004558:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800455a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800455e:	460b      	mov	r3, r1
 8004560:	4313      	orrs	r3, r2
 8004562:	d00c      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004568:	3328      	adds	r3, #40	@ 0x28
 800456a:	2102      	movs	r1, #2
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fd23 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800458a:	663b      	str	r3, [r7, #96]	@ 0x60
 800458c:	2300      	movs	r3, #0
 800458e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004590:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004594:	460b      	mov	r3, r1
 8004596:	4313      	orrs	r3, r2
 8004598:	d038      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045a6:	d018      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80045a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045ac:	d811      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045b2:	d014      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80045b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045b8:	d80b      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d011      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80045be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045c2:	d106      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c4:	4bc3      	ldr	r3, [pc, #780]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c8:	4ac2      	ldr	r2, [pc, #776]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80045d0:	e008      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045d8:	e004      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045da:	bf00      	nop
 80045dc:	e002      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045de:	bf00      	nop
 80045e0:	e000      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045ec:	4bb9      	ldr	r3, [pc, #740]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045fc:	4ab5      	ldr	r2, [pc, #724]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045fe:	430b      	orrs	r3, r1
 8004600:	6553      	str	r3, [r2, #84]	@ 0x54
 8004602:	e003      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004604:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004608:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800460c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004614:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004618:	65bb      	str	r3, [r7, #88]	@ 0x58
 800461a:	2300      	movs	r3, #0
 800461c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800461e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004622:	460b      	mov	r3, r1
 8004624:	4313      	orrs	r3, r2
 8004626:	d009      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004628:	4baa      	ldr	r3, [pc, #680]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800462a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800462c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004636:	4aa7      	ldr	r2, [pc, #668]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004638:	430b      	orrs	r3, r1
 800463a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800463c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004648:	653b      	str	r3, [r7, #80]	@ 0x50
 800464a:	2300      	movs	r3, #0
 800464c:	657b      	str	r3, [r7, #84]	@ 0x54
 800464e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004652:	460b      	mov	r3, r1
 8004654:	4313      	orrs	r3, r2
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004658:	4b9e      	ldr	r3, [pc, #632]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004664:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004668:	4a9a      	ldr	r2, [pc, #616]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800466a:	430b      	orrs	r3, r1
 800466c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800466e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004676:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800467a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800467c:	2300      	movs	r3, #0
 800467e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004680:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004684:	460b      	mov	r3, r1
 8004686:	4313      	orrs	r3, r2
 8004688:	d009      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800468a:	4b92      	ldr	r3, [pc, #584]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800468c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800468e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004698:	4a8e      	ldr	r2, [pc, #568]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800469a:	430b      	orrs	r3, r1
 800469c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800469e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80046aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80046ac:	2300      	movs	r3, #0
 80046ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80046b0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80046b4:	460b      	mov	r3, r1
 80046b6:	4313      	orrs	r3, r2
 80046b8:	d00e      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046ba:	4b86      	ldr	r3, [pc, #536]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	4a85      	ldr	r2, [pc, #532]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046c0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80046c4:	6113      	str	r3, [r2, #16]
 80046c6:	4b83      	ldr	r3, [pc, #524]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046c8:	6919      	ldr	r1, [r3, #16]
 80046ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80046d2:	4a80      	ldr	r2, [pc, #512]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046d4:	430b      	orrs	r3, r1
 80046d6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80046d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80046e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046e6:	2300      	movs	r3, #0
 80046e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046ea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80046ee:	460b      	mov	r3, r1
 80046f0:	4313      	orrs	r3, r2
 80046f2:	d009      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046f4:	4b77      	ldr	r3, [pc, #476]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046f8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80046fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004702:	4a74      	ldr	r2, [pc, #464]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004704:	430b      	orrs	r3, r1
 8004706:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004714:	633b      	str	r3, [r7, #48]	@ 0x30
 8004716:	2300      	movs	r3, #0
 8004718:	637b      	str	r3, [r7, #52]	@ 0x34
 800471a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800471e:	460b      	mov	r3, r1
 8004720:	4313      	orrs	r3, r2
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004724:	4b6b      	ldr	r3, [pc, #428]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004728:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800472c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004730:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004734:	4a67      	ldr	r2, [pc, #412]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004736:	430b      	orrs	r3, r1
 8004738:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800473a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004742:	2100      	movs	r1, #0
 8004744:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800474c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004750:	460b      	mov	r3, r1
 8004752:	4313      	orrs	r3, r2
 8004754:	d011      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475a:	3308      	adds	r3, #8
 800475c:	2100      	movs	r1, #0
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fb78 	bl	8004e54 <RCCEx_PLL2_Config>
 8004764:	4603      	mov	r3, r0
 8004766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800476a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004776:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800477a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004782:	2100      	movs	r1, #0
 8004784:	6239      	str	r1, [r7, #32]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	627b      	str	r3, [r7, #36]	@ 0x24
 800478c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004790:	460b      	mov	r3, r1
 8004792:	4313      	orrs	r3, r2
 8004794:	d011      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479a:	3308      	adds	r3, #8
 800479c:	2101      	movs	r1, #1
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fb58 	bl	8004e54 <RCCEx_PLL2_Config>
 80047a4:	4603      	mov	r3, r0
 80047a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80047ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c2:	2100      	movs	r1, #0
 80047c4:	61b9      	str	r1, [r7, #24]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	61fb      	str	r3, [r7, #28]
 80047cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80047d0:	460b      	mov	r3, r1
 80047d2:	4313      	orrs	r3, r2
 80047d4:	d011      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047da:	3308      	adds	r3, #8
 80047dc:	2102      	movs	r1, #2
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 fb38 	bl	8004e54 <RCCEx_PLL2_Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80047fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	2100      	movs	r1, #0
 8004804:	6139      	str	r1, [r7, #16]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004810:	460b      	mov	r3, r1
 8004812:	4313      	orrs	r3, r2
 8004814:	d011      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481a:	3328      	adds	r3, #40	@ 0x28
 800481c:	2100      	movs	r1, #0
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fbca 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800482a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800483a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	2100      	movs	r1, #0
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	f003 0310 	and.w	r3, r3, #16
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004850:	460b      	mov	r3, r1
 8004852:	4313      	orrs	r3, r2
 8004854:	d011      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485a:	3328      	adds	r3, #40	@ 0x28
 800485c:	2101      	movs	r1, #1
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fbaa 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800486a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004876:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800487a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	2100      	movs	r1, #0
 8004884:	6039      	str	r1, [r7, #0]
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	607b      	str	r3, [r7, #4]
 800488c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004890:	460b      	mov	r3, r1
 8004892:	4313      	orrs	r3, r2
 8004894:	d011      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489a:	3328      	adds	r3, #40	@ 0x28
 800489c:	2102      	movs	r1, #2
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fb8a 	bl	8004fb8 <RCCEx_PLL3_Config>
 80048a4:	4603      	mov	r3, r0
 80048a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80048ba:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e000      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80048ce:	46bd      	mov	sp, r7
 80048d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048d4:	58024400 	.word	0x58024400

080048d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80048dc:	f7fe fd96 	bl	800340c <HAL_RCC_GetHCLKFreq>
 80048e0:	4602      	mov	r2, r0
 80048e2:	4b06      	ldr	r3, [pc, #24]	@ (80048fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	4904      	ldr	r1, [pc, #16]	@ (8004900 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80048ee:	5ccb      	ldrb	r3, [r1, r3]
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	58024400 	.word	0x58024400
 8004900:	08008a64 	.word	0x08008a64

08004904 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004904:	b480      	push	{r7}
 8004906:	b089      	sub	sp, #36	@ 0x24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800490c:	4ba1      	ldr	r3, [pc, #644]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800490e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004916:	4b9f      	ldr	r3, [pc, #636]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491a:	0b1b      	lsrs	r3, r3, #12
 800491c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004920:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004922:	4b9c      	ldr	r3, [pc, #624]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004926:	091b      	lsrs	r3, r3, #4
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800492e:	4b99      	ldr	r3, [pc, #612]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004932:	08db      	lsrs	r3, r3, #3
 8004934:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	fb02 f303 	mul.w	r3, r2, r3
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004946:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 8111 	beq.w	8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	2b02      	cmp	r3, #2
 8004956:	f000 8083 	beq.w	8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b02      	cmp	r3, #2
 800495e:	f200 80a1 	bhi.w	8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d056      	beq.n	8004a1c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800496e:	e099      	b.n	8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004970:	4b88      	ldr	r3, [pc, #544]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b00      	cmp	r3, #0
 800497a:	d02d      	beq.n	80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800497c:	4b85      	ldr	r3, [pc, #532]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	08db      	lsrs	r3, r3, #3
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	4a84      	ldr	r2, [pc, #528]	@ (8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004988:	fa22 f303 	lsr.w	r3, r2, r3
 800498c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	ee07 3a90 	vmov	s15, r3
 8004994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049a6:	4b7b      	ldr	r3, [pc, #492]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ae:	ee07 3a90 	vmov	s15, r3
 80049b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049d6:	e087      	b.n	8004ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	ee07 3a90 	vmov	s15, r3
 80049de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80049e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ea:	4b6a      	ldr	r3, [pc, #424]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f2:	ee07 3a90 	vmov	s15, r3
 80049f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80049fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a1a:	e065      	b.n	8004ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a26:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a2e:	4b59      	ldr	r3, [pc, #356]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a42:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a5e:	e043      	b.n	8004ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a72:	4b48      	ldr	r3, [pc, #288]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a86:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aa2:	e021      	b.n	8004ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab6:	4b37      	ldr	r3, [pc, #220]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ae6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aec:	0a5b      	lsrs	r3, r3, #9
 8004aee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004afe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b02:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b0e:	ee17 2a90 	vmov	r2, s15
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b16:	4b1f      	ldr	r3, [pc, #124]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1a:	0c1b      	lsrs	r3, r3, #16
 8004b1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b20:	ee07 3a90 	vmov	s15, r3
 8004b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b30:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b3c:	ee17 2a90 	vmov	r2, s15
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b44:	4b13      	ldr	r3, [pc, #76]	@ (8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b48:	0e1b      	lsrs	r3, r3, #24
 8004b4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b6a:	ee17 2a90 	vmov	r2, s15
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b72:	e008      	b.n	8004b86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	609a      	str	r2, [r3, #8]
}
 8004b86:	bf00      	nop
 8004b88:	3724      	adds	r7, #36	@ 0x24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	58024400 	.word	0x58024400
 8004b98:	03d09000 	.word	0x03d09000
 8004b9c:	46000000 	.word	0x46000000
 8004ba0:	4c742400 	.word	0x4c742400
 8004ba4:	4a742400 	.word	0x4a742400
 8004ba8:	4bbebc20 	.word	0x4bbebc20

08004bac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b089      	sub	sp, #36	@ 0x24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bb4:	4ba1      	ldr	r3, [pc, #644]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb8:	f003 0303 	and.w	r3, r3, #3
 8004bbc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004bbe:	4b9f      	ldr	r3, [pc, #636]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc2:	0d1b      	lsrs	r3, r3, #20
 8004bc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bc8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004bca:	4b9c      	ldr	r3, [pc, #624]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bce:	0a1b      	lsrs	r3, r3, #8
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004bd6:	4b99      	ldr	r3, [pc, #612]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bda:	08db      	lsrs	r3, r3, #3
 8004bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	fb02 f303 	mul.w	r3, r2, r3
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 8111 	beq.w	8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	f000 8083 	beq.w	8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	f200 80a1 	bhi.w	8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d056      	beq.n	8004cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c16:	e099      	b.n	8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c18:	4b88      	ldr	r3, [pc, #544]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0320 	and.w	r3, r3, #32
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d02d      	beq.n	8004c80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c24:	4b85      	ldr	r3, [pc, #532]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	08db      	lsrs	r3, r3, #3
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	4a84      	ldr	r2, [pc, #528]	@ (8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
 8004c34:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	ee07 3a90 	vmov	s15, r3
 8004c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c4e:	4b7b      	ldr	r3, [pc, #492]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c56:	ee07 3a90 	vmov	s15, r3
 8004c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c7e:	e087      	b.n	8004d90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	ee07 3a90 	vmov	s15, r3
 8004c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c92:	4b6a      	ldr	r3, [pc, #424]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ca6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cc2:	e065      	b.n	8004d90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	ee07 3a90 	vmov	s15, r3
 8004cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd6:	4b59      	ldr	r3, [pc, #356]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cde:	ee07 3a90 	vmov	s15, r3
 8004ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d06:	e043      	b.n	8004d90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	ee07 3a90 	vmov	s15, r3
 8004d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d1a:	4b48      	ldr	r3, [pc, #288]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d22:	ee07 3a90 	vmov	s15, r3
 8004d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d4a:	e021      	b.n	8004d90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d5e:	4b37      	ldr	r3, [pc, #220]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004d90:	4b2a      	ldr	r3, [pc, #168]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d94:	0a5b      	lsrs	r3, r3, #9
 8004d96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004da6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004daa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004db6:	ee17 2a90 	vmov	r2, s15
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	0c1b      	lsrs	r3, r3, #16
 8004dc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dc8:	ee07 3a90 	vmov	s15, r3
 8004dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004de4:	ee17 2a90 	vmov	r2, s15
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004dec:	4b13      	ldr	r3, [pc, #76]	@ (8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df0:	0e1b      	lsrs	r3, r3, #24
 8004df2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e12:	ee17 2a90 	vmov	r2, s15
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e1a:	e008      	b.n	8004e2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	609a      	str	r2, [r3, #8]
}
 8004e2e:	bf00      	nop
 8004e30:	3724      	adds	r7, #36	@ 0x24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	58024400 	.word	0x58024400
 8004e40:	03d09000 	.word	0x03d09000
 8004e44:	46000000 	.word	0x46000000
 8004e48:	4c742400 	.word	0x4c742400
 8004e4c:	4a742400 	.word	0x4a742400
 8004e50:	4bbebc20 	.word	0x4bbebc20

08004e54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e62:	4b53      	ldr	r3, [pc, #332]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d101      	bne.n	8004e72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e099      	b.n	8004fa6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e72:	4b4f      	ldr	r3, [pc, #316]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a4e      	ldr	r2, [pc, #312]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004e78:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7e:	f7fc fa11 	bl	80012a4 <HAL_GetTick>
 8004e82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e84:	e008      	b.n	8004e98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e86:	f7fc fa0d 	bl	80012a4 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e086      	b.n	8004fa6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e98:	4b45      	ldr	r3, [pc, #276]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1f0      	bne.n	8004e86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ea4:	4b42      	ldr	r3, [pc, #264]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	031b      	lsls	r3, r3, #12
 8004eb2:	493f      	ldr	r1, [pc, #252]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	025b      	lsls	r3, r3, #9
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	041b      	lsls	r3, r3, #16
 8004ed6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	061b      	lsls	r3, r3, #24
 8004ee4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ee8:	4931      	ldr	r1, [pc, #196]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004eee:	4b30      	ldr	r3, [pc, #192]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	492d      	ldr	r1, [pc, #180]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f00:	4b2b      	ldr	r3, [pc, #172]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f04:	f023 0220 	bic.w	r2, r3, #32
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	4928      	ldr	r1, [pc, #160]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f12:	4b27      	ldr	r3, [pc, #156]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f16:	4a26      	ldr	r2, [pc, #152]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f18:	f023 0310 	bic.w	r3, r3, #16
 8004f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f1e:	4b24      	ldr	r3, [pc, #144]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f22:	4b24      	ldr	r3, [pc, #144]	@ (8004fb4 <RCCEx_PLL2_Config+0x160>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	69d2      	ldr	r2, [r2, #28]
 8004f2a:	00d2      	lsls	r2, r2, #3
 8004f2c:	4920      	ldr	r1, [pc, #128]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f32:	4b1f      	ldr	r3, [pc, #124]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f36:	4a1e      	ldr	r2, [pc, #120]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f38:	f043 0310 	orr.w	r3, r3, #16
 8004f3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d106      	bne.n	8004f52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f44:	4b1a      	ldr	r3, [pc, #104]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f48:	4a19      	ldr	r2, [pc, #100]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f50:	e00f      	b.n	8004f72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d106      	bne.n	8004f66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f58:	4b15      	ldr	r3, [pc, #84]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5c:	4a14      	ldr	r2, [pc, #80]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f64:	e005      	b.n	8004f72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f66:	4b12      	ldr	r3, [pc, #72]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6a:	4a11      	ldr	r2, [pc, #68]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f72:	4b0f      	ldr	r3, [pc, #60]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a0e      	ldr	r2, [pc, #56]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f7e:	f7fc f991 	bl	80012a4 <HAL_GetTick>
 8004f82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f84:	e008      	b.n	8004f98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f86:	f7fc f98d 	bl	80012a4 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e006      	b.n	8004fa6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f98:	4b05      	ldr	r3, [pc, #20]	@ (8004fb0 <RCCEx_PLL2_Config+0x15c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0f0      	beq.n	8004f86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	58024400 	.word	0x58024400
 8004fb4:	ffff0007 	.word	0xffff0007

08004fb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fc6:	4b53      	ldr	r3, [pc, #332]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d101      	bne.n	8004fd6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e099      	b.n	800510a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004fd6:	4b4f      	ldr	r3, [pc, #316]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a4e      	ldr	r2, [pc, #312]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8004fdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe2:	f7fc f95f 	bl	80012a4 <HAL_GetTick>
 8004fe6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fe8:	e008      	b.n	8004ffc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fea:	f7fc f95b 	bl	80012a4 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e086      	b.n	800510a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ffc:	4b45      	ldr	r3, [pc, #276]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1f0      	bne.n	8004fea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005008:	4b42      	ldr	r3, [pc, #264]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 800500a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	051b      	lsls	r3, r3, #20
 8005016:	493f      	ldr	r1, [pc, #252]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005018:	4313      	orrs	r3, r2
 800501a:	628b      	str	r3, [r1, #40]	@ 0x28
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	3b01      	subs	r3, #1
 8005022:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	3b01      	subs	r3, #1
 800502c:	025b      	lsls	r3, r3, #9
 800502e:	b29b      	uxth	r3, r3
 8005030:	431a      	orrs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	3b01      	subs	r3, #1
 8005038:	041b      	lsls	r3, r3, #16
 800503a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	3b01      	subs	r3, #1
 8005046:	061b      	lsls	r3, r3, #24
 8005048:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800504c:	4931      	ldr	r1, [pc, #196]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 800504e:	4313      	orrs	r3, r2
 8005050:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005052:	4b30      	ldr	r3, [pc, #192]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005056:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	492d      	ldr	r1, [pc, #180]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005060:	4313      	orrs	r3, r2
 8005062:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005064:	4b2b      	ldr	r3, [pc, #172]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005068:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	4928      	ldr	r1, [pc, #160]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005072:	4313      	orrs	r3, r2
 8005074:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005076:	4b27      	ldr	r3, [pc, #156]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507a:	4a26      	ldr	r2, [pc, #152]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 800507c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005080:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005082:	4b24      	ldr	r3, [pc, #144]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005084:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005086:	4b24      	ldr	r3, [pc, #144]	@ (8005118 <RCCEx_PLL3_Config+0x160>)
 8005088:	4013      	ands	r3, r2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	69d2      	ldr	r2, [r2, #28]
 800508e:	00d2      	lsls	r2, r2, #3
 8005090:	4920      	ldr	r1, [pc, #128]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005092:	4313      	orrs	r3, r2
 8005094:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005096:	4b1f      	ldr	r3, [pc, #124]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 8005098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509a:	4a1e      	ldr	r2, [pc, #120]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 800509c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d106      	bne.n	80050b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ac:	4a19      	ldr	r2, [pc, #100]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80050b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050b4:	e00f      	b.n	80050d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d106      	bne.n	80050ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80050bc:	4b15      	ldr	r3, [pc, #84]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c0:	4a14      	ldr	r2, [pc, #80]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80050c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050c8:	e005      	b.n	80050d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050ca:	4b12      	ldr	r3, [pc, #72]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ce:	4a11      	ldr	r2, [pc, #68]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80050d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a0e      	ldr	r2, [pc, #56]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e2:	f7fc f8df 	bl	80012a4 <HAL_GetTick>
 80050e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050e8:	e008      	b.n	80050fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050ea:	f7fc f8db 	bl	80012a4 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e006      	b.n	800510a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050fc:	4b05      	ldr	r3, [pc, #20]	@ (8005114 <RCCEx_PLL3_Config+0x15c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0f0      	beq.n	80050ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	58024400 	.word	0x58024400
 8005118:	ffff0007 	.word	0xffff0007

0800511c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e049      	b.n	80051c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fb fe04 	bl	8000d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3304      	adds	r3, #4
 8005158:	4619      	mov	r1, r3
 800515a:	4610      	mov	r0, r2
 800515c:	f000 fbb0 	bl	80058c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b082      	sub	sp, #8
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e049      	b.n	8005270 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d106      	bne.n	80051f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f841 	bl	8005278 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2202      	movs	r2, #2
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3304      	adds	r3, #4
 8005206:	4619      	mov	r1, r3
 8005208:	4610      	mov	r0, r2
 800520a:	f000 fb59 	bl	80058c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d109      	bne.n	80052b0 <HAL_TIM_PWM_Start+0x24>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	bf14      	ite	ne
 80052a8:	2301      	movne	r3, #1
 80052aa:	2300      	moveq	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	e03c      	b.n	800532a <HAL_TIM_PWM_Start+0x9e>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d109      	bne.n	80052ca <HAL_TIM_PWM_Start+0x3e>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b01      	cmp	r3, #1
 80052c0:	bf14      	ite	ne
 80052c2:	2301      	movne	r3, #1
 80052c4:	2300      	moveq	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	e02f      	b.n	800532a <HAL_TIM_PWM_Start+0x9e>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d109      	bne.n	80052e4 <HAL_TIM_PWM_Start+0x58>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b01      	cmp	r3, #1
 80052da:	bf14      	ite	ne
 80052dc:	2301      	movne	r3, #1
 80052de:	2300      	moveq	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	e022      	b.n	800532a <HAL_TIM_PWM_Start+0x9e>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b0c      	cmp	r3, #12
 80052e8:	d109      	bne.n	80052fe <HAL_TIM_PWM_Start+0x72>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	bf14      	ite	ne
 80052f6:	2301      	movne	r3, #1
 80052f8:	2300      	moveq	r3, #0
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	e015      	b.n	800532a <HAL_TIM_PWM_Start+0x9e>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b10      	cmp	r3, #16
 8005302:	d109      	bne.n	8005318 <HAL_TIM_PWM_Start+0x8c>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b01      	cmp	r3, #1
 800530e:	bf14      	ite	ne
 8005310:	2301      	movne	r3, #1
 8005312:	2300      	moveq	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	e008      	b.n	800532a <HAL_TIM_PWM_Start+0x9e>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b01      	cmp	r3, #1
 8005322:	bf14      	ite	ne
 8005324:	2301      	movne	r3, #1
 8005326:	2300      	moveq	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e0a1      	b.n	8005476 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d104      	bne.n	8005342 <HAL_TIM_PWM_Start+0xb6>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005340:	e023      	b.n	800538a <HAL_TIM_PWM_Start+0xfe>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b04      	cmp	r3, #4
 8005346:	d104      	bne.n	8005352 <HAL_TIM_PWM_Start+0xc6>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005350:	e01b      	b.n	800538a <HAL_TIM_PWM_Start+0xfe>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b08      	cmp	r3, #8
 8005356:	d104      	bne.n	8005362 <HAL_TIM_PWM_Start+0xd6>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005360:	e013      	b.n	800538a <HAL_TIM_PWM_Start+0xfe>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b0c      	cmp	r3, #12
 8005366:	d104      	bne.n	8005372 <HAL_TIM_PWM_Start+0xe6>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005370:	e00b      	b.n	800538a <HAL_TIM_PWM_Start+0xfe>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b10      	cmp	r3, #16
 8005376:	d104      	bne.n	8005382 <HAL_TIM_PWM_Start+0xf6>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005380:	e003      	b.n	800538a <HAL_TIM_PWM_Start+0xfe>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2202      	movs	r2, #2
 8005386:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2201      	movs	r2, #1
 8005390:	6839      	ldr	r1, [r7, #0]
 8005392:	4618      	mov	r0, r3
 8005394:	f000 fea8 	bl	80060e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a38      	ldr	r2, [pc, #224]	@ (8005480 <HAL_TIM_PWM_Start+0x1f4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d013      	beq.n	80053ca <HAL_TIM_PWM_Start+0x13e>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a37      	ldr	r2, [pc, #220]	@ (8005484 <HAL_TIM_PWM_Start+0x1f8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00e      	beq.n	80053ca <HAL_TIM_PWM_Start+0x13e>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a35      	ldr	r2, [pc, #212]	@ (8005488 <HAL_TIM_PWM_Start+0x1fc>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d009      	beq.n	80053ca <HAL_TIM_PWM_Start+0x13e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a34      	ldr	r2, [pc, #208]	@ (800548c <HAL_TIM_PWM_Start+0x200>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d004      	beq.n	80053ca <HAL_TIM_PWM_Start+0x13e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a32      	ldr	r2, [pc, #200]	@ (8005490 <HAL_TIM_PWM_Start+0x204>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d101      	bne.n	80053ce <HAL_TIM_PWM_Start+0x142>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e000      	b.n	80053d0 <HAL_TIM_PWM_Start+0x144>
 80053ce:	2300      	movs	r3, #0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d007      	beq.n	80053e4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a25      	ldr	r2, [pc, #148]	@ (8005480 <HAL_TIM_PWM_Start+0x1f4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d022      	beq.n	8005434 <HAL_TIM_PWM_Start+0x1a8>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053f6:	d01d      	beq.n	8005434 <HAL_TIM_PWM_Start+0x1a8>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a25      	ldr	r2, [pc, #148]	@ (8005494 <HAL_TIM_PWM_Start+0x208>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d018      	beq.n	8005434 <HAL_TIM_PWM_Start+0x1a8>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a24      	ldr	r2, [pc, #144]	@ (8005498 <HAL_TIM_PWM_Start+0x20c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d013      	beq.n	8005434 <HAL_TIM_PWM_Start+0x1a8>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a22      	ldr	r2, [pc, #136]	@ (800549c <HAL_TIM_PWM_Start+0x210>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00e      	beq.n	8005434 <HAL_TIM_PWM_Start+0x1a8>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1a      	ldr	r2, [pc, #104]	@ (8005484 <HAL_TIM_PWM_Start+0x1f8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d009      	beq.n	8005434 <HAL_TIM_PWM_Start+0x1a8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1e      	ldr	r2, [pc, #120]	@ (80054a0 <HAL_TIM_PWM_Start+0x214>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <HAL_TIM_PWM_Start+0x1a8>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a16      	ldr	r2, [pc, #88]	@ (8005488 <HAL_TIM_PWM_Start+0x1fc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d115      	bne.n	8005460 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	4b1a      	ldr	r3, [pc, #104]	@ (80054a4 <HAL_TIM_PWM_Start+0x218>)
 800543c:	4013      	ands	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b06      	cmp	r3, #6
 8005444:	d015      	beq.n	8005472 <HAL_TIM_PWM_Start+0x1e6>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800544c:	d011      	beq.n	8005472 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0201 	orr.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545e:	e008      	b.n	8005472 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	e000      	b.n	8005474 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005472:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40010000 	.word	0x40010000
 8005484:	40010400 	.word	0x40010400
 8005488:	40014000 	.word	0x40014000
 800548c:	40014400 	.word	0x40014400
 8005490:	40014800 	.word	0x40014800
 8005494:	40000400 	.word	0x40000400
 8005498:	40000800 	.word	0x40000800
 800549c:	40000c00 	.word	0x40000c00
 80054a0:	40001800 	.word	0x40001800
 80054a4:	00010007 	.word	0x00010007

080054a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e0ff      	b.n	80056c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b14      	cmp	r3, #20
 80054d2:	f200 80f0 	bhi.w	80056b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054d6:	a201      	add	r2, pc, #4	@ (adr r2, 80054dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054dc:	08005531 	.word	0x08005531
 80054e0:	080056b7 	.word	0x080056b7
 80054e4:	080056b7 	.word	0x080056b7
 80054e8:	080056b7 	.word	0x080056b7
 80054ec:	08005571 	.word	0x08005571
 80054f0:	080056b7 	.word	0x080056b7
 80054f4:	080056b7 	.word	0x080056b7
 80054f8:	080056b7 	.word	0x080056b7
 80054fc:	080055b3 	.word	0x080055b3
 8005500:	080056b7 	.word	0x080056b7
 8005504:	080056b7 	.word	0x080056b7
 8005508:	080056b7 	.word	0x080056b7
 800550c:	080055f3 	.word	0x080055f3
 8005510:	080056b7 	.word	0x080056b7
 8005514:	080056b7 	.word	0x080056b7
 8005518:	080056b7 	.word	0x080056b7
 800551c:	08005635 	.word	0x08005635
 8005520:	080056b7 	.word	0x080056b7
 8005524:	080056b7 	.word	0x080056b7
 8005528:	080056b7 	.word	0x080056b7
 800552c:	08005675 	.word	0x08005675
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68b9      	ldr	r1, [r7, #8]
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fa62 	bl	8005a00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699a      	ldr	r2, [r3, #24]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0208 	orr.w	r2, r2, #8
 800554a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0204 	bic.w	r2, r2, #4
 800555a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6999      	ldr	r1, [r3, #24]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	691a      	ldr	r2, [r3, #16]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	619a      	str	r2, [r3, #24]
      break;
 800556e:	e0a5      	b.n	80056bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68b9      	ldr	r1, [r7, #8]
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fad2 	bl	8005b20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699a      	ldr	r2, [r3, #24]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800558a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699a      	ldr	r2, [r3, #24]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800559a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6999      	ldr	r1, [r3, #24]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	021a      	lsls	r2, r3, #8
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	619a      	str	r2, [r3, #24]
      break;
 80055b0:	e084      	b.n	80056bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68b9      	ldr	r1, [r7, #8]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 fb3b 	bl	8005c34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69da      	ldr	r2, [r3, #28]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f042 0208 	orr.w	r2, r2, #8
 80055cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69da      	ldr	r2, [r3, #28]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0204 	bic.w	r2, r2, #4
 80055dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69d9      	ldr	r1, [r3, #28]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	61da      	str	r2, [r3, #28]
      break;
 80055f0:	e064      	b.n	80056bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 fba3 	bl	8005d44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69da      	ldr	r2, [r3, #28]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800560c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800561c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69d9      	ldr	r1, [r3, #28]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	021a      	lsls	r2, r3, #8
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	61da      	str	r2, [r3, #28]
      break;
 8005632:	e043      	b.n	80056bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fbec 	bl	8005e18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0208 	orr.w	r2, r2, #8
 800564e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0204 	bic.w	r2, r2, #4
 800565e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005672:	e023      	b.n	80056bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68b9      	ldr	r1, [r7, #8]
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fc30 	bl	8005ee0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800568e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800569e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	021a      	lsls	r2, r3, #8
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80056b4:	e002      	b.n	80056bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	75fb      	strb	r3, [r7, #23]
      break;
 80056ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop

080056d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d101      	bne.n	80056ec <HAL_TIM_ConfigClockSource+0x1c>
 80056e8:	2302      	movs	r3, #2
 80056ea:	e0dc      	b.n	80058a6 <HAL_TIM_ConfigClockSource+0x1d6>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	4b6a      	ldr	r3, [pc, #424]	@ (80058b0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005708:	4013      	ands	r3, r2
 800570a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a64      	ldr	r2, [pc, #400]	@ (80058b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005722:	4293      	cmp	r3, r2
 8005724:	f000 80a9 	beq.w	800587a <HAL_TIM_ConfigClockSource+0x1aa>
 8005728:	4a62      	ldr	r2, [pc, #392]	@ (80058b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	f200 80ae 	bhi.w	800588c <HAL_TIM_ConfigClockSource+0x1bc>
 8005730:	4a61      	ldr	r2, [pc, #388]	@ (80058b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	f000 80a1 	beq.w	800587a <HAL_TIM_ConfigClockSource+0x1aa>
 8005738:	4a5f      	ldr	r2, [pc, #380]	@ (80058b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	f200 80a6 	bhi.w	800588c <HAL_TIM_ConfigClockSource+0x1bc>
 8005740:	4a5e      	ldr	r2, [pc, #376]	@ (80058bc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005742:	4293      	cmp	r3, r2
 8005744:	f000 8099 	beq.w	800587a <HAL_TIM_ConfigClockSource+0x1aa>
 8005748:	4a5c      	ldr	r2, [pc, #368]	@ (80058bc <HAL_TIM_ConfigClockSource+0x1ec>)
 800574a:	4293      	cmp	r3, r2
 800574c:	f200 809e 	bhi.w	800588c <HAL_TIM_ConfigClockSource+0x1bc>
 8005750:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005754:	f000 8091 	beq.w	800587a <HAL_TIM_ConfigClockSource+0x1aa>
 8005758:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800575c:	f200 8096 	bhi.w	800588c <HAL_TIM_ConfigClockSource+0x1bc>
 8005760:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005764:	f000 8089 	beq.w	800587a <HAL_TIM_ConfigClockSource+0x1aa>
 8005768:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800576c:	f200 808e 	bhi.w	800588c <HAL_TIM_ConfigClockSource+0x1bc>
 8005770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005774:	d03e      	beq.n	80057f4 <HAL_TIM_ConfigClockSource+0x124>
 8005776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800577a:	f200 8087 	bhi.w	800588c <HAL_TIM_ConfigClockSource+0x1bc>
 800577e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005782:	f000 8086 	beq.w	8005892 <HAL_TIM_ConfigClockSource+0x1c2>
 8005786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800578a:	d87f      	bhi.n	800588c <HAL_TIM_ConfigClockSource+0x1bc>
 800578c:	2b70      	cmp	r3, #112	@ 0x70
 800578e:	d01a      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0xf6>
 8005790:	2b70      	cmp	r3, #112	@ 0x70
 8005792:	d87b      	bhi.n	800588c <HAL_TIM_ConfigClockSource+0x1bc>
 8005794:	2b60      	cmp	r3, #96	@ 0x60
 8005796:	d050      	beq.n	800583a <HAL_TIM_ConfigClockSource+0x16a>
 8005798:	2b60      	cmp	r3, #96	@ 0x60
 800579a:	d877      	bhi.n	800588c <HAL_TIM_ConfigClockSource+0x1bc>
 800579c:	2b50      	cmp	r3, #80	@ 0x50
 800579e:	d03c      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x14a>
 80057a0:	2b50      	cmp	r3, #80	@ 0x50
 80057a2:	d873      	bhi.n	800588c <HAL_TIM_ConfigClockSource+0x1bc>
 80057a4:	2b40      	cmp	r3, #64	@ 0x40
 80057a6:	d058      	beq.n	800585a <HAL_TIM_ConfigClockSource+0x18a>
 80057a8:	2b40      	cmp	r3, #64	@ 0x40
 80057aa:	d86f      	bhi.n	800588c <HAL_TIM_ConfigClockSource+0x1bc>
 80057ac:	2b30      	cmp	r3, #48	@ 0x30
 80057ae:	d064      	beq.n	800587a <HAL_TIM_ConfigClockSource+0x1aa>
 80057b0:	2b30      	cmp	r3, #48	@ 0x30
 80057b2:	d86b      	bhi.n	800588c <HAL_TIM_ConfigClockSource+0x1bc>
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d060      	beq.n	800587a <HAL_TIM_ConfigClockSource+0x1aa>
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d867      	bhi.n	800588c <HAL_TIM_ConfigClockSource+0x1bc>
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d05c      	beq.n	800587a <HAL_TIM_ConfigClockSource+0x1aa>
 80057c0:	2b10      	cmp	r3, #16
 80057c2:	d05a      	beq.n	800587a <HAL_TIM_ConfigClockSource+0x1aa>
 80057c4:	e062      	b.n	800588c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057d6:	f000 fc67 	bl	80060a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80057e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	609a      	str	r2, [r3, #8]
      break;
 80057f2:	e04f      	b.n	8005894 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005804:	f000 fc50 	bl	80060a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689a      	ldr	r2, [r3, #8]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005816:	609a      	str	r2, [r3, #8]
      break;
 8005818:	e03c      	b.n	8005894 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005826:	461a      	mov	r2, r3
 8005828:	f000 fbc0 	bl	8005fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2150      	movs	r1, #80	@ 0x50
 8005832:	4618      	mov	r0, r3
 8005834:	f000 fc1a 	bl	800606c <TIM_ITRx_SetConfig>
      break;
 8005838:	e02c      	b.n	8005894 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005846:	461a      	mov	r2, r3
 8005848:	f000 fbdf 	bl	800600a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2160      	movs	r1, #96	@ 0x60
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fc0a 	bl	800606c <TIM_ITRx_SetConfig>
      break;
 8005858:	e01c      	b.n	8005894 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005866:	461a      	mov	r2, r3
 8005868:	f000 fba0 	bl	8005fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2140      	movs	r1, #64	@ 0x40
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fbfa 	bl	800606c <TIM_ITRx_SetConfig>
      break;
 8005878:	e00c      	b.n	8005894 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4619      	mov	r1, r3
 8005884:	4610      	mov	r0, r2
 8005886:	f000 fbf1 	bl	800606c <TIM_ITRx_SetConfig>
      break;
 800588a:	e003      	b.n	8005894 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	73fb      	strb	r3, [r7, #15]
      break;
 8005890:	e000      	b.n	8005894 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005892:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	ffceff88 	.word	0xffceff88
 80058b4:	00100040 	.word	0x00100040
 80058b8:	00100030 	.word	0x00100030
 80058bc:	00100020 	.word	0x00100020

080058c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a43      	ldr	r2, [pc, #268]	@ (80059e0 <TIM_Base_SetConfig+0x120>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d013      	beq.n	8005900 <TIM_Base_SetConfig+0x40>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058de:	d00f      	beq.n	8005900 <TIM_Base_SetConfig+0x40>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a40      	ldr	r2, [pc, #256]	@ (80059e4 <TIM_Base_SetConfig+0x124>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00b      	beq.n	8005900 <TIM_Base_SetConfig+0x40>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a3f      	ldr	r2, [pc, #252]	@ (80059e8 <TIM_Base_SetConfig+0x128>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d007      	beq.n	8005900 <TIM_Base_SetConfig+0x40>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a3e      	ldr	r2, [pc, #248]	@ (80059ec <TIM_Base_SetConfig+0x12c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d003      	beq.n	8005900 <TIM_Base_SetConfig+0x40>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a3d      	ldr	r2, [pc, #244]	@ (80059f0 <TIM_Base_SetConfig+0x130>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d108      	bne.n	8005912 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a32      	ldr	r2, [pc, #200]	@ (80059e0 <TIM_Base_SetConfig+0x120>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d01f      	beq.n	800595a <TIM_Base_SetConfig+0x9a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005920:	d01b      	beq.n	800595a <TIM_Base_SetConfig+0x9a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a2f      	ldr	r2, [pc, #188]	@ (80059e4 <TIM_Base_SetConfig+0x124>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d017      	beq.n	800595a <TIM_Base_SetConfig+0x9a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a2e      	ldr	r2, [pc, #184]	@ (80059e8 <TIM_Base_SetConfig+0x128>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d013      	beq.n	800595a <TIM_Base_SetConfig+0x9a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a2d      	ldr	r2, [pc, #180]	@ (80059ec <TIM_Base_SetConfig+0x12c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00f      	beq.n	800595a <TIM_Base_SetConfig+0x9a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a2c      	ldr	r2, [pc, #176]	@ (80059f0 <TIM_Base_SetConfig+0x130>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00b      	beq.n	800595a <TIM_Base_SetConfig+0x9a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a2b      	ldr	r2, [pc, #172]	@ (80059f4 <TIM_Base_SetConfig+0x134>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d007      	beq.n	800595a <TIM_Base_SetConfig+0x9a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a2a      	ldr	r2, [pc, #168]	@ (80059f8 <TIM_Base_SetConfig+0x138>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d003      	beq.n	800595a <TIM_Base_SetConfig+0x9a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a29      	ldr	r2, [pc, #164]	@ (80059fc <TIM_Base_SetConfig+0x13c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d108      	bne.n	800596c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a14      	ldr	r2, [pc, #80]	@ (80059e0 <TIM_Base_SetConfig+0x120>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00f      	beq.n	80059b2 <TIM_Base_SetConfig+0xf2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a16      	ldr	r2, [pc, #88]	@ (80059f0 <TIM_Base_SetConfig+0x130>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00b      	beq.n	80059b2 <TIM_Base_SetConfig+0xf2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a15      	ldr	r2, [pc, #84]	@ (80059f4 <TIM_Base_SetConfig+0x134>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d007      	beq.n	80059b2 <TIM_Base_SetConfig+0xf2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a14      	ldr	r2, [pc, #80]	@ (80059f8 <TIM_Base_SetConfig+0x138>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d003      	beq.n	80059b2 <TIM_Base_SetConfig+0xf2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a13      	ldr	r2, [pc, #76]	@ (80059fc <TIM_Base_SetConfig+0x13c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d103      	bne.n	80059ba <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	691a      	ldr	r2, [r3, #16]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f043 0204 	orr.w	r2, r3, #4
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	601a      	str	r2, [r3, #0]
}
 80059d2:	bf00      	nop
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	40010000 	.word	0x40010000
 80059e4:	40000400 	.word	0x40000400
 80059e8:	40000800 	.word	0x40000800
 80059ec:	40000c00 	.word	0x40000c00
 80059f0:	40010400 	.word	0x40010400
 80059f4:	40014000 	.word	0x40014000
 80059f8:	40014400 	.word	0x40014400
 80059fc:	40014800 	.word	0x40014800

08005a00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	f023 0201 	bic.w	r2, r3, #1
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4b37      	ldr	r3, [pc, #220]	@ (8005b08 <TIM_OC1_SetConfig+0x108>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0303 	bic.w	r3, r3, #3
 8005a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f023 0302 	bic.w	r3, r3, #2
 8005a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a2d      	ldr	r2, [pc, #180]	@ (8005b0c <TIM_OC1_SetConfig+0x10c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00f      	beq.n	8005a7c <TIM_OC1_SetConfig+0x7c>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8005b10 <TIM_OC1_SetConfig+0x110>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00b      	beq.n	8005a7c <TIM_OC1_SetConfig+0x7c>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a2b      	ldr	r2, [pc, #172]	@ (8005b14 <TIM_OC1_SetConfig+0x114>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d007      	beq.n	8005a7c <TIM_OC1_SetConfig+0x7c>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8005b18 <TIM_OC1_SetConfig+0x118>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d003      	beq.n	8005a7c <TIM_OC1_SetConfig+0x7c>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a29      	ldr	r2, [pc, #164]	@ (8005b1c <TIM_OC1_SetConfig+0x11c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d10c      	bne.n	8005a96 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f023 0308 	bic.w	r3, r3, #8
 8005a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f023 0304 	bic.w	r3, r3, #4
 8005a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a1c      	ldr	r2, [pc, #112]	@ (8005b0c <TIM_OC1_SetConfig+0x10c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00f      	beq.n	8005abe <TIM_OC1_SetConfig+0xbe>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8005b10 <TIM_OC1_SetConfig+0x110>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00b      	beq.n	8005abe <TIM_OC1_SetConfig+0xbe>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8005b14 <TIM_OC1_SetConfig+0x114>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d007      	beq.n	8005abe <TIM_OC1_SetConfig+0xbe>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a19      	ldr	r2, [pc, #100]	@ (8005b18 <TIM_OC1_SetConfig+0x118>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d003      	beq.n	8005abe <TIM_OC1_SetConfig+0xbe>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a18      	ldr	r2, [pc, #96]	@ (8005b1c <TIM_OC1_SetConfig+0x11c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d111      	bne.n	8005ae2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	621a      	str	r2, [r3, #32]
}
 8005afc:	bf00      	nop
 8005afe:	371c      	adds	r7, #28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	fffeff8f 	.word	0xfffeff8f
 8005b0c:	40010000 	.word	0x40010000
 8005b10:	40010400 	.word	0x40010400
 8005b14:	40014000 	.word	0x40014000
 8005b18:	40014400 	.word	0x40014400
 8005b1c:	40014800 	.word	0x40014800

08005b20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	f023 0210 	bic.w	r2, r3, #16
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4b34      	ldr	r3, [pc, #208]	@ (8005c1c <TIM_OC2_SetConfig+0xfc>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f023 0320 	bic.w	r3, r3, #32
 8005b6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a29      	ldr	r2, [pc, #164]	@ (8005c20 <TIM_OC2_SetConfig+0x100>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <TIM_OC2_SetConfig+0x68>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a28      	ldr	r2, [pc, #160]	@ (8005c24 <TIM_OC2_SetConfig+0x104>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d10d      	bne.n	8005ba4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ba2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a1e      	ldr	r2, [pc, #120]	@ (8005c20 <TIM_OC2_SetConfig+0x100>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d00f      	beq.n	8005bcc <TIM_OC2_SetConfig+0xac>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a1d      	ldr	r2, [pc, #116]	@ (8005c24 <TIM_OC2_SetConfig+0x104>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00b      	beq.n	8005bcc <TIM_OC2_SetConfig+0xac>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8005c28 <TIM_OC2_SetConfig+0x108>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d007      	beq.n	8005bcc <TIM_OC2_SetConfig+0xac>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8005c2c <TIM_OC2_SetConfig+0x10c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d003      	beq.n	8005bcc <TIM_OC2_SetConfig+0xac>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8005c30 <TIM_OC2_SetConfig+0x110>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d113      	bne.n	8005bf4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	621a      	str	r2, [r3, #32]
}
 8005c0e:	bf00      	nop
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	feff8fff 	.word	0xfeff8fff
 8005c20:	40010000 	.word	0x40010000
 8005c24:	40010400 	.word	0x40010400
 8005c28:	40014000 	.word	0x40014000
 8005c2c:	40014400 	.word	0x40014400
 8005c30:	40014800 	.word	0x40014800

08005c34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4b33      	ldr	r3, [pc, #204]	@ (8005d2c <TIM_OC3_SetConfig+0xf8>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0303 	bic.w	r3, r3, #3
 8005c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	021b      	lsls	r3, r3, #8
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a28      	ldr	r2, [pc, #160]	@ (8005d30 <TIM_OC3_SetConfig+0xfc>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d003      	beq.n	8005c9a <TIM_OC3_SetConfig+0x66>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a27      	ldr	r2, [pc, #156]	@ (8005d34 <TIM_OC3_SetConfig+0x100>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d10d      	bne.n	8005cb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ca0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	021b      	lsls	r3, r3, #8
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d30 <TIM_OC3_SetConfig+0xfc>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00f      	beq.n	8005cde <TIM_OC3_SetConfig+0xaa>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8005d34 <TIM_OC3_SetConfig+0x100>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00b      	beq.n	8005cde <TIM_OC3_SetConfig+0xaa>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8005d38 <TIM_OC3_SetConfig+0x104>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d007      	beq.n	8005cde <TIM_OC3_SetConfig+0xaa>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8005d3c <TIM_OC3_SetConfig+0x108>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d003      	beq.n	8005cde <TIM_OC3_SetConfig+0xaa>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a19      	ldr	r2, [pc, #100]	@ (8005d40 <TIM_OC3_SetConfig+0x10c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d113      	bne.n	8005d06 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	621a      	str	r2, [r3, #32]
}
 8005d20:	bf00      	nop
 8005d22:	371c      	adds	r7, #28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	fffeff8f 	.word	0xfffeff8f
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40010400 	.word	0x40010400
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	40014400 	.word	0x40014400
 8005d40:	40014800 	.word	0x40014800

08005d44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4b24      	ldr	r3, [pc, #144]	@ (8005e00 <TIM_OC4_SetConfig+0xbc>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	031b      	lsls	r3, r3, #12
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a19      	ldr	r2, [pc, #100]	@ (8005e04 <TIM_OC4_SetConfig+0xc0>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d00f      	beq.n	8005dc4 <TIM_OC4_SetConfig+0x80>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a18      	ldr	r2, [pc, #96]	@ (8005e08 <TIM_OC4_SetConfig+0xc4>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00b      	beq.n	8005dc4 <TIM_OC4_SetConfig+0x80>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a17      	ldr	r2, [pc, #92]	@ (8005e0c <TIM_OC4_SetConfig+0xc8>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d007      	beq.n	8005dc4 <TIM_OC4_SetConfig+0x80>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a16      	ldr	r2, [pc, #88]	@ (8005e10 <TIM_OC4_SetConfig+0xcc>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_OC4_SetConfig+0x80>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a15      	ldr	r2, [pc, #84]	@ (8005e14 <TIM_OC4_SetConfig+0xd0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d109      	bne.n	8005dd8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	019b      	lsls	r3, r3, #6
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	feff8fff 	.word	0xfeff8fff
 8005e04:	40010000 	.word	0x40010000
 8005e08:	40010400 	.word	0x40010400
 8005e0c:	40014000 	.word	0x40014000
 8005e10:	40014400 	.word	0x40014400
 8005e14:	40014800 	.word	0x40014800

08005e18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4b21      	ldr	r3, [pc, #132]	@ (8005ec8 <TIM_OC5_SetConfig+0xb0>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005e58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	041b      	lsls	r3, r3, #16
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a18      	ldr	r2, [pc, #96]	@ (8005ecc <TIM_OC5_SetConfig+0xb4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00f      	beq.n	8005e8e <TIM_OC5_SetConfig+0x76>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a17      	ldr	r2, [pc, #92]	@ (8005ed0 <TIM_OC5_SetConfig+0xb8>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00b      	beq.n	8005e8e <TIM_OC5_SetConfig+0x76>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a16      	ldr	r2, [pc, #88]	@ (8005ed4 <TIM_OC5_SetConfig+0xbc>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d007      	beq.n	8005e8e <TIM_OC5_SetConfig+0x76>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a15      	ldr	r2, [pc, #84]	@ (8005ed8 <TIM_OC5_SetConfig+0xc0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d003      	beq.n	8005e8e <TIM_OC5_SetConfig+0x76>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a14      	ldr	r2, [pc, #80]	@ (8005edc <TIM_OC5_SetConfig+0xc4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d109      	bne.n	8005ea2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	021b      	lsls	r3, r3, #8
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	621a      	str	r2, [r3, #32]
}
 8005ebc:	bf00      	nop
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	fffeff8f 	.word	0xfffeff8f
 8005ecc:	40010000 	.word	0x40010000
 8005ed0:	40010400 	.word	0x40010400
 8005ed4:	40014000 	.word	0x40014000
 8005ed8:	40014400 	.word	0x40014400
 8005edc:	40014800 	.word	0x40014800

08005ee0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4b22      	ldr	r3, [pc, #136]	@ (8005f94 <TIM_OC6_SetConfig+0xb4>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	021b      	lsls	r3, r3, #8
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	051b      	lsls	r3, r3, #20
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a19      	ldr	r2, [pc, #100]	@ (8005f98 <TIM_OC6_SetConfig+0xb8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00f      	beq.n	8005f58 <TIM_OC6_SetConfig+0x78>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a18      	ldr	r2, [pc, #96]	@ (8005f9c <TIM_OC6_SetConfig+0xbc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00b      	beq.n	8005f58 <TIM_OC6_SetConfig+0x78>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a17      	ldr	r2, [pc, #92]	@ (8005fa0 <TIM_OC6_SetConfig+0xc0>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d007      	beq.n	8005f58 <TIM_OC6_SetConfig+0x78>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a16      	ldr	r2, [pc, #88]	@ (8005fa4 <TIM_OC6_SetConfig+0xc4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d003      	beq.n	8005f58 <TIM_OC6_SetConfig+0x78>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a15      	ldr	r2, [pc, #84]	@ (8005fa8 <TIM_OC6_SetConfig+0xc8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d109      	bne.n	8005f6c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	029b      	lsls	r3, r3, #10
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	621a      	str	r2, [r3, #32]
}
 8005f86:	bf00      	nop
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	feff8fff 	.word	0xfeff8fff
 8005f98:	40010000 	.word	0x40010000
 8005f9c:	40010400 	.word	0x40010400
 8005fa0:	40014000 	.word	0x40014000
 8005fa4:	40014400 	.word	0x40014400
 8005fa8:	40014800 	.word	0x40014800

08005fac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	f023 0201 	bic.w	r2, r3, #1
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f023 030a 	bic.w	r3, r3, #10
 8005fe8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	621a      	str	r2, [r3, #32]
}
 8005ffe:	bf00      	nop
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800600a:	b480      	push	{r7}
 800600c:	b087      	sub	sp, #28
 800600e:	af00      	add	r7, sp, #0
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	f023 0210 	bic.w	r2, r3, #16
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006034:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	031b      	lsls	r3, r3, #12
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	4313      	orrs	r3, r2
 800603e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006046:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	4313      	orrs	r3, r2
 8006050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	621a      	str	r2, [r3, #32]
}
 800605e:	bf00      	nop
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
	...

0800606c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	4b09      	ldr	r3, [pc, #36]	@ (80060a4 <TIM_ITRx_SetConfig+0x38>)
 8006080:	4013      	ands	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4313      	orrs	r3, r2
 800608a:	f043 0307 	orr.w	r3, r3, #7
 800608e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	609a      	str	r2, [r3, #8]
}
 8006096:	bf00      	nop
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	ffcfff8f 	.word	0xffcfff8f

080060a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	021a      	lsls	r2, r3, #8
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	431a      	orrs	r2, r3
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	609a      	str	r2, [r3, #8]
}
 80060dc:	bf00      	nop
 80060de:	371c      	adds	r7, #28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f003 031f 	and.w	r3, r3, #31
 80060fa:	2201      	movs	r2, #1
 80060fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006100:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a1a      	ldr	r2, [r3, #32]
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	43db      	mvns	r3, r3
 800610a:	401a      	ands	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a1a      	ldr	r2, [r3, #32]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f003 031f 	and.w	r3, r3, #31
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	fa01 f303 	lsl.w	r3, r1, r3
 8006120:	431a      	orrs	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	621a      	str	r2, [r3, #32]
}
 8006126:	bf00      	nop
 8006128:	371c      	adds	r7, #28
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
	...

08006134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006144:	2b01      	cmp	r3, #1
 8006146:	d101      	bne.n	800614c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006148:	2302      	movs	r3, #2
 800614a:	e06d      	b.n	8006228 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a30      	ldr	r2, [pc, #192]	@ (8006234 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d004      	beq.n	8006180 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a2f      	ldr	r2, [pc, #188]	@ (8006238 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d108      	bne.n	8006192 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006186:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006198:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a20      	ldr	r2, [pc, #128]	@ (8006234 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d022      	beq.n	80061fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061be:	d01d      	beq.n	80061fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a1d      	ldr	r2, [pc, #116]	@ (800623c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d018      	beq.n	80061fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006240 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d013      	beq.n	80061fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006244 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d00e      	beq.n	80061fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a15      	ldr	r2, [pc, #84]	@ (8006238 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d009      	beq.n	80061fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a16      	ldr	r2, [pc, #88]	@ (8006248 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d004      	beq.n	80061fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a15      	ldr	r2, [pc, #84]	@ (800624c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d10c      	bne.n	8006216 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006202:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	4313      	orrs	r3, r2
 800620c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3714      	adds	r7, #20
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr
 8006234:	40010000 	.word	0x40010000
 8006238:	40010400 	.word	0x40010400
 800623c:	40000400 	.word	0x40000400
 8006240:	40000800 	.word	0x40000800
 8006244:	40000c00 	.word	0x40000c00
 8006248:	40001800 	.word	0x40001800
 800624c:	40014000 	.word	0x40014000

08006250 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006268:	2302      	movs	r3, #2
 800626a:	e065      	b.n	8006338 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	4313      	orrs	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	041b      	lsls	r3, r3, #16
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a16      	ldr	r2, [pc, #88]	@ (8006344 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d004      	beq.n	80062fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a14      	ldr	r2, [pc, #80]	@ (8006348 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d115      	bne.n	8006326 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006304:	051b      	lsls	r3, r3, #20
 8006306:	4313      	orrs	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	40010000 	.word	0x40010000
 8006348:	40010400 	.word	0x40010400

0800634c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e042      	b.n	80063e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006364:	2b00      	cmp	r3, #0
 8006366:	d106      	bne.n	8006376 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7fa fd4b 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2224      	movs	r2, #36	@ 0x24
 800637a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0201 	bic.w	r2, r2, #1
 800638c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f001 fadc 	bl	8007954 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fd71 	bl	8006e84 <UART_SetConfig>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e01b      	b.n	80063e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f001 fb5b 	bl	8007a98 <UART_CheckIdleState>
 80063e2:	4603      	mov	r3, r0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08a      	sub	sp, #40	@ 0x28
 80063f0:	af02      	add	r7, sp, #8
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	603b      	str	r3, [r7, #0]
 80063f8:	4613      	mov	r3, r2
 80063fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006402:	2b20      	cmp	r3, #32
 8006404:	d17b      	bne.n	80064fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <HAL_UART_Transmit+0x26>
 800640c:	88fb      	ldrh	r3, [r7, #6]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e074      	b.n	8006500 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2221      	movs	r2, #33	@ 0x21
 8006422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006426:	f7fa ff3d 	bl	80012a4 <HAL_GetTick>
 800642a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	88fa      	ldrh	r2, [r7, #6]
 8006430:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	88fa      	ldrh	r2, [r7, #6]
 8006438:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006444:	d108      	bne.n	8006458 <HAL_UART_Transmit+0x6c>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d104      	bne.n	8006458 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800644e:	2300      	movs	r3, #0
 8006450:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	61bb      	str	r3, [r7, #24]
 8006456:	e003      	b.n	8006460 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800645c:	2300      	movs	r3, #0
 800645e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006460:	e030      	b.n	80064c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2200      	movs	r2, #0
 800646a:	2180      	movs	r1, #128	@ 0x80
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f001 fbbd 	bl	8007bec <UART_WaitOnFlagUntilTimeout>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d005      	beq.n	8006484 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e03d      	b.n	8006500 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10b      	bne.n	80064a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006498:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	3302      	adds	r3, #2
 800649e:	61bb      	str	r3, [r7, #24]
 80064a0:	e007      	b.n	80064b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	781a      	ldrb	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	3301      	adds	r3, #1
 80064b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b29a      	uxth	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1c8      	bne.n	8006462 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2200      	movs	r2, #0
 80064d8:	2140      	movs	r1, #64	@ 0x40
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f001 fb86 	bl	8007bec <UART_WaitOnFlagUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d005      	beq.n	80064f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e006      	b.n	8006500 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	e000      	b.n	8006500 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80064fe:	2302      	movs	r3, #2
  }
}
 8006500:	4618      	mov	r0, r3
 8006502:	3720      	adds	r7, #32
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08a      	sub	sp, #40	@ 0x28
 800650c:	af02      	add	r7, sp, #8
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	603b      	str	r3, [r7, #0]
 8006514:	4613      	mov	r3, r2
 8006516:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800651e:	2b20      	cmp	r3, #32
 8006520:	f040 80b5 	bne.w	800668e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <HAL_UART_Receive+0x28>
 800652a:	88fb      	ldrh	r3, [r7, #6]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e0ad      	b.n	8006690 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2222      	movs	r2, #34	@ 0x22
 8006540:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800654a:	f7fa feab 	bl	80012a4 <HAL_GetTick>
 800654e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	88fa      	ldrh	r2, [r7, #6]
 8006554:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	88fa      	ldrh	r2, [r7, #6]
 800655c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006568:	d10e      	bne.n	8006588 <HAL_UART_Receive+0x80>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d105      	bne.n	800657e <HAL_UART_Receive+0x76>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006578:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800657c:	e02d      	b.n	80065da <HAL_UART_Receive+0xd2>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	22ff      	movs	r2, #255	@ 0xff
 8006582:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006586:	e028      	b.n	80065da <HAL_UART_Receive+0xd2>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10d      	bne.n	80065ac <HAL_UART_Receive+0xa4>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d104      	bne.n	80065a2 <HAL_UART_Receive+0x9a>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	22ff      	movs	r2, #255	@ 0xff
 800659c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80065a0:	e01b      	b.n	80065da <HAL_UART_Receive+0xd2>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	227f      	movs	r2, #127	@ 0x7f
 80065a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80065aa:	e016      	b.n	80065da <HAL_UART_Receive+0xd2>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065b4:	d10d      	bne.n	80065d2 <HAL_UART_Receive+0xca>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d104      	bne.n	80065c8 <HAL_UART_Receive+0xc0>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	227f      	movs	r2, #127	@ 0x7f
 80065c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80065c6:	e008      	b.n	80065da <HAL_UART_Receive+0xd2>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	223f      	movs	r2, #63	@ 0x3f
 80065cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80065d0:	e003      	b.n	80065da <HAL_UART_Receive+0xd2>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80065e0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ea:	d108      	bne.n	80065fe <HAL_UART_Receive+0xf6>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d104      	bne.n	80065fe <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80065f4:	2300      	movs	r3, #0
 80065f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	61bb      	str	r3, [r7, #24]
 80065fc:	e003      	b.n	8006606 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006602:	2300      	movs	r3, #0
 8006604:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006606:	e036      	b.n	8006676 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	2200      	movs	r2, #0
 8006610:	2120      	movs	r1, #32
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f001 faea 	bl	8007bec <UART_WaitOnFlagUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d005      	beq.n	800662a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2220      	movs	r2, #32
 8006622:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e032      	b.n	8006690 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10c      	bne.n	800664a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006636:	b29a      	uxth	r2, r3
 8006638:	8a7b      	ldrh	r3, [r7, #18]
 800663a:	4013      	ands	r3, r2
 800663c:	b29a      	uxth	r2, r3
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	3302      	adds	r3, #2
 8006646:	61bb      	str	r3, [r7, #24]
 8006648:	e00c      	b.n	8006664 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006650:	b2da      	uxtb	r2, r3
 8006652:	8a7b      	ldrh	r3, [r7, #18]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	4013      	ands	r3, r2
 8006658:	b2da      	uxtb	r2, r3
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	3301      	adds	r3, #1
 8006662:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800666a:	b29b      	uxth	r3, r3
 800666c:	3b01      	subs	r3, #1
 800666e:	b29a      	uxth	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800667c:	b29b      	uxth	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1c2      	bne.n	8006608 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	e000      	b.n	8006690 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800668e:	2302      	movs	r3, #2
  }
}
 8006690:	4618      	mov	r0, r3
 8006692:	3720      	adds	r7, #32
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b0ba      	sub	sp, #232	@ 0xe8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80066c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80066c6:	4013      	ands	r3, r2
 80066c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80066cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d11b      	bne.n	800670c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066d8:	f003 0320 	and.w	r3, r3, #32
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d015      	beq.n	800670c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066e4:	f003 0320 	and.w	r3, r3, #32
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d105      	bne.n	80066f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d009      	beq.n	800670c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 8393 	beq.w	8006e28 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	4798      	blx	r3
      }
      return;
 800670a:	e38d      	b.n	8006e28 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800670c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 8123 	beq.w	800695c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006716:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800671a:	4b8d      	ldr	r3, [pc, #564]	@ (8006950 <HAL_UART_IRQHandler+0x2b8>)
 800671c:	4013      	ands	r3, r2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006722:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006726:	4b8b      	ldr	r3, [pc, #556]	@ (8006954 <HAL_UART_IRQHandler+0x2bc>)
 8006728:	4013      	ands	r3, r2
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 8116 	beq.w	800695c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d011      	beq.n	8006760 <HAL_UART_IRQHandler+0xc8>
 800673c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00b      	beq.n	8006760 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2201      	movs	r2, #1
 800674e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006756:	f043 0201 	orr.w	r2, r3, #1
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d011      	beq.n	8006790 <HAL_UART_IRQHandler+0xf8>
 800676c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00b      	beq.n	8006790 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2202      	movs	r2, #2
 800677e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006786:	f043 0204 	orr.w	r2, r3, #4
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	2b00      	cmp	r3, #0
 800679a:	d011      	beq.n	80067c0 <HAL_UART_IRQHandler+0x128>
 800679c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00b      	beq.n	80067c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2204      	movs	r2, #4
 80067ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b6:	f043 0202 	orr.w	r2, r3, #2
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067c4:	f003 0308 	and.w	r3, r3, #8
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d017      	beq.n	80067fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067d0:	f003 0320 	and.w	r3, r3, #32
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d105      	bne.n	80067e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80067d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80067dc:	4b5c      	ldr	r3, [pc, #368]	@ (8006950 <HAL_UART_IRQHandler+0x2b8>)
 80067de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00b      	beq.n	80067fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2208      	movs	r2, #8
 80067ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f2:	f043 0208 	orr.w	r2, r3, #8
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006800:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006804:	2b00      	cmp	r3, #0
 8006806:	d012      	beq.n	800682e <HAL_UART_IRQHandler+0x196>
 8006808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800680c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00c      	beq.n	800682e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800681c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006824:	f043 0220 	orr.w	r2, r3, #32
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 82f9 	beq.w	8006e2c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800683a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b00      	cmp	r3, #0
 8006844:	d013      	beq.n	800686e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800684a:	f003 0320 	and.w	r3, r3, #32
 800684e:	2b00      	cmp	r3, #0
 8006850:	d105      	bne.n	800685e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d007      	beq.n	800686e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006874:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006882:	2b40      	cmp	r3, #64	@ 0x40
 8006884:	d005      	beq.n	8006892 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800688a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800688e:	2b00      	cmp	r3, #0
 8006890:	d054      	beq.n	800693c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f001 fa18 	bl	8007cc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068a2:	2b40      	cmp	r3, #64	@ 0x40
 80068a4:	d146      	bne.n	8006934 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3308      	adds	r3, #8
 80068ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80068bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3308      	adds	r3, #8
 80068ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80068d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80068d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80068de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80068e2:	e841 2300 	strex	r3, r2, [r1]
 80068e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80068ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1d9      	bne.n	80068a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d017      	beq.n	800692c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006902:	4a15      	ldr	r2, [pc, #84]	@ (8006958 <HAL_UART_IRQHandler+0x2c0>)
 8006904:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800690c:	4618      	mov	r0, r3
 800690e:	f7fb f9ab 	bl	8001c68 <HAL_DMA_Abort_IT>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d019      	beq.n	800694c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800691e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006926:	4610      	mov	r0, r2
 8006928:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800692a:	e00f      	b.n	800694c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fa93 	bl	8006e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006932:	e00b      	b.n	800694c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fa8f 	bl	8006e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800693a:	e007      	b.n	800694c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fa8b 	bl	8006e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800694a:	e26f      	b.n	8006e2c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800694c:	bf00      	nop
    return;
 800694e:	e26d      	b.n	8006e2c <HAL_UART_IRQHandler+0x794>
 8006950:	10000001 	.word	0x10000001
 8006954:	04000120 	.word	0x04000120
 8006958:	08007d95 	.word	0x08007d95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006960:	2b01      	cmp	r3, #1
 8006962:	f040 8203 	bne.w	8006d6c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800696a:	f003 0310 	and.w	r3, r3, #16
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 81fc 	beq.w	8006d6c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006978:	f003 0310 	and.w	r3, r3, #16
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 81f5 	beq.w	8006d6c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2210      	movs	r2, #16
 8006988:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006994:	2b40      	cmp	r3, #64	@ 0x40
 8006996:	f040 816d 	bne.w	8006c74 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4aa4      	ldr	r2, [pc, #656]	@ (8006c34 <HAL_UART_IRQHandler+0x59c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d068      	beq.n	8006a7a <HAL_UART_IRQHandler+0x3e2>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4aa1      	ldr	r2, [pc, #644]	@ (8006c38 <HAL_UART_IRQHandler+0x5a0>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d061      	beq.n	8006a7a <HAL_UART_IRQHandler+0x3e2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a9f      	ldr	r2, [pc, #636]	@ (8006c3c <HAL_UART_IRQHandler+0x5a4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d05a      	beq.n	8006a7a <HAL_UART_IRQHandler+0x3e2>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a9c      	ldr	r2, [pc, #624]	@ (8006c40 <HAL_UART_IRQHandler+0x5a8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d053      	beq.n	8006a7a <HAL_UART_IRQHandler+0x3e2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a9a      	ldr	r2, [pc, #616]	@ (8006c44 <HAL_UART_IRQHandler+0x5ac>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d04c      	beq.n	8006a7a <HAL_UART_IRQHandler+0x3e2>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a97      	ldr	r2, [pc, #604]	@ (8006c48 <HAL_UART_IRQHandler+0x5b0>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d045      	beq.n	8006a7a <HAL_UART_IRQHandler+0x3e2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a95      	ldr	r2, [pc, #596]	@ (8006c4c <HAL_UART_IRQHandler+0x5b4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d03e      	beq.n	8006a7a <HAL_UART_IRQHandler+0x3e2>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a92      	ldr	r2, [pc, #584]	@ (8006c50 <HAL_UART_IRQHandler+0x5b8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d037      	beq.n	8006a7a <HAL_UART_IRQHandler+0x3e2>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a90      	ldr	r2, [pc, #576]	@ (8006c54 <HAL_UART_IRQHandler+0x5bc>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d030      	beq.n	8006a7a <HAL_UART_IRQHandler+0x3e2>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a8d      	ldr	r2, [pc, #564]	@ (8006c58 <HAL_UART_IRQHandler+0x5c0>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d029      	beq.n	8006a7a <HAL_UART_IRQHandler+0x3e2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a8b      	ldr	r2, [pc, #556]	@ (8006c5c <HAL_UART_IRQHandler+0x5c4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d022      	beq.n	8006a7a <HAL_UART_IRQHandler+0x3e2>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a88      	ldr	r2, [pc, #544]	@ (8006c60 <HAL_UART_IRQHandler+0x5c8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d01b      	beq.n	8006a7a <HAL_UART_IRQHandler+0x3e2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a86      	ldr	r2, [pc, #536]	@ (8006c64 <HAL_UART_IRQHandler+0x5cc>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d014      	beq.n	8006a7a <HAL_UART_IRQHandler+0x3e2>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a83      	ldr	r2, [pc, #524]	@ (8006c68 <HAL_UART_IRQHandler+0x5d0>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00d      	beq.n	8006a7a <HAL_UART_IRQHandler+0x3e2>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a81      	ldr	r2, [pc, #516]	@ (8006c6c <HAL_UART_IRQHandler+0x5d4>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d006      	beq.n	8006a7a <HAL_UART_IRQHandler+0x3e2>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a7e      	ldr	r2, [pc, #504]	@ (8006c70 <HAL_UART_IRQHandler+0x5d8>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d106      	bne.n	8006a88 <HAL_UART_IRQHandler+0x3f0>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	e005      	b.n	8006a94 <HAL_UART_IRQHandler+0x3fc>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 80ad 	beq.w	8006bfc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006aa8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aac:	429a      	cmp	r2, r3
 8006aae:	f080 80a5 	bcs.w	8006bfc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ab8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ac8:	f000 8087 	beq.w	8006bda <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ad8:	e853 3f00 	ldrex	r3, [r3]
 8006adc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	461a      	mov	r2, r3
 8006af2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006af6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006afa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1da      	bne.n	8006acc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3308      	adds	r3, #8
 8006b1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b20:	e853 3f00 	ldrex	r3, [r3]
 8006b24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b28:	f023 0301 	bic.w	r3, r3, #1
 8006b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3308      	adds	r3, #8
 8006b36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b3a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e1      	bne.n	8006b16 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3308      	adds	r3, #8
 8006b58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3308      	adds	r3, #8
 8006b72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b7e:	e841 2300 	strex	r3, r2, [r1]
 8006b82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1e3      	bne.n	8006b52 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ba8:	f023 0310 	bic.w	r3, r3, #16
 8006bac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006bba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bbc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bc0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e4      	bne.n	8006b98 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7fa fd29 	bl	800162c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2202      	movs	r2, #2
 8006bde:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f939 	bl	8006e6c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006bfa:	e119      	b.n	8006e30 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c06:	429a      	cmp	r2, r3
 8006c08:	f040 8112 	bne.w	8006e30 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c18:	f040 810a 	bne.w	8006e30 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f91e 	bl	8006e6c <HAL_UARTEx_RxEventCallback>
      return;
 8006c30:	e0fe      	b.n	8006e30 <HAL_UART_IRQHandler+0x798>
 8006c32:	bf00      	nop
 8006c34:	40020010 	.word	0x40020010
 8006c38:	40020028 	.word	0x40020028
 8006c3c:	40020040 	.word	0x40020040
 8006c40:	40020058 	.word	0x40020058
 8006c44:	40020070 	.word	0x40020070
 8006c48:	40020088 	.word	0x40020088
 8006c4c:	400200a0 	.word	0x400200a0
 8006c50:	400200b8 	.word	0x400200b8
 8006c54:	40020410 	.word	0x40020410
 8006c58:	40020428 	.word	0x40020428
 8006c5c:	40020440 	.word	0x40020440
 8006c60:	40020458 	.word	0x40020458
 8006c64:	40020470 	.word	0x40020470
 8006c68:	40020488 	.word	0x40020488
 8006c6c:	400204a0 	.word	0x400204a0
 8006c70:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 80cf 	beq.w	8006e34 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8006c96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 80ca 	beq.w	8006e34 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006cc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cc4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e4      	bne.n	8006ca0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3308      	adds	r3, #8
 8006cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce0:	e853 3f00 	ldrex	r3, [r3]
 8006ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ce6:	6a3a      	ldr	r2, [r7, #32]
 8006ce8:	4b55      	ldr	r3, [pc, #340]	@ (8006e40 <HAL_UART_IRQHandler+0x7a8>)
 8006cea:	4013      	ands	r3, r2
 8006cec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006cfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e3      	bne.n	8006cd6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	e853 3f00 	ldrex	r3, [r3]
 8006d2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f023 0310 	bic.w	r3, r3, #16
 8006d36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006d44:	61fb      	str	r3, [r7, #28]
 8006d46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d48:	69b9      	ldr	r1, [r7, #24]
 8006d4a:	69fa      	ldr	r2, [r7, #28]
 8006d4c:	e841 2300 	strex	r3, r2, [r1]
 8006d50:	617b      	str	r3, [r7, #20]
   return(result);
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e4      	bne.n	8006d22 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f881 	bl	8006e6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d6a:	e063      	b.n	8006e34 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00e      	beq.n	8006d96 <HAL_UART_IRQHandler+0x6fe>
 8006d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d008      	beq.n	8006d96 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006d8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f001 f83d 	bl	8007e0e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d94:	e051      	b.n	8006e3a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d014      	beq.n	8006dcc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d105      	bne.n	8006dba <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006db2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d008      	beq.n	8006dcc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d03a      	beq.n	8006e38 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	4798      	blx	r3
    }
    return;
 8006dca:	e035      	b.n	8006e38 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d009      	beq.n	8006dec <HAL_UART_IRQHandler+0x754>
 8006dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 ffe7 	bl	8007db8 <UART_EndTransmit_IT>
    return;
 8006dea:	e026      	b.n	8006e3a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006df0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d009      	beq.n	8006e0c <HAL_UART_IRQHandler+0x774>
 8006df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dfc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d003      	beq.n	8006e0c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 f816 	bl	8007e36 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e0a:	e016      	b.n	8006e3a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d010      	beq.n	8006e3a <HAL_UART_IRQHandler+0x7a2>
 8006e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	da0c      	bge.n	8006e3a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fffe 	bl	8007e22 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e26:	e008      	b.n	8006e3a <HAL_UART_IRQHandler+0x7a2>
      return;
 8006e28:	bf00      	nop
 8006e2a:	e006      	b.n	8006e3a <HAL_UART_IRQHandler+0x7a2>
    return;
 8006e2c:	bf00      	nop
 8006e2e:	e004      	b.n	8006e3a <HAL_UART_IRQHandler+0x7a2>
      return;
 8006e30:	bf00      	nop
 8006e32:	e002      	b.n	8006e3a <HAL_UART_IRQHandler+0x7a2>
      return;
 8006e34:	bf00      	nop
 8006e36:	e000      	b.n	8006e3a <HAL_UART_IRQHandler+0x7a2>
    return;
 8006e38:	bf00      	nop
  }
}
 8006e3a:	37e8      	adds	r7, #232	@ 0xe8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	effffffe 	.word	0xeffffffe

08006e44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e88:	b092      	sub	sp, #72	@ 0x48
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	69db      	ldr	r3, [r3, #28]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	4bbe      	ldr	r3, [pc, #760]	@ (80071ac <UART_SetConfig+0x328>)
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	6812      	ldr	r2, [r2, #0]
 8006eba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ebc:	430b      	orrs	r3, r1
 8006ebe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	68da      	ldr	r2, [r3, #12]
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4ab3      	ldr	r2, [pc, #716]	@ (80071b0 <UART_SetConfig+0x32c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d004      	beq.n	8006ef0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006eec:	4313      	orrs	r3, r2
 8006eee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689a      	ldr	r2, [r3, #8]
 8006ef6:	4baf      	ldr	r3, [pc, #700]	@ (80071b4 <UART_SetConfig+0x330>)
 8006ef8:	4013      	ands	r3, r2
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	6812      	ldr	r2, [r2, #0]
 8006efe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006f00:	430b      	orrs	r3, r1
 8006f02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0a:	f023 010f 	bic.w	r1, r3, #15
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4aa6      	ldr	r2, [pc, #664]	@ (80071b8 <UART_SetConfig+0x334>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d177      	bne.n	8007014 <UART_SetConfig+0x190>
 8006f24:	4ba5      	ldr	r3, [pc, #660]	@ (80071bc <UART_SetConfig+0x338>)
 8006f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f2c:	2b28      	cmp	r3, #40	@ 0x28
 8006f2e:	d86d      	bhi.n	800700c <UART_SetConfig+0x188>
 8006f30:	a201      	add	r2, pc, #4	@ (adr r2, 8006f38 <UART_SetConfig+0xb4>)
 8006f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f36:	bf00      	nop
 8006f38:	08006fdd 	.word	0x08006fdd
 8006f3c:	0800700d 	.word	0x0800700d
 8006f40:	0800700d 	.word	0x0800700d
 8006f44:	0800700d 	.word	0x0800700d
 8006f48:	0800700d 	.word	0x0800700d
 8006f4c:	0800700d 	.word	0x0800700d
 8006f50:	0800700d 	.word	0x0800700d
 8006f54:	0800700d 	.word	0x0800700d
 8006f58:	08006fe5 	.word	0x08006fe5
 8006f5c:	0800700d 	.word	0x0800700d
 8006f60:	0800700d 	.word	0x0800700d
 8006f64:	0800700d 	.word	0x0800700d
 8006f68:	0800700d 	.word	0x0800700d
 8006f6c:	0800700d 	.word	0x0800700d
 8006f70:	0800700d 	.word	0x0800700d
 8006f74:	0800700d 	.word	0x0800700d
 8006f78:	08006fed 	.word	0x08006fed
 8006f7c:	0800700d 	.word	0x0800700d
 8006f80:	0800700d 	.word	0x0800700d
 8006f84:	0800700d 	.word	0x0800700d
 8006f88:	0800700d 	.word	0x0800700d
 8006f8c:	0800700d 	.word	0x0800700d
 8006f90:	0800700d 	.word	0x0800700d
 8006f94:	0800700d 	.word	0x0800700d
 8006f98:	08006ff5 	.word	0x08006ff5
 8006f9c:	0800700d 	.word	0x0800700d
 8006fa0:	0800700d 	.word	0x0800700d
 8006fa4:	0800700d 	.word	0x0800700d
 8006fa8:	0800700d 	.word	0x0800700d
 8006fac:	0800700d 	.word	0x0800700d
 8006fb0:	0800700d 	.word	0x0800700d
 8006fb4:	0800700d 	.word	0x0800700d
 8006fb8:	08006ffd 	.word	0x08006ffd
 8006fbc:	0800700d 	.word	0x0800700d
 8006fc0:	0800700d 	.word	0x0800700d
 8006fc4:	0800700d 	.word	0x0800700d
 8006fc8:	0800700d 	.word	0x0800700d
 8006fcc:	0800700d 	.word	0x0800700d
 8006fd0:	0800700d 	.word	0x0800700d
 8006fd4:	0800700d 	.word	0x0800700d
 8006fd8:	08007005 	.word	0x08007005
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fe2:	e222      	b.n	800742a <UART_SetConfig+0x5a6>
 8006fe4:	2304      	movs	r3, #4
 8006fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fea:	e21e      	b.n	800742a <UART_SetConfig+0x5a6>
 8006fec:	2308      	movs	r3, #8
 8006fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ff2:	e21a      	b.n	800742a <UART_SetConfig+0x5a6>
 8006ff4:	2310      	movs	r3, #16
 8006ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ffa:	e216      	b.n	800742a <UART_SetConfig+0x5a6>
 8006ffc:	2320      	movs	r3, #32
 8006ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007002:	e212      	b.n	800742a <UART_SetConfig+0x5a6>
 8007004:	2340      	movs	r3, #64	@ 0x40
 8007006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800700a:	e20e      	b.n	800742a <UART_SetConfig+0x5a6>
 800700c:	2380      	movs	r3, #128	@ 0x80
 800700e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007012:	e20a      	b.n	800742a <UART_SetConfig+0x5a6>
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a69      	ldr	r2, [pc, #420]	@ (80071c0 <UART_SetConfig+0x33c>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d130      	bne.n	8007080 <UART_SetConfig+0x1fc>
 800701e:	4b67      	ldr	r3, [pc, #412]	@ (80071bc <UART_SetConfig+0x338>)
 8007020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	2b05      	cmp	r3, #5
 8007028:	d826      	bhi.n	8007078 <UART_SetConfig+0x1f4>
 800702a:	a201      	add	r2, pc, #4	@ (adr r2, 8007030 <UART_SetConfig+0x1ac>)
 800702c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007030:	08007049 	.word	0x08007049
 8007034:	08007051 	.word	0x08007051
 8007038:	08007059 	.word	0x08007059
 800703c:	08007061 	.word	0x08007061
 8007040:	08007069 	.word	0x08007069
 8007044:	08007071 	.word	0x08007071
 8007048:	2300      	movs	r3, #0
 800704a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800704e:	e1ec      	b.n	800742a <UART_SetConfig+0x5a6>
 8007050:	2304      	movs	r3, #4
 8007052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007056:	e1e8      	b.n	800742a <UART_SetConfig+0x5a6>
 8007058:	2308      	movs	r3, #8
 800705a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800705e:	e1e4      	b.n	800742a <UART_SetConfig+0x5a6>
 8007060:	2310      	movs	r3, #16
 8007062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007066:	e1e0      	b.n	800742a <UART_SetConfig+0x5a6>
 8007068:	2320      	movs	r3, #32
 800706a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800706e:	e1dc      	b.n	800742a <UART_SetConfig+0x5a6>
 8007070:	2340      	movs	r3, #64	@ 0x40
 8007072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007076:	e1d8      	b.n	800742a <UART_SetConfig+0x5a6>
 8007078:	2380      	movs	r3, #128	@ 0x80
 800707a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800707e:	e1d4      	b.n	800742a <UART_SetConfig+0x5a6>
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a4f      	ldr	r2, [pc, #316]	@ (80071c4 <UART_SetConfig+0x340>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d130      	bne.n	80070ec <UART_SetConfig+0x268>
 800708a:	4b4c      	ldr	r3, [pc, #304]	@ (80071bc <UART_SetConfig+0x338>)
 800708c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	2b05      	cmp	r3, #5
 8007094:	d826      	bhi.n	80070e4 <UART_SetConfig+0x260>
 8007096:	a201      	add	r2, pc, #4	@ (adr r2, 800709c <UART_SetConfig+0x218>)
 8007098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709c:	080070b5 	.word	0x080070b5
 80070a0:	080070bd 	.word	0x080070bd
 80070a4:	080070c5 	.word	0x080070c5
 80070a8:	080070cd 	.word	0x080070cd
 80070ac:	080070d5 	.word	0x080070d5
 80070b0:	080070dd 	.word	0x080070dd
 80070b4:	2300      	movs	r3, #0
 80070b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ba:	e1b6      	b.n	800742a <UART_SetConfig+0x5a6>
 80070bc:	2304      	movs	r3, #4
 80070be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070c2:	e1b2      	b.n	800742a <UART_SetConfig+0x5a6>
 80070c4:	2308      	movs	r3, #8
 80070c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ca:	e1ae      	b.n	800742a <UART_SetConfig+0x5a6>
 80070cc:	2310      	movs	r3, #16
 80070ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070d2:	e1aa      	b.n	800742a <UART_SetConfig+0x5a6>
 80070d4:	2320      	movs	r3, #32
 80070d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070da:	e1a6      	b.n	800742a <UART_SetConfig+0x5a6>
 80070dc:	2340      	movs	r3, #64	@ 0x40
 80070de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070e2:	e1a2      	b.n	800742a <UART_SetConfig+0x5a6>
 80070e4:	2380      	movs	r3, #128	@ 0x80
 80070e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ea:	e19e      	b.n	800742a <UART_SetConfig+0x5a6>
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a35      	ldr	r2, [pc, #212]	@ (80071c8 <UART_SetConfig+0x344>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d130      	bne.n	8007158 <UART_SetConfig+0x2d4>
 80070f6:	4b31      	ldr	r3, [pc, #196]	@ (80071bc <UART_SetConfig+0x338>)
 80070f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	2b05      	cmp	r3, #5
 8007100:	d826      	bhi.n	8007150 <UART_SetConfig+0x2cc>
 8007102:	a201      	add	r2, pc, #4	@ (adr r2, 8007108 <UART_SetConfig+0x284>)
 8007104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007108:	08007121 	.word	0x08007121
 800710c:	08007129 	.word	0x08007129
 8007110:	08007131 	.word	0x08007131
 8007114:	08007139 	.word	0x08007139
 8007118:	08007141 	.word	0x08007141
 800711c:	08007149 	.word	0x08007149
 8007120:	2300      	movs	r3, #0
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007126:	e180      	b.n	800742a <UART_SetConfig+0x5a6>
 8007128:	2304      	movs	r3, #4
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800712e:	e17c      	b.n	800742a <UART_SetConfig+0x5a6>
 8007130:	2308      	movs	r3, #8
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007136:	e178      	b.n	800742a <UART_SetConfig+0x5a6>
 8007138:	2310      	movs	r3, #16
 800713a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800713e:	e174      	b.n	800742a <UART_SetConfig+0x5a6>
 8007140:	2320      	movs	r3, #32
 8007142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007146:	e170      	b.n	800742a <UART_SetConfig+0x5a6>
 8007148:	2340      	movs	r3, #64	@ 0x40
 800714a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800714e:	e16c      	b.n	800742a <UART_SetConfig+0x5a6>
 8007150:	2380      	movs	r3, #128	@ 0x80
 8007152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007156:	e168      	b.n	800742a <UART_SetConfig+0x5a6>
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a1b      	ldr	r2, [pc, #108]	@ (80071cc <UART_SetConfig+0x348>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d142      	bne.n	80071e8 <UART_SetConfig+0x364>
 8007162:	4b16      	ldr	r3, [pc, #88]	@ (80071bc <UART_SetConfig+0x338>)
 8007164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	2b05      	cmp	r3, #5
 800716c:	d838      	bhi.n	80071e0 <UART_SetConfig+0x35c>
 800716e:	a201      	add	r2, pc, #4	@ (adr r2, 8007174 <UART_SetConfig+0x2f0>)
 8007170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007174:	0800718d 	.word	0x0800718d
 8007178:	08007195 	.word	0x08007195
 800717c:	0800719d 	.word	0x0800719d
 8007180:	080071a5 	.word	0x080071a5
 8007184:	080071d1 	.word	0x080071d1
 8007188:	080071d9 	.word	0x080071d9
 800718c:	2300      	movs	r3, #0
 800718e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007192:	e14a      	b.n	800742a <UART_SetConfig+0x5a6>
 8007194:	2304      	movs	r3, #4
 8007196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800719a:	e146      	b.n	800742a <UART_SetConfig+0x5a6>
 800719c:	2308      	movs	r3, #8
 800719e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071a2:	e142      	b.n	800742a <UART_SetConfig+0x5a6>
 80071a4:	2310      	movs	r3, #16
 80071a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071aa:	e13e      	b.n	800742a <UART_SetConfig+0x5a6>
 80071ac:	cfff69f3 	.word	0xcfff69f3
 80071b0:	58000c00 	.word	0x58000c00
 80071b4:	11fff4ff 	.word	0x11fff4ff
 80071b8:	40011000 	.word	0x40011000
 80071bc:	58024400 	.word	0x58024400
 80071c0:	40004400 	.word	0x40004400
 80071c4:	40004800 	.word	0x40004800
 80071c8:	40004c00 	.word	0x40004c00
 80071cc:	40005000 	.word	0x40005000
 80071d0:	2320      	movs	r3, #32
 80071d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071d6:	e128      	b.n	800742a <UART_SetConfig+0x5a6>
 80071d8:	2340      	movs	r3, #64	@ 0x40
 80071da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071de:	e124      	b.n	800742a <UART_SetConfig+0x5a6>
 80071e0:	2380      	movs	r3, #128	@ 0x80
 80071e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071e6:	e120      	b.n	800742a <UART_SetConfig+0x5a6>
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4acb      	ldr	r2, [pc, #812]	@ (800751c <UART_SetConfig+0x698>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d176      	bne.n	80072e0 <UART_SetConfig+0x45c>
 80071f2:	4bcb      	ldr	r3, [pc, #812]	@ (8007520 <UART_SetConfig+0x69c>)
 80071f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071fa:	2b28      	cmp	r3, #40	@ 0x28
 80071fc:	d86c      	bhi.n	80072d8 <UART_SetConfig+0x454>
 80071fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007204 <UART_SetConfig+0x380>)
 8007200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007204:	080072a9 	.word	0x080072a9
 8007208:	080072d9 	.word	0x080072d9
 800720c:	080072d9 	.word	0x080072d9
 8007210:	080072d9 	.word	0x080072d9
 8007214:	080072d9 	.word	0x080072d9
 8007218:	080072d9 	.word	0x080072d9
 800721c:	080072d9 	.word	0x080072d9
 8007220:	080072d9 	.word	0x080072d9
 8007224:	080072b1 	.word	0x080072b1
 8007228:	080072d9 	.word	0x080072d9
 800722c:	080072d9 	.word	0x080072d9
 8007230:	080072d9 	.word	0x080072d9
 8007234:	080072d9 	.word	0x080072d9
 8007238:	080072d9 	.word	0x080072d9
 800723c:	080072d9 	.word	0x080072d9
 8007240:	080072d9 	.word	0x080072d9
 8007244:	080072b9 	.word	0x080072b9
 8007248:	080072d9 	.word	0x080072d9
 800724c:	080072d9 	.word	0x080072d9
 8007250:	080072d9 	.word	0x080072d9
 8007254:	080072d9 	.word	0x080072d9
 8007258:	080072d9 	.word	0x080072d9
 800725c:	080072d9 	.word	0x080072d9
 8007260:	080072d9 	.word	0x080072d9
 8007264:	080072c1 	.word	0x080072c1
 8007268:	080072d9 	.word	0x080072d9
 800726c:	080072d9 	.word	0x080072d9
 8007270:	080072d9 	.word	0x080072d9
 8007274:	080072d9 	.word	0x080072d9
 8007278:	080072d9 	.word	0x080072d9
 800727c:	080072d9 	.word	0x080072d9
 8007280:	080072d9 	.word	0x080072d9
 8007284:	080072c9 	.word	0x080072c9
 8007288:	080072d9 	.word	0x080072d9
 800728c:	080072d9 	.word	0x080072d9
 8007290:	080072d9 	.word	0x080072d9
 8007294:	080072d9 	.word	0x080072d9
 8007298:	080072d9 	.word	0x080072d9
 800729c:	080072d9 	.word	0x080072d9
 80072a0:	080072d9 	.word	0x080072d9
 80072a4:	080072d1 	.word	0x080072d1
 80072a8:	2301      	movs	r3, #1
 80072aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ae:	e0bc      	b.n	800742a <UART_SetConfig+0x5a6>
 80072b0:	2304      	movs	r3, #4
 80072b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072b6:	e0b8      	b.n	800742a <UART_SetConfig+0x5a6>
 80072b8:	2308      	movs	r3, #8
 80072ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072be:	e0b4      	b.n	800742a <UART_SetConfig+0x5a6>
 80072c0:	2310      	movs	r3, #16
 80072c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072c6:	e0b0      	b.n	800742a <UART_SetConfig+0x5a6>
 80072c8:	2320      	movs	r3, #32
 80072ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ce:	e0ac      	b.n	800742a <UART_SetConfig+0x5a6>
 80072d0:	2340      	movs	r3, #64	@ 0x40
 80072d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072d6:	e0a8      	b.n	800742a <UART_SetConfig+0x5a6>
 80072d8:	2380      	movs	r3, #128	@ 0x80
 80072da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072de:	e0a4      	b.n	800742a <UART_SetConfig+0x5a6>
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a8f      	ldr	r2, [pc, #572]	@ (8007524 <UART_SetConfig+0x6a0>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d130      	bne.n	800734c <UART_SetConfig+0x4c8>
 80072ea:	4b8d      	ldr	r3, [pc, #564]	@ (8007520 <UART_SetConfig+0x69c>)
 80072ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ee:	f003 0307 	and.w	r3, r3, #7
 80072f2:	2b05      	cmp	r3, #5
 80072f4:	d826      	bhi.n	8007344 <UART_SetConfig+0x4c0>
 80072f6:	a201      	add	r2, pc, #4	@ (adr r2, 80072fc <UART_SetConfig+0x478>)
 80072f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fc:	08007315 	.word	0x08007315
 8007300:	0800731d 	.word	0x0800731d
 8007304:	08007325 	.word	0x08007325
 8007308:	0800732d 	.word	0x0800732d
 800730c:	08007335 	.word	0x08007335
 8007310:	0800733d 	.word	0x0800733d
 8007314:	2300      	movs	r3, #0
 8007316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800731a:	e086      	b.n	800742a <UART_SetConfig+0x5a6>
 800731c:	2304      	movs	r3, #4
 800731e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007322:	e082      	b.n	800742a <UART_SetConfig+0x5a6>
 8007324:	2308      	movs	r3, #8
 8007326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800732a:	e07e      	b.n	800742a <UART_SetConfig+0x5a6>
 800732c:	2310      	movs	r3, #16
 800732e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007332:	e07a      	b.n	800742a <UART_SetConfig+0x5a6>
 8007334:	2320      	movs	r3, #32
 8007336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800733a:	e076      	b.n	800742a <UART_SetConfig+0x5a6>
 800733c:	2340      	movs	r3, #64	@ 0x40
 800733e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007342:	e072      	b.n	800742a <UART_SetConfig+0x5a6>
 8007344:	2380      	movs	r3, #128	@ 0x80
 8007346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800734a:	e06e      	b.n	800742a <UART_SetConfig+0x5a6>
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a75      	ldr	r2, [pc, #468]	@ (8007528 <UART_SetConfig+0x6a4>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d130      	bne.n	80073b8 <UART_SetConfig+0x534>
 8007356:	4b72      	ldr	r3, [pc, #456]	@ (8007520 <UART_SetConfig+0x69c>)
 8007358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800735a:	f003 0307 	and.w	r3, r3, #7
 800735e:	2b05      	cmp	r3, #5
 8007360:	d826      	bhi.n	80073b0 <UART_SetConfig+0x52c>
 8007362:	a201      	add	r2, pc, #4	@ (adr r2, 8007368 <UART_SetConfig+0x4e4>)
 8007364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007368:	08007381 	.word	0x08007381
 800736c:	08007389 	.word	0x08007389
 8007370:	08007391 	.word	0x08007391
 8007374:	08007399 	.word	0x08007399
 8007378:	080073a1 	.word	0x080073a1
 800737c:	080073a9 	.word	0x080073a9
 8007380:	2300      	movs	r3, #0
 8007382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007386:	e050      	b.n	800742a <UART_SetConfig+0x5a6>
 8007388:	2304      	movs	r3, #4
 800738a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800738e:	e04c      	b.n	800742a <UART_SetConfig+0x5a6>
 8007390:	2308      	movs	r3, #8
 8007392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007396:	e048      	b.n	800742a <UART_SetConfig+0x5a6>
 8007398:	2310      	movs	r3, #16
 800739a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800739e:	e044      	b.n	800742a <UART_SetConfig+0x5a6>
 80073a0:	2320      	movs	r3, #32
 80073a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073a6:	e040      	b.n	800742a <UART_SetConfig+0x5a6>
 80073a8:	2340      	movs	r3, #64	@ 0x40
 80073aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ae:	e03c      	b.n	800742a <UART_SetConfig+0x5a6>
 80073b0:	2380      	movs	r3, #128	@ 0x80
 80073b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073b6:	e038      	b.n	800742a <UART_SetConfig+0x5a6>
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a5b      	ldr	r2, [pc, #364]	@ (800752c <UART_SetConfig+0x6a8>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d130      	bne.n	8007424 <UART_SetConfig+0x5a0>
 80073c2:	4b57      	ldr	r3, [pc, #348]	@ (8007520 <UART_SetConfig+0x69c>)
 80073c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073c6:	f003 0307 	and.w	r3, r3, #7
 80073ca:	2b05      	cmp	r3, #5
 80073cc:	d826      	bhi.n	800741c <UART_SetConfig+0x598>
 80073ce:	a201      	add	r2, pc, #4	@ (adr r2, 80073d4 <UART_SetConfig+0x550>)
 80073d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d4:	080073ed 	.word	0x080073ed
 80073d8:	080073f5 	.word	0x080073f5
 80073dc:	080073fd 	.word	0x080073fd
 80073e0:	08007405 	.word	0x08007405
 80073e4:	0800740d 	.word	0x0800740d
 80073e8:	08007415 	.word	0x08007415
 80073ec:	2302      	movs	r3, #2
 80073ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073f2:	e01a      	b.n	800742a <UART_SetConfig+0x5a6>
 80073f4:	2304      	movs	r3, #4
 80073f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073fa:	e016      	b.n	800742a <UART_SetConfig+0x5a6>
 80073fc:	2308      	movs	r3, #8
 80073fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007402:	e012      	b.n	800742a <UART_SetConfig+0x5a6>
 8007404:	2310      	movs	r3, #16
 8007406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800740a:	e00e      	b.n	800742a <UART_SetConfig+0x5a6>
 800740c:	2320      	movs	r3, #32
 800740e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007412:	e00a      	b.n	800742a <UART_SetConfig+0x5a6>
 8007414:	2340      	movs	r3, #64	@ 0x40
 8007416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800741a:	e006      	b.n	800742a <UART_SetConfig+0x5a6>
 800741c:	2380      	movs	r3, #128	@ 0x80
 800741e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007422:	e002      	b.n	800742a <UART_SetConfig+0x5a6>
 8007424:	2380      	movs	r3, #128	@ 0x80
 8007426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a3f      	ldr	r2, [pc, #252]	@ (800752c <UART_SetConfig+0x6a8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	f040 80f8 	bne.w	8007626 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007436:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800743a:	2b20      	cmp	r3, #32
 800743c:	dc46      	bgt.n	80074cc <UART_SetConfig+0x648>
 800743e:	2b02      	cmp	r3, #2
 8007440:	f2c0 8082 	blt.w	8007548 <UART_SetConfig+0x6c4>
 8007444:	3b02      	subs	r3, #2
 8007446:	2b1e      	cmp	r3, #30
 8007448:	d87e      	bhi.n	8007548 <UART_SetConfig+0x6c4>
 800744a:	a201      	add	r2, pc, #4	@ (adr r2, 8007450 <UART_SetConfig+0x5cc>)
 800744c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007450:	080074d3 	.word	0x080074d3
 8007454:	08007549 	.word	0x08007549
 8007458:	080074db 	.word	0x080074db
 800745c:	08007549 	.word	0x08007549
 8007460:	08007549 	.word	0x08007549
 8007464:	08007549 	.word	0x08007549
 8007468:	080074eb 	.word	0x080074eb
 800746c:	08007549 	.word	0x08007549
 8007470:	08007549 	.word	0x08007549
 8007474:	08007549 	.word	0x08007549
 8007478:	08007549 	.word	0x08007549
 800747c:	08007549 	.word	0x08007549
 8007480:	08007549 	.word	0x08007549
 8007484:	08007549 	.word	0x08007549
 8007488:	080074fb 	.word	0x080074fb
 800748c:	08007549 	.word	0x08007549
 8007490:	08007549 	.word	0x08007549
 8007494:	08007549 	.word	0x08007549
 8007498:	08007549 	.word	0x08007549
 800749c:	08007549 	.word	0x08007549
 80074a0:	08007549 	.word	0x08007549
 80074a4:	08007549 	.word	0x08007549
 80074a8:	08007549 	.word	0x08007549
 80074ac:	08007549 	.word	0x08007549
 80074b0:	08007549 	.word	0x08007549
 80074b4:	08007549 	.word	0x08007549
 80074b8:	08007549 	.word	0x08007549
 80074bc:	08007549 	.word	0x08007549
 80074c0:	08007549 	.word	0x08007549
 80074c4:	08007549 	.word	0x08007549
 80074c8:	0800753b 	.word	0x0800753b
 80074cc:	2b40      	cmp	r3, #64	@ 0x40
 80074ce:	d037      	beq.n	8007540 <UART_SetConfig+0x6bc>
 80074d0:	e03a      	b.n	8007548 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80074d2:	f7fd fa01 	bl	80048d8 <HAL_RCCEx_GetD3PCLK1Freq>
 80074d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80074d8:	e03c      	b.n	8007554 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fd fa10 	bl	8004904 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074e8:	e034      	b.n	8007554 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074ea:	f107 0318 	add.w	r3, r7, #24
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fd fb5c 	bl	8004bac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074f8:	e02c      	b.n	8007554 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074fa:	4b09      	ldr	r3, [pc, #36]	@ (8007520 <UART_SetConfig+0x69c>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0320 	and.w	r3, r3, #32
 8007502:	2b00      	cmp	r3, #0
 8007504:	d016      	beq.n	8007534 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007506:	4b06      	ldr	r3, [pc, #24]	@ (8007520 <UART_SetConfig+0x69c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	08db      	lsrs	r3, r3, #3
 800750c:	f003 0303 	and.w	r3, r3, #3
 8007510:	4a07      	ldr	r2, [pc, #28]	@ (8007530 <UART_SetConfig+0x6ac>)
 8007512:	fa22 f303 	lsr.w	r3, r2, r3
 8007516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007518:	e01c      	b.n	8007554 <UART_SetConfig+0x6d0>
 800751a:	bf00      	nop
 800751c:	40011400 	.word	0x40011400
 8007520:	58024400 	.word	0x58024400
 8007524:	40007800 	.word	0x40007800
 8007528:	40007c00 	.word	0x40007c00
 800752c:	58000c00 	.word	0x58000c00
 8007530:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007534:	4b9d      	ldr	r3, [pc, #628]	@ (80077ac <UART_SetConfig+0x928>)
 8007536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007538:	e00c      	b.n	8007554 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800753a:	4b9d      	ldr	r3, [pc, #628]	@ (80077b0 <UART_SetConfig+0x92c>)
 800753c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800753e:	e009      	b.n	8007554 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007540:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007546:	e005      	b.n	8007554 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007548:	2300      	movs	r3, #0
 800754a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007552:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 81de 	beq.w	8007918 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007560:	4a94      	ldr	r2, [pc, #592]	@ (80077b4 <UART_SetConfig+0x930>)
 8007562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007566:	461a      	mov	r2, r3
 8007568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800756a:	fbb3 f3f2 	udiv	r3, r3, r2
 800756e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	4613      	mov	r3, r2
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	4413      	add	r3, r2
 800757a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800757c:	429a      	cmp	r2, r3
 800757e:	d305      	bcc.n	800758c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007588:	429a      	cmp	r2, r3
 800758a:	d903      	bls.n	8007594 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007592:	e1c1      	b.n	8007918 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007596:	2200      	movs	r2, #0
 8007598:	60bb      	str	r3, [r7, #8]
 800759a:	60fa      	str	r2, [r7, #12]
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a0:	4a84      	ldr	r2, [pc, #528]	@ (80077b4 <UART_SetConfig+0x930>)
 80075a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	2200      	movs	r2, #0
 80075aa:	603b      	str	r3, [r7, #0]
 80075ac:	607a      	str	r2, [r7, #4]
 80075ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075b6:	f7f8 feeb 	bl	8000390 <__aeabi_uldivmod>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	4610      	mov	r0, r2
 80075c0:	4619      	mov	r1, r3
 80075c2:	f04f 0200 	mov.w	r2, #0
 80075c6:	f04f 0300 	mov.w	r3, #0
 80075ca:	020b      	lsls	r3, r1, #8
 80075cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075d0:	0202      	lsls	r2, r0, #8
 80075d2:	6979      	ldr	r1, [r7, #20]
 80075d4:	6849      	ldr	r1, [r1, #4]
 80075d6:	0849      	lsrs	r1, r1, #1
 80075d8:	2000      	movs	r0, #0
 80075da:	460c      	mov	r4, r1
 80075dc:	4605      	mov	r5, r0
 80075de:	eb12 0804 	adds.w	r8, r2, r4
 80075e2:	eb43 0905 	adc.w	r9, r3, r5
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	469a      	mov	sl, r3
 80075ee:	4693      	mov	fp, r2
 80075f0:	4652      	mov	r2, sl
 80075f2:	465b      	mov	r3, fp
 80075f4:	4640      	mov	r0, r8
 80075f6:	4649      	mov	r1, r9
 80075f8:	f7f8 feca 	bl	8000390 <__aeabi_uldivmod>
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	4613      	mov	r3, r2
 8007602:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007606:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800760a:	d308      	bcc.n	800761e <UART_SetConfig+0x79a>
 800760c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007612:	d204      	bcs.n	800761e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800761a:	60da      	str	r2, [r3, #12]
 800761c:	e17c      	b.n	8007918 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007624:	e178      	b.n	8007918 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800762e:	f040 80c5 	bne.w	80077bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007632:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007636:	2b20      	cmp	r3, #32
 8007638:	dc48      	bgt.n	80076cc <UART_SetConfig+0x848>
 800763a:	2b00      	cmp	r3, #0
 800763c:	db7b      	blt.n	8007736 <UART_SetConfig+0x8b2>
 800763e:	2b20      	cmp	r3, #32
 8007640:	d879      	bhi.n	8007736 <UART_SetConfig+0x8b2>
 8007642:	a201      	add	r2, pc, #4	@ (adr r2, 8007648 <UART_SetConfig+0x7c4>)
 8007644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007648:	080076d3 	.word	0x080076d3
 800764c:	080076db 	.word	0x080076db
 8007650:	08007737 	.word	0x08007737
 8007654:	08007737 	.word	0x08007737
 8007658:	080076e3 	.word	0x080076e3
 800765c:	08007737 	.word	0x08007737
 8007660:	08007737 	.word	0x08007737
 8007664:	08007737 	.word	0x08007737
 8007668:	080076f3 	.word	0x080076f3
 800766c:	08007737 	.word	0x08007737
 8007670:	08007737 	.word	0x08007737
 8007674:	08007737 	.word	0x08007737
 8007678:	08007737 	.word	0x08007737
 800767c:	08007737 	.word	0x08007737
 8007680:	08007737 	.word	0x08007737
 8007684:	08007737 	.word	0x08007737
 8007688:	08007703 	.word	0x08007703
 800768c:	08007737 	.word	0x08007737
 8007690:	08007737 	.word	0x08007737
 8007694:	08007737 	.word	0x08007737
 8007698:	08007737 	.word	0x08007737
 800769c:	08007737 	.word	0x08007737
 80076a0:	08007737 	.word	0x08007737
 80076a4:	08007737 	.word	0x08007737
 80076a8:	08007737 	.word	0x08007737
 80076ac:	08007737 	.word	0x08007737
 80076b0:	08007737 	.word	0x08007737
 80076b4:	08007737 	.word	0x08007737
 80076b8:	08007737 	.word	0x08007737
 80076bc:	08007737 	.word	0x08007737
 80076c0:	08007737 	.word	0x08007737
 80076c4:	08007737 	.word	0x08007737
 80076c8:	08007729 	.word	0x08007729
 80076cc:	2b40      	cmp	r3, #64	@ 0x40
 80076ce:	d02e      	beq.n	800772e <UART_SetConfig+0x8aa>
 80076d0:	e031      	b.n	8007736 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076d2:	f7fb fecb 	bl	800346c <HAL_RCC_GetPCLK1Freq>
 80076d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076d8:	e033      	b.n	8007742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076da:	f7fb fedd 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 80076de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076e0:	e02f      	b.n	8007742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fd f90c 	bl	8004904 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076f0:	e027      	b.n	8007742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076f2:	f107 0318 	add.w	r3, r7, #24
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7fd fa58 	bl	8004bac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007700:	e01f      	b.n	8007742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007702:	4b2d      	ldr	r3, [pc, #180]	@ (80077b8 <UART_SetConfig+0x934>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0320 	and.w	r3, r3, #32
 800770a:	2b00      	cmp	r3, #0
 800770c:	d009      	beq.n	8007722 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800770e:	4b2a      	ldr	r3, [pc, #168]	@ (80077b8 <UART_SetConfig+0x934>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	08db      	lsrs	r3, r3, #3
 8007714:	f003 0303 	and.w	r3, r3, #3
 8007718:	4a24      	ldr	r2, [pc, #144]	@ (80077ac <UART_SetConfig+0x928>)
 800771a:	fa22 f303 	lsr.w	r3, r2, r3
 800771e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007720:	e00f      	b.n	8007742 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007722:	4b22      	ldr	r3, [pc, #136]	@ (80077ac <UART_SetConfig+0x928>)
 8007724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007726:	e00c      	b.n	8007742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007728:	4b21      	ldr	r3, [pc, #132]	@ (80077b0 <UART_SetConfig+0x92c>)
 800772a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800772c:	e009      	b.n	8007742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800772e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007734:	e005      	b.n	8007742 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007740:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 80e7 	beq.w	8007918 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800774e:	4a19      	ldr	r2, [pc, #100]	@ (80077b4 <UART_SetConfig+0x930>)
 8007750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007754:	461a      	mov	r2, r3
 8007756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007758:	fbb3 f3f2 	udiv	r3, r3, r2
 800775c:	005a      	lsls	r2, r3, #1
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	085b      	lsrs	r3, r3, #1
 8007764:	441a      	add	r2, r3
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	fbb2 f3f3 	udiv	r3, r2, r3
 800776e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007772:	2b0f      	cmp	r3, #15
 8007774:	d916      	bls.n	80077a4 <UART_SetConfig+0x920>
 8007776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800777c:	d212      	bcs.n	80077a4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800777e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007780:	b29b      	uxth	r3, r3
 8007782:	f023 030f 	bic.w	r3, r3, #15
 8007786:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778a:	085b      	lsrs	r3, r3, #1
 800778c:	b29b      	uxth	r3, r3
 800778e:	f003 0307 	and.w	r3, r3, #7
 8007792:	b29a      	uxth	r2, r3
 8007794:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007796:	4313      	orrs	r3, r2
 8007798:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80077a0:	60da      	str	r2, [r3, #12]
 80077a2:	e0b9      	b.n	8007918 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80077aa:	e0b5      	b.n	8007918 <UART_SetConfig+0xa94>
 80077ac:	03d09000 	.word	0x03d09000
 80077b0:	003d0900 	.word	0x003d0900
 80077b4:	08008a74 	.word	0x08008a74
 80077b8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80077bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80077c0:	2b20      	cmp	r3, #32
 80077c2:	dc49      	bgt.n	8007858 <UART_SetConfig+0x9d4>
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	db7c      	blt.n	80078c2 <UART_SetConfig+0xa3e>
 80077c8:	2b20      	cmp	r3, #32
 80077ca:	d87a      	bhi.n	80078c2 <UART_SetConfig+0xa3e>
 80077cc:	a201      	add	r2, pc, #4	@ (adr r2, 80077d4 <UART_SetConfig+0x950>)
 80077ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d2:	bf00      	nop
 80077d4:	0800785f 	.word	0x0800785f
 80077d8:	08007867 	.word	0x08007867
 80077dc:	080078c3 	.word	0x080078c3
 80077e0:	080078c3 	.word	0x080078c3
 80077e4:	0800786f 	.word	0x0800786f
 80077e8:	080078c3 	.word	0x080078c3
 80077ec:	080078c3 	.word	0x080078c3
 80077f0:	080078c3 	.word	0x080078c3
 80077f4:	0800787f 	.word	0x0800787f
 80077f8:	080078c3 	.word	0x080078c3
 80077fc:	080078c3 	.word	0x080078c3
 8007800:	080078c3 	.word	0x080078c3
 8007804:	080078c3 	.word	0x080078c3
 8007808:	080078c3 	.word	0x080078c3
 800780c:	080078c3 	.word	0x080078c3
 8007810:	080078c3 	.word	0x080078c3
 8007814:	0800788f 	.word	0x0800788f
 8007818:	080078c3 	.word	0x080078c3
 800781c:	080078c3 	.word	0x080078c3
 8007820:	080078c3 	.word	0x080078c3
 8007824:	080078c3 	.word	0x080078c3
 8007828:	080078c3 	.word	0x080078c3
 800782c:	080078c3 	.word	0x080078c3
 8007830:	080078c3 	.word	0x080078c3
 8007834:	080078c3 	.word	0x080078c3
 8007838:	080078c3 	.word	0x080078c3
 800783c:	080078c3 	.word	0x080078c3
 8007840:	080078c3 	.word	0x080078c3
 8007844:	080078c3 	.word	0x080078c3
 8007848:	080078c3 	.word	0x080078c3
 800784c:	080078c3 	.word	0x080078c3
 8007850:	080078c3 	.word	0x080078c3
 8007854:	080078b5 	.word	0x080078b5
 8007858:	2b40      	cmp	r3, #64	@ 0x40
 800785a:	d02e      	beq.n	80078ba <UART_SetConfig+0xa36>
 800785c:	e031      	b.n	80078c2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800785e:	f7fb fe05 	bl	800346c <HAL_RCC_GetPCLK1Freq>
 8007862:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007864:	e033      	b.n	80078ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007866:	f7fb fe17 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 800786a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800786c:	e02f      	b.n	80078ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800786e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007872:	4618      	mov	r0, r3
 8007874:	f7fd f846 	bl	8004904 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800787c:	e027      	b.n	80078ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800787e:	f107 0318 	add.w	r3, r7, #24
 8007882:	4618      	mov	r0, r3
 8007884:	f7fd f992 	bl	8004bac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800788c:	e01f      	b.n	80078ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800788e:	4b2d      	ldr	r3, [pc, #180]	@ (8007944 <UART_SetConfig+0xac0>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0320 	and.w	r3, r3, #32
 8007896:	2b00      	cmp	r3, #0
 8007898:	d009      	beq.n	80078ae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800789a:	4b2a      	ldr	r3, [pc, #168]	@ (8007944 <UART_SetConfig+0xac0>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	08db      	lsrs	r3, r3, #3
 80078a0:	f003 0303 	and.w	r3, r3, #3
 80078a4:	4a28      	ldr	r2, [pc, #160]	@ (8007948 <UART_SetConfig+0xac4>)
 80078a6:	fa22 f303 	lsr.w	r3, r2, r3
 80078aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80078ac:	e00f      	b.n	80078ce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80078ae:	4b26      	ldr	r3, [pc, #152]	@ (8007948 <UART_SetConfig+0xac4>)
 80078b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078b2:	e00c      	b.n	80078ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078b4:	4b25      	ldr	r3, [pc, #148]	@ (800794c <UART_SetConfig+0xac8>)
 80078b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078b8:	e009      	b.n	80078ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078c0:	e005      	b.n	80078ce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80078cc:	bf00      	nop
    }

    if (pclk != 0U)
 80078ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d021      	beq.n	8007918 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007950 <UART_SetConfig+0xacc>)
 80078da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078de:	461a      	mov	r2, r3
 80078e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	085b      	lsrs	r3, r3, #1
 80078ec:	441a      	add	r2, r3
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078fa:	2b0f      	cmp	r3, #15
 80078fc:	d909      	bls.n	8007912 <UART_SetConfig+0xa8e>
 80078fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007904:	d205      	bcs.n	8007912 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007908:	b29a      	uxth	r2, r3
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	60da      	str	r2, [r3, #12]
 8007910:	e002      	b.n	8007918 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	2201      	movs	r2, #1
 800791c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	2201      	movs	r2, #1
 8007924:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	2200      	movs	r2, #0
 800792c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2200      	movs	r2, #0
 8007932:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007934:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007938:	4618      	mov	r0, r3
 800793a:	3748      	adds	r7, #72	@ 0x48
 800793c:	46bd      	mov	sp, r7
 800793e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007942:	bf00      	nop
 8007944:	58024400 	.word	0x58024400
 8007948:	03d09000 	.word	0x03d09000
 800794c:	003d0900 	.word	0x003d0900
 8007950:	08008a74 	.word	0x08008a74

08007954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007960:	f003 0308 	and.w	r3, r3, #8
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00a      	beq.n	800797e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	430a      	orrs	r2, r1
 800797c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a4:	f003 0302 	and.w	r3, r3, #2
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00a      	beq.n	80079c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c6:	f003 0304 	and.w	r3, r3, #4
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00a      	beq.n	80079e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e8:	f003 0310 	and.w	r3, r3, #16
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00a      	beq.n	8007a06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a0a:	f003 0320 	and.w	r3, r3, #32
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00a      	beq.n	8007a28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	430a      	orrs	r2, r1
 8007a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d01a      	beq.n	8007a6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a52:	d10a      	bne.n	8007a6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00a      	beq.n	8007a8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	605a      	str	r2, [r3, #4]
  }
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b098      	sub	sp, #96	@ 0x60
 8007a9c:	af02      	add	r7, sp, #8
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007aa8:	f7f9 fbfc 	bl	80012a4 <HAL_GetTick>
 8007aac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0308 	and.w	r3, r3, #8
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d12f      	bne.n	8007b1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007abc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f88e 	bl	8007bec <UART_WaitOnFlagUntilTimeout>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d022      	beq.n	8007b1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ade:	e853 3f00 	ldrex	r3, [r3]
 8007ae2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ae6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007aea:	653b      	str	r3, [r7, #80]	@ 0x50
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	461a      	mov	r2, r3
 8007af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007af6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007afa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007afc:	e841 2300 	strex	r3, r2, [r1]
 8007b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e6      	bne.n	8007ad6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e063      	b.n	8007be4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0304 	and.w	r3, r3, #4
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	d149      	bne.n	8007bbe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b2a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b32:	2200      	movs	r2, #0
 8007b34:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f857 	bl	8007bec <UART_WaitOnFlagUntilTimeout>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d03c      	beq.n	8007bbe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4c:	e853 3f00 	ldrex	r3, [r3]
 8007b50:	623b      	str	r3, [r7, #32]
   return(result);
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b62:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b64:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1e6      	bne.n	8007b44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	e853 3f00 	ldrex	r3, [r3]
 8007b84:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f023 0301 	bic.w	r3, r3, #1
 8007b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3308      	adds	r3, #8
 8007b94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b96:	61fa      	str	r2, [r7, #28]
 8007b98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9a:	69b9      	ldr	r1, [r7, #24]
 8007b9c:	69fa      	ldr	r2, [r7, #28]
 8007b9e:	e841 2300 	strex	r3, r2, [r1]
 8007ba2:	617b      	str	r3, [r7, #20]
   return(result);
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1e5      	bne.n	8007b76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2220      	movs	r2, #32
 8007bae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e012      	b.n	8007be4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2220      	movs	r2, #32
 8007bc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2220      	movs	r2, #32
 8007bca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3758      	adds	r7, #88	@ 0x58
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	603b      	str	r3, [r7, #0]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bfc:	e04f      	b.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c04:	d04b      	beq.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c06:	f7f9 fb4d 	bl	80012a4 <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d302      	bcc.n	8007c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	e04e      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0304 	and.w	r3, r3, #4
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d037      	beq.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	2b80      	cmp	r3, #128	@ 0x80
 8007c32:	d034      	beq.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2b40      	cmp	r3, #64	@ 0x40
 8007c38:	d031      	beq.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	f003 0308 	and.w	r3, r3, #8
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d110      	bne.n	8007c6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2208      	movs	r2, #8
 8007c4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 f839 	bl	8007cc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2208      	movs	r2, #8
 8007c5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e029      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c78:	d111      	bne.n	8007c9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 f81f 	bl	8007cc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e00f      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69da      	ldr	r2, [r3, #28]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	bf0c      	ite	eq
 8007cae:	2301      	moveq	r3, #1
 8007cb0:	2300      	movne	r3, #0
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	79fb      	ldrb	r3, [r7, #7]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d0a0      	beq.n	8007bfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
	...

08007cc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b095      	sub	sp, #84	@ 0x54
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	461a      	mov	r2, r3
 8007cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cee:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cf0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cf4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e6      	bne.n	8007cd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3308      	adds	r3, #8
 8007d08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	6a3b      	ldr	r3, [r7, #32]
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d12:	69fa      	ldr	r2, [r7, #28]
 8007d14:	4b1e      	ldr	r3, [pc, #120]	@ (8007d90 <UART_EndRxTransfer+0xc8>)
 8007d16:	4013      	ands	r3, r2
 8007d18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3308      	adds	r3, #8
 8007d20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e5      	bne.n	8007d02 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d118      	bne.n	8007d70 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	e853 3f00 	ldrex	r3, [r3]
 8007d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f023 0310 	bic.w	r3, r3, #16
 8007d52:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d5c:	61bb      	str	r3, [r7, #24]
 8007d5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	6979      	ldr	r1, [r7, #20]
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	613b      	str	r3, [r7, #16]
   return(result);
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e6      	bne.n	8007d3e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2220      	movs	r2, #32
 8007d74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007d84:	bf00      	nop
 8007d86:	3754      	adds	r7, #84	@ 0x54
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	effffffe 	.word	0xeffffffe

08007d94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f7ff f854 	bl	8006e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007db0:	bf00      	nop
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b088      	sub	sp, #32
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	e853 3f00 	ldrex	r3, [r3]
 8007dcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dd4:	61fb      	str	r3, [r7, #28]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	61bb      	str	r3, [r7, #24]
 8007de0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de2:	6979      	ldr	r1, [r7, #20]
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	e841 2300 	strex	r3, r2, [r1]
 8007dea:	613b      	str	r3, [r7, #16]
   return(result);
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1e6      	bne.n	8007dc0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2220      	movs	r2, #32
 8007df6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7ff f81f 	bl	8006e44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e06:	bf00      	nop
 8007e08:	3720      	adds	r7, #32
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b083      	sub	sp, #12
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007e16:	bf00      	nop
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b083      	sub	sp, #12
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b083      	sub	sp, #12
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007e3e:	bf00      	nop
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b085      	sub	sp, #20
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d101      	bne.n	8007e60 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	e027      	b.n	8007eb0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2224      	movs	r2, #36	@ 0x24
 8007e6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 0201 	bic.w	r2, r2, #1
 8007e86:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007e8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d101      	bne.n	8007ed4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	e02d      	b.n	8007f30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2224      	movs	r2, #36	@ 0x24
 8007ee0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f022 0201 	bic.w	r2, r2, #1
 8007efa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f84f 	bl	8007fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2220      	movs	r2, #32
 8007f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d101      	bne.n	8007f50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	e02d      	b.n	8007fac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2224      	movs	r2, #36	@ 0x24
 8007f5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f022 0201 	bic.w	r2, r2, #1
 8007f76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	430a      	orrs	r2, r1
 8007f8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f811 	bl	8007fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2220      	movs	r2, #32
 8007f9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d108      	bne.n	8007fd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007fd4:	e031      	b.n	800803a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007fd6:	2310      	movs	r3, #16
 8007fd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007fda:	2310      	movs	r3, #16
 8007fdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	0e5b      	lsrs	r3, r3, #25
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	f003 0307 	and.w	r3, r3, #7
 8007fec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	0f5b      	lsrs	r3, r3, #29
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	f003 0307 	and.w	r3, r3, #7
 8007ffc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
 8008000:	7b3a      	ldrb	r2, [r7, #12]
 8008002:	4911      	ldr	r1, [pc, #68]	@ (8008048 <UARTEx_SetNbDataToProcess+0x94>)
 8008004:	5c8a      	ldrb	r2, [r1, r2]
 8008006:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800800a:	7b3a      	ldrb	r2, [r7, #12]
 800800c:	490f      	ldr	r1, [pc, #60]	@ (800804c <UARTEx_SetNbDataToProcess+0x98>)
 800800e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008010:	fb93 f3f2 	sdiv	r3, r3, r2
 8008014:	b29a      	uxth	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800801c:	7bfb      	ldrb	r3, [r7, #15]
 800801e:	7b7a      	ldrb	r2, [r7, #13]
 8008020:	4909      	ldr	r1, [pc, #36]	@ (8008048 <UARTEx_SetNbDataToProcess+0x94>)
 8008022:	5c8a      	ldrb	r2, [r1, r2]
 8008024:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008028:	7b7a      	ldrb	r2, [r7, #13]
 800802a:	4908      	ldr	r1, [pc, #32]	@ (800804c <UARTEx_SetNbDataToProcess+0x98>)
 800802c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800802e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008032:	b29a      	uxth	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800803a:	bf00      	nop
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	08008a8c 	.word	0x08008a8c
 800804c:	08008a94 	.word	0x08008a94

08008050 <siprintf>:
 8008050:	b40e      	push	{r1, r2, r3}
 8008052:	b510      	push	{r4, lr}
 8008054:	b09d      	sub	sp, #116	@ 0x74
 8008056:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008058:	9002      	str	r0, [sp, #8]
 800805a:	9006      	str	r0, [sp, #24]
 800805c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008060:	480a      	ldr	r0, [pc, #40]	@ (800808c <siprintf+0x3c>)
 8008062:	9107      	str	r1, [sp, #28]
 8008064:	9104      	str	r1, [sp, #16]
 8008066:	490a      	ldr	r1, [pc, #40]	@ (8008090 <siprintf+0x40>)
 8008068:	f853 2b04 	ldr.w	r2, [r3], #4
 800806c:	9105      	str	r1, [sp, #20]
 800806e:	2400      	movs	r4, #0
 8008070:	a902      	add	r1, sp, #8
 8008072:	6800      	ldr	r0, [r0, #0]
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008078:	f000 f9a2 	bl	80083c0 <_svfiprintf_r>
 800807c:	9b02      	ldr	r3, [sp, #8]
 800807e:	701c      	strb	r4, [r3, #0]
 8008080:	b01d      	add	sp, #116	@ 0x74
 8008082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008086:	b003      	add	sp, #12
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	24000010 	.word	0x24000010
 8008090:	ffff0208 	.word	0xffff0208

08008094 <memset>:
 8008094:	4402      	add	r2, r0
 8008096:	4603      	mov	r3, r0
 8008098:	4293      	cmp	r3, r2
 800809a:	d100      	bne.n	800809e <memset+0xa>
 800809c:	4770      	bx	lr
 800809e:	f803 1b01 	strb.w	r1, [r3], #1
 80080a2:	e7f9      	b.n	8008098 <memset+0x4>

080080a4 <__errno>:
 80080a4:	4b01      	ldr	r3, [pc, #4]	@ (80080ac <__errno+0x8>)
 80080a6:	6818      	ldr	r0, [r3, #0]
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	24000010 	.word	0x24000010

080080b0 <__libc_init_array>:
 80080b0:	b570      	push	{r4, r5, r6, lr}
 80080b2:	4d0d      	ldr	r5, [pc, #52]	@ (80080e8 <__libc_init_array+0x38>)
 80080b4:	4c0d      	ldr	r4, [pc, #52]	@ (80080ec <__libc_init_array+0x3c>)
 80080b6:	1b64      	subs	r4, r4, r5
 80080b8:	10a4      	asrs	r4, r4, #2
 80080ba:	2600      	movs	r6, #0
 80080bc:	42a6      	cmp	r6, r4
 80080be:	d109      	bne.n	80080d4 <__libc_init_array+0x24>
 80080c0:	4d0b      	ldr	r5, [pc, #44]	@ (80080f0 <__libc_init_array+0x40>)
 80080c2:	4c0c      	ldr	r4, [pc, #48]	@ (80080f4 <__libc_init_array+0x44>)
 80080c4:	f000 fc64 	bl	8008990 <_init>
 80080c8:	1b64      	subs	r4, r4, r5
 80080ca:	10a4      	asrs	r4, r4, #2
 80080cc:	2600      	movs	r6, #0
 80080ce:	42a6      	cmp	r6, r4
 80080d0:	d105      	bne.n	80080de <__libc_init_array+0x2e>
 80080d2:	bd70      	pop	{r4, r5, r6, pc}
 80080d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080d8:	4798      	blx	r3
 80080da:	3601      	adds	r6, #1
 80080dc:	e7ee      	b.n	80080bc <__libc_init_array+0xc>
 80080de:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e2:	4798      	blx	r3
 80080e4:	3601      	adds	r6, #1
 80080e6:	e7f2      	b.n	80080ce <__libc_init_array+0x1e>
 80080e8:	08008ad8 	.word	0x08008ad8
 80080ec:	08008ad8 	.word	0x08008ad8
 80080f0:	08008ad8 	.word	0x08008ad8
 80080f4:	08008adc 	.word	0x08008adc

080080f8 <__retarget_lock_acquire_recursive>:
 80080f8:	4770      	bx	lr

080080fa <__retarget_lock_release_recursive>:
 80080fa:	4770      	bx	lr

080080fc <memcpy>:
 80080fc:	440a      	add	r2, r1
 80080fe:	4291      	cmp	r1, r2
 8008100:	f100 33ff 	add.w	r3, r0, #4294967295
 8008104:	d100      	bne.n	8008108 <memcpy+0xc>
 8008106:	4770      	bx	lr
 8008108:	b510      	push	{r4, lr}
 800810a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800810e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008112:	4291      	cmp	r1, r2
 8008114:	d1f9      	bne.n	800810a <memcpy+0xe>
 8008116:	bd10      	pop	{r4, pc}

08008118 <_free_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	4605      	mov	r5, r0
 800811c:	2900      	cmp	r1, #0
 800811e:	d041      	beq.n	80081a4 <_free_r+0x8c>
 8008120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008124:	1f0c      	subs	r4, r1, #4
 8008126:	2b00      	cmp	r3, #0
 8008128:	bfb8      	it	lt
 800812a:	18e4      	addlt	r4, r4, r3
 800812c:	f000 f8e0 	bl	80082f0 <__malloc_lock>
 8008130:	4a1d      	ldr	r2, [pc, #116]	@ (80081a8 <_free_r+0x90>)
 8008132:	6813      	ldr	r3, [r2, #0]
 8008134:	b933      	cbnz	r3, 8008144 <_free_r+0x2c>
 8008136:	6063      	str	r3, [r4, #4]
 8008138:	6014      	str	r4, [r2, #0]
 800813a:	4628      	mov	r0, r5
 800813c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008140:	f000 b8dc 	b.w	80082fc <__malloc_unlock>
 8008144:	42a3      	cmp	r3, r4
 8008146:	d908      	bls.n	800815a <_free_r+0x42>
 8008148:	6820      	ldr	r0, [r4, #0]
 800814a:	1821      	adds	r1, r4, r0
 800814c:	428b      	cmp	r3, r1
 800814e:	bf01      	itttt	eq
 8008150:	6819      	ldreq	r1, [r3, #0]
 8008152:	685b      	ldreq	r3, [r3, #4]
 8008154:	1809      	addeq	r1, r1, r0
 8008156:	6021      	streq	r1, [r4, #0]
 8008158:	e7ed      	b.n	8008136 <_free_r+0x1e>
 800815a:	461a      	mov	r2, r3
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	b10b      	cbz	r3, 8008164 <_free_r+0x4c>
 8008160:	42a3      	cmp	r3, r4
 8008162:	d9fa      	bls.n	800815a <_free_r+0x42>
 8008164:	6811      	ldr	r1, [r2, #0]
 8008166:	1850      	adds	r0, r2, r1
 8008168:	42a0      	cmp	r0, r4
 800816a:	d10b      	bne.n	8008184 <_free_r+0x6c>
 800816c:	6820      	ldr	r0, [r4, #0]
 800816e:	4401      	add	r1, r0
 8008170:	1850      	adds	r0, r2, r1
 8008172:	4283      	cmp	r3, r0
 8008174:	6011      	str	r1, [r2, #0]
 8008176:	d1e0      	bne.n	800813a <_free_r+0x22>
 8008178:	6818      	ldr	r0, [r3, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	6053      	str	r3, [r2, #4]
 800817e:	4408      	add	r0, r1
 8008180:	6010      	str	r0, [r2, #0]
 8008182:	e7da      	b.n	800813a <_free_r+0x22>
 8008184:	d902      	bls.n	800818c <_free_r+0x74>
 8008186:	230c      	movs	r3, #12
 8008188:	602b      	str	r3, [r5, #0]
 800818a:	e7d6      	b.n	800813a <_free_r+0x22>
 800818c:	6820      	ldr	r0, [r4, #0]
 800818e:	1821      	adds	r1, r4, r0
 8008190:	428b      	cmp	r3, r1
 8008192:	bf04      	itt	eq
 8008194:	6819      	ldreq	r1, [r3, #0]
 8008196:	685b      	ldreq	r3, [r3, #4]
 8008198:	6063      	str	r3, [r4, #4]
 800819a:	bf04      	itt	eq
 800819c:	1809      	addeq	r1, r1, r0
 800819e:	6021      	streq	r1, [r4, #0]
 80081a0:	6054      	str	r4, [r2, #4]
 80081a2:	e7ca      	b.n	800813a <_free_r+0x22>
 80081a4:	bd38      	pop	{r3, r4, r5, pc}
 80081a6:	bf00      	nop
 80081a8:	240002ac 	.word	0x240002ac

080081ac <sbrk_aligned>:
 80081ac:	b570      	push	{r4, r5, r6, lr}
 80081ae:	4e0f      	ldr	r6, [pc, #60]	@ (80081ec <sbrk_aligned+0x40>)
 80081b0:	460c      	mov	r4, r1
 80081b2:	6831      	ldr	r1, [r6, #0]
 80081b4:	4605      	mov	r5, r0
 80081b6:	b911      	cbnz	r1, 80081be <sbrk_aligned+0x12>
 80081b8:	f000 fba4 	bl	8008904 <_sbrk_r>
 80081bc:	6030      	str	r0, [r6, #0]
 80081be:	4621      	mov	r1, r4
 80081c0:	4628      	mov	r0, r5
 80081c2:	f000 fb9f 	bl	8008904 <_sbrk_r>
 80081c6:	1c43      	adds	r3, r0, #1
 80081c8:	d103      	bne.n	80081d2 <sbrk_aligned+0x26>
 80081ca:	f04f 34ff 	mov.w	r4, #4294967295
 80081ce:	4620      	mov	r0, r4
 80081d0:	bd70      	pop	{r4, r5, r6, pc}
 80081d2:	1cc4      	adds	r4, r0, #3
 80081d4:	f024 0403 	bic.w	r4, r4, #3
 80081d8:	42a0      	cmp	r0, r4
 80081da:	d0f8      	beq.n	80081ce <sbrk_aligned+0x22>
 80081dc:	1a21      	subs	r1, r4, r0
 80081de:	4628      	mov	r0, r5
 80081e0:	f000 fb90 	bl	8008904 <_sbrk_r>
 80081e4:	3001      	adds	r0, #1
 80081e6:	d1f2      	bne.n	80081ce <sbrk_aligned+0x22>
 80081e8:	e7ef      	b.n	80081ca <sbrk_aligned+0x1e>
 80081ea:	bf00      	nop
 80081ec:	240002a8 	.word	0x240002a8

080081f0 <_malloc_r>:
 80081f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081f4:	1ccd      	adds	r5, r1, #3
 80081f6:	f025 0503 	bic.w	r5, r5, #3
 80081fa:	3508      	adds	r5, #8
 80081fc:	2d0c      	cmp	r5, #12
 80081fe:	bf38      	it	cc
 8008200:	250c      	movcc	r5, #12
 8008202:	2d00      	cmp	r5, #0
 8008204:	4606      	mov	r6, r0
 8008206:	db01      	blt.n	800820c <_malloc_r+0x1c>
 8008208:	42a9      	cmp	r1, r5
 800820a:	d904      	bls.n	8008216 <_malloc_r+0x26>
 800820c:	230c      	movs	r3, #12
 800820e:	6033      	str	r3, [r6, #0]
 8008210:	2000      	movs	r0, #0
 8008212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008216:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80082ec <_malloc_r+0xfc>
 800821a:	f000 f869 	bl	80082f0 <__malloc_lock>
 800821e:	f8d8 3000 	ldr.w	r3, [r8]
 8008222:	461c      	mov	r4, r3
 8008224:	bb44      	cbnz	r4, 8008278 <_malloc_r+0x88>
 8008226:	4629      	mov	r1, r5
 8008228:	4630      	mov	r0, r6
 800822a:	f7ff ffbf 	bl	80081ac <sbrk_aligned>
 800822e:	1c43      	adds	r3, r0, #1
 8008230:	4604      	mov	r4, r0
 8008232:	d158      	bne.n	80082e6 <_malloc_r+0xf6>
 8008234:	f8d8 4000 	ldr.w	r4, [r8]
 8008238:	4627      	mov	r7, r4
 800823a:	2f00      	cmp	r7, #0
 800823c:	d143      	bne.n	80082c6 <_malloc_r+0xd6>
 800823e:	2c00      	cmp	r4, #0
 8008240:	d04b      	beq.n	80082da <_malloc_r+0xea>
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	4639      	mov	r1, r7
 8008246:	4630      	mov	r0, r6
 8008248:	eb04 0903 	add.w	r9, r4, r3
 800824c:	f000 fb5a 	bl	8008904 <_sbrk_r>
 8008250:	4581      	cmp	r9, r0
 8008252:	d142      	bne.n	80082da <_malloc_r+0xea>
 8008254:	6821      	ldr	r1, [r4, #0]
 8008256:	1a6d      	subs	r5, r5, r1
 8008258:	4629      	mov	r1, r5
 800825a:	4630      	mov	r0, r6
 800825c:	f7ff ffa6 	bl	80081ac <sbrk_aligned>
 8008260:	3001      	adds	r0, #1
 8008262:	d03a      	beq.n	80082da <_malloc_r+0xea>
 8008264:	6823      	ldr	r3, [r4, #0]
 8008266:	442b      	add	r3, r5
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	f8d8 3000 	ldr.w	r3, [r8]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	bb62      	cbnz	r2, 80082cc <_malloc_r+0xdc>
 8008272:	f8c8 7000 	str.w	r7, [r8]
 8008276:	e00f      	b.n	8008298 <_malloc_r+0xa8>
 8008278:	6822      	ldr	r2, [r4, #0]
 800827a:	1b52      	subs	r2, r2, r5
 800827c:	d420      	bmi.n	80082c0 <_malloc_r+0xd0>
 800827e:	2a0b      	cmp	r2, #11
 8008280:	d917      	bls.n	80082b2 <_malloc_r+0xc2>
 8008282:	1961      	adds	r1, r4, r5
 8008284:	42a3      	cmp	r3, r4
 8008286:	6025      	str	r5, [r4, #0]
 8008288:	bf18      	it	ne
 800828a:	6059      	strne	r1, [r3, #4]
 800828c:	6863      	ldr	r3, [r4, #4]
 800828e:	bf08      	it	eq
 8008290:	f8c8 1000 	streq.w	r1, [r8]
 8008294:	5162      	str	r2, [r4, r5]
 8008296:	604b      	str	r3, [r1, #4]
 8008298:	4630      	mov	r0, r6
 800829a:	f000 f82f 	bl	80082fc <__malloc_unlock>
 800829e:	f104 000b 	add.w	r0, r4, #11
 80082a2:	1d23      	adds	r3, r4, #4
 80082a4:	f020 0007 	bic.w	r0, r0, #7
 80082a8:	1ac2      	subs	r2, r0, r3
 80082aa:	bf1c      	itt	ne
 80082ac:	1a1b      	subne	r3, r3, r0
 80082ae:	50a3      	strne	r3, [r4, r2]
 80082b0:	e7af      	b.n	8008212 <_malloc_r+0x22>
 80082b2:	6862      	ldr	r2, [r4, #4]
 80082b4:	42a3      	cmp	r3, r4
 80082b6:	bf0c      	ite	eq
 80082b8:	f8c8 2000 	streq.w	r2, [r8]
 80082bc:	605a      	strne	r2, [r3, #4]
 80082be:	e7eb      	b.n	8008298 <_malloc_r+0xa8>
 80082c0:	4623      	mov	r3, r4
 80082c2:	6864      	ldr	r4, [r4, #4]
 80082c4:	e7ae      	b.n	8008224 <_malloc_r+0x34>
 80082c6:	463c      	mov	r4, r7
 80082c8:	687f      	ldr	r7, [r7, #4]
 80082ca:	e7b6      	b.n	800823a <_malloc_r+0x4a>
 80082cc:	461a      	mov	r2, r3
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	42a3      	cmp	r3, r4
 80082d2:	d1fb      	bne.n	80082cc <_malloc_r+0xdc>
 80082d4:	2300      	movs	r3, #0
 80082d6:	6053      	str	r3, [r2, #4]
 80082d8:	e7de      	b.n	8008298 <_malloc_r+0xa8>
 80082da:	230c      	movs	r3, #12
 80082dc:	6033      	str	r3, [r6, #0]
 80082de:	4630      	mov	r0, r6
 80082e0:	f000 f80c 	bl	80082fc <__malloc_unlock>
 80082e4:	e794      	b.n	8008210 <_malloc_r+0x20>
 80082e6:	6005      	str	r5, [r0, #0]
 80082e8:	e7d6      	b.n	8008298 <_malloc_r+0xa8>
 80082ea:	bf00      	nop
 80082ec:	240002ac 	.word	0x240002ac

080082f0 <__malloc_lock>:
 80082f0:	4801      	ldr	r0, [pc, #4]	@ (80082f8 <__malloc_lock+0x8>)
 80082f2:	f7ff bf01 	b.w	80080f8 <__retarget_lock_acquire_recursive>
 80082f6:	bf00      	nop
 80082f8:	240002a4 	.word	0x240002a4

080082fc <__malloc_unlock>:
 80082fc:	4801      	ldr	r0, [pc, #4]	@ (8008304 <__malloc_unlock+0x8>)
 80082fe:	f7ff befc 	b.w	80080fa <__retarget_lock_release_recursive>
 8008302:	bf00      	nop
 8008304:	240002a4 	.word	0x240002a4

08008308 <__ssputs_r>:
 8008308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800830c:	688e      	ldr	r6, [r1, #8]
 800830e:	461f      	mov	r7, r3
 8008310:	42be      	cmp	r6, r7
 8008312:	680b      	ldr	r3, [r1, #0]
 8008314:	4682      	mov	sl, r0
 8008316:	460c      	mov	r4, r1
 8008318:	4690      	mov	r8, r2
 800831a:	d82d      	bhi.n	8008378 <__ssputs_r+0x70>
 800831c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008320:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008324:	d026      	beq.n	8008374 <__ssputs_r+0x6c>
 8008326:	6965      	ldr	r5, [r4, #20]
 8008328:	6909      	ldr	r1, [r1, #16]
 800832a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800832e:	eba3 0901 	sub.w	r9, r3, r1
 8008332:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008336:	1c7b      	adds	r3, r7, #1
 8008338:	444b      	add	r3, r9
 800833a:	106d      	asrs	r5, r5, #1
 800833c:	429d      	cmp	r5, r3
 800833e:	bf38      	it	cc
 8008340:	461d      	movcc	r5, r3
 8008342:	0553      	lsls	r3, r2, #21
 8008344:	d527      	bpl.n	8008396 <__ssputs_r+0x8e>
 8008346:	4629      	mov	r1, r5
 8008348:	f7ff ff52 	bl	80081f0 <_malloc_r>
 800834c:	4606      	mov	r6, r0
 800834e:	b360      	cbz	r0, 80083aa <__ssputs_r+0xa2>
 8008350:	6921      	ldr	r1, [r4, #16]
 8008352:	464a      	mov	r2, r9
 8008354:	f7ff fed2 	bl	80080fc <memcpy>
 8008358:	89a3      	ldrh	r3, [r4, #12]
 800835a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800835e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008362:	81a3      	strh	r3, [r4, #12]
 8008364:	6126      	str	r6, [r4, #16]
 8008366:	6165      	str	r5, [r4, #20]
 8008368:	444e      	add	r6, r9
 800836a:	eba5 0509 	sub.w	r5, r5, r9
 800836e:	6026      	str	r6, [r4, #0]
 8008370:	60a5      	str	r5, [r4, #8]
 8008372:	463e      	mov	r6, r7
 8008374:	42be      	cmp	r6, r7
 8008376:	d900      	bls.n	800837a <__ssputs_r+0x72>
 8008378:	463e      	mov	r6, r7
 800837a:	6820      	ldr	r0, [r4, #0]
 800837c:	4632      	mov	r2, r6
 800837e:	4641      	mov	r1, r8
 8008380:	f000 faa6 	bl	80088d0 <memmove>
 8008384:	68a3      	ldr	r3, [r4, #8]
 8008386:	1b9b      	subs	r3, r3, r6
 8008388:	60a3      	str	r3, [r4, #8]
 800838a:	6823      	ldr	r3, [r4, #0]
 800838c:	4433      	add	r3, r6
 800838e:	6023      	str	r3, [r4, #0]
 8008390:	2000      	movs	r0, #0
 8008392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008396:	462a      	mov	r2, r5
 8008398:	f000 fac4 	bl	8008924 <_realloc_r>
 800839c:	4606      	mov	r6, r0
 800839e:	2800      	cmp	r0, #0
 80083a0:	d1e0      	bne.n	8008364 <__ssputs_r+0x5c>
 80083a2:	6921      	ldr	r1, [r4, #16]
 80083a4:	4650      	mov	r0, sl
 80083a6:	f7ff feb7 	bl	8008118 <_free_r>
 80083aa:	230c      	movs	r3, #12
 80083ac:	f8ca 3000 	str.w	r3, [sl]
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083b6:	81a3      	strh	r3, [r4, #12]
 80083b8:	f04f 30ff 	mov.w	r0, #4294967295
 80083bc:	e7e9      	b.n	8008392 <__ssputs_r+0x8a>
	...

080083c0 <_svfiprintf_r>:
 80083c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c4:	4698      	mov	r8, r3
 80083c6:	898b      	ldrh	r3, [r1, #12]
 80083c8:	061b      	lsls	r3, r3, #24
 80083ca:	b09d      	sub	sp, #116	@ 0x74
 80083cc:	4607      	mov	r7, r0
 80083ce:	460d      	mov	r5, r1
 80083d0:	4614      	mov	r4, r2
 80083d2:	d510      	bpl.n	80083f6 <_svfiprintf_r+0x36>
 80083d4:	690b      	ldr	r3, [r1, #16]
 80083d6:	b973      	cbnz	r3, 80083f6 <_svfiprintf_r+0x36>
 80083d8:	2140      	movs	r1, #64	@ 0x40
 80083da:	f7ff ff09 	bl	80081f0 <_malloc_r>
 80083de:	6028      	str	r0, [r5, #0]
 80083e0:	6128      	str	r0, [r5, #16]
 80083e2:	b930      	cbnz	r0, 80083f2 <_svfiprintf_r+0x32>
 80083e4:	230c      	movs	r3, #12
 80083e6:	603b      	str	r3, [r7, #0]
 80083e8:	f04f 30ff 	mov.w	r0, #4294967295
 80083ec:	b01d      	add	sp, #116	@ 0x74
 80083ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f2:	2340      	movs	r3, #64	@ 0x40
 80083f4:	616b      	str	r3, [r5, #20]
 80083f6:	2300      	movs	r3, #0
 80083f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80083fa:	2320      	movs	r3, #32
 80083fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008400:	f8cd 800c 	str.w	r8, [sp, #12]
 8008404:	2330      	movs	r3, #48	@ 0x30
 8008406:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80085a4 <_svfiprintf_r+0x1e4>
 800840a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800840e:	f04f 0901 	mov.w	r9, #1
 8008412:	4623      	mov	r3, r4
 8008414:	469a      	mov	sl, r3
 8008416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800841a:	b10a      	cbz	r2, 8008420 <_svfiprintf_r+0x60>
 800841c:	2a25      	cmp	r2, #37	@ 0x25
 800841e:	d1f9      	bne.n	8008414 <_svfiprintf_r+0x54>
 8008420:	ebba 0b04 	subs.w	fp, sl, r4
 8008424:	d00b      	beq.n	800843e <_svfiprintf_r+0x7e>
 8008426:	465b      	mov	r3, fp
 8008428:	4622      	mov	r2, r4
 800842a:	4629      	mov	r1, r5
 800842c:	4638      	mov	r0, r7
 800842e:	f7ff ff6b 	bl	8008308 <__ssputs_r>
 8008432:	3001      	adds	r0, #1
 8008434:	f000 80a7 	beq.w	8008586 <_svfiprintf_r+0x1c6>
 8008438:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800843a:	445a      	add	r2, fp
 800843c:	9209      	str	r2, [sp, #36]	@ 0x24
 800843e:	f89a 3000 	ldrb.w	r3, [sl]
 8008442:	2b00      	cmp	r3, #0
 8008444:	f000 809f 	beq.w	8008586 <_svfiprintf_r+0x1c6>
 8008448:	2300      	movs	r3, #0
 800844a:	f04f 32ff 	mov.w	r2, #4294967295
 800844e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008452:	f10a 0a01 	add.w	sl, sl, #1
 8008456:	9304      	str	r3, [sp, #16]
 8008458:	9307      	str	r3, [sp, #28]
 800845a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800845e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008460:	4654      	mov	r4, sl
 8008462:	2205      	movs	r2, #5
 8008464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008468:	484e      	ldr	r0, [pc, #312]	@ (80085a4 <_svfiprintf_r+0x1e4>)
 800846a:	f7f7 ff41 	bl	80002f0 <memchr>
 800846e:	9a04      	ldr	r2, [sp, #16]
 8008470:	b9d8      	cbnz	r0, 80084aa <_svfiprintf_r+0xea>
 8008472:	06d0      	lsls	r0, r2, #27
 8008474:	bf44      	itt	mi
 8008476:	2320      	movmi	r3, #32
 8008478:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800847c:	0711      	lsls	r1, r2, #28
 800847e:	bf44      	itt	mi
 8008480:	232b      	movmi	r3, #43	@ 0x2b
 8008482:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008486:	f89a 3000 	ldrb.w	r3, [sl]
 800848a:	2b2a      	cmp	r3, #42	@ 0x2a
 800848c:	d015      	beq.n	80084ba <_svfiprintf_r+0xfa>
 800848e:	9a07      	ldr	r2, [sp, #28]
 8008490:	4654      	mov	r4, sl
 8008492:	2000      	movs	r0, #0
 8008494:	f04f 0c0a 	mov.w	ip, #10
 8008498:	4621      	mov	r1, r4
 800849a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800849e:	3b30      	subs	r3, #48	@ 0x30
 80084a0:	2b09      	cmp	r3, #9
 80084a2:	d94b      	bls.n	800853c <_svfiprintf_r+0x17c>
 80084a4:	b1b0      	cbz	r0, 80084d4 <_svfiprintf_r+0x114>
 80084a6:	9207      	str	r2, [sp, #28]
 80084a8:	e014      	b.n	80084d4 <_svfiprintf_r+0x114>
 80084aa:	eba0 0308 	sub.w	r3, r0, r8
 80084ae:	fa09 f303 	lsl.w	r3, r9, r3
 80084b2:	4313      	orrs	r3, r2
 80084b4:	9304      	str	r3, [sp, #16]
 80084b6:	46a2      	mov	sl, r4
 80084b8:	e7d2      	b.n	8008460 <_svfiprintf_r+0xa0>
 80084ba:	9b03      	ldr	r3, [sp, #12]
 80084bc:	1d19      	adds	r1, r3, #4
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	9103      	str	r1, [sp, #12]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	bfbb      	ittet	lt
 80084c6:	425b      	neglt	r3, r3
 80084c8:	f042 0202 	orrlt.w	r2, r2, #2
 80084cc:	9307      	strge	r3, [sp, #28]
 80084ce:	9307      	strlt	r3, [sp, #28]
 80084d0:	bfb8      	it	lt
 80084d2:	9204      	strlt	r2, [sp, #16]
 80084d4:	7823      	ldrb	r3, [r4, #0]
 80084d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80084d8:	d10a      	bne.n	80084f0 <_svfiprintf_r+0x130>
 80084da:	7863      	ldrb	r3, [r4, #1]
 80084dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80084de:	d132      	bne.n	8008546 <_svfiprintf_r+0x186>
 80084e0:	9b03      	ldr	r3, [sp, #12]
 80084e2:	1d1a      	adds	r2, r3, #4
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	9203      	str	r2, [sp, #12]
 80084e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084ec:	3402      	adds	r4, #2
 80084ee:	9305      	str	r3, [sp, #20]
 80084f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80085b4 <_svfiprintf_r+0x1f4>
 80084f4:	7821      	ldrb	r1, [r4, #0]
 80084f6:	2203      	movs	r2, #3
 80084f8:	4650      	mov	r0, sl
 80084fa:	f7f7 fef9 	bl	80002f0 <memchr>
 80084fe:	b138      	cbz	r0, 8008510 <_svfiprintf_r+0x150>
 8008500:	9b04      	ldr	r3, [sp, #16]
 8008502:	eba0 000a 	sub.w	r0, r0, sl
 8008506:	2240      	movs	r2, #64	@ 0x40
 8008508:	4082      	lsls	r2, r0
 800850a:	4313      	orrs	r3, r2
 800850c:	3401      	adds	r4, #1
 800850e:	9304      	str	r3, [sp, #16]
 8008510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008514:	4824      	ldr	r0, [pc, #144]	@ (80085a8 <_svfiprintf_r+0x1e8>)
 8008516:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800851a:	2206      	movs	r2, #6
 800851c:	f7f7 fee8 	bl	80002f0 <memchr>
 8008520:	2800      	cmp	r0, #0
 8008522:	d036      	beq.n	8008592 <_svfiprintf_r+0x1d2>
 8008524:	4b21      	ldr	r3, [pc, #132]	@ (80085ac <_svfiprintf_r+0x1ec>)
 8008526:	bb1b      	cbnz	r3, 8008570 <_svfiprintf_r+0x1b0>
 8008528:	9b03      	ldr	r3, [sp, #12]
 800852a:	3307      	adds	r3, #7
 800852c:	f023 0307 	bic.w	r3, r3, #7
 8008530:	3308      	adds	r3, #8
 8008532:	9303      	str	r3, [sp, #12]
 8008534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008536:	4433      	add	r3, r6
 8008538:	9309      	str	r3, [sp, #36]	@ 0x24
 800853a:	e76a      	b.n	8008412 <_svfiprintf_r+0x52>
 800853c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008540:	460c      	mov	r4, r1
 8008542:	2001      	movs	r0, #1
 8008544:	e7a8      	b.n	8008498 <_svfiprintf_r+0xd8>
 8008546:	2300      	movs	r3, #0
 8008548:	3401      	adds	r4, #1
 800854a:	9305      	str	r3, [sp, #20]
 800854c:	4619      	mov	r1, r3
 800854e:	f04f 0c0a 	mov.w	ip, #10
 8008552:	4620      	mov	r0, r4
 8008554:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008558:	3a30      	subs	r2, #48	@ 0x30
 800855a:	2a09      	cmp	r2, #9
 800855c:	d903      	bls.n	8008566 <_svfiprintf_r+0x1a6>
 800855e:	2b00      	cmp	r3, #0
 8008560:	d0c6      	beq.n	80084f0 <_svfiprintf_r+0x130>
 8008562:	9105      	str	r1, [sp, #20]
 8008564:	e7c4      	b.n	80084f0 <_svfiprintf_r+0x130>
 8008566:	fb0c 2101 	mla	r1, ip, r1, r2
 800856a:	4604      	mov	r4, r0
 800856c:	2301      	movs	r3, #1
 800856e:	e7f0      	b.n	8008552 <_svfiprintf_r+0x192>
 8008570:	ab03      	add	r3, sp, #12
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	462a      	mov	r2, r5
 8008576:	4b0e      	ldr	r3, [pc, #56]	@ (80085b0 <_svfiprintf_r+0x1f0>)
 8008578:	a904      	add	r1, sp, #16
 800857a:	4638      	mov	r0, r7
 800857c:	f3af 8000 	nop.w
 8008580:	1c42      	adds	r2, r0, #1
 8008582:	4606      	mov	r6, r0
 8008584:	d1d6      	bne.n	8008534 <_svfiprintf_r+0x174>
 8008586:	89ab      	ldrh	r3, [r5, #12]
 8008588:	065b      	lsls	r3, r3, #25
 800858a:	f53f af2d 	bmi.w	80083e8 <_svfiprintf_r+0x28>
 800858e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008590:	e72c      	b.n	80083ec <_svfiprintf_r+0x2c>
 8008592:	ab03      	add	r3, sp, #12
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	462a      	mov	r2, r5
 8008598:	4b05      	ldr	r3, [pc, #20]	@ (80085b0 <_svfiprintf_r+0x1f0>)
 800859a:	a904      	add	r1, sp, #16
 800859c:	4638      	mov	r0, r7
 800859e:	f000 f879 	bl	8008694 <_printf_i>
 80085a2:	e7ed      	b.n	8008580 <_svfiprintf_r+0x1c0>
 80085a4:	08008a9c 	.word	0x08008a9c
 80085a8:	08008aa6 	.word	0x08008aa6
 80085ac:	00000000 	.word	0x00000000
 80085b0:	08008309 	.word	0x08008309
 80085b4:	08008aa2 	.word	0x08008aa2

080085b8 <_printf_common>:
 80085b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085bc:	4616      	mov	r6, r2
 80085be:	4698      	mov	r8, r3
 80085c0:	688a      	ldr	r2, [r1, #8]
 80085c2:	690b      	ldr	r3, [r1, #16]
 80085c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085c8:	4293      	cmp	r3, r2
 80085ca:	bfb8      	it	lt
 80085cc:	4613      	movlt	r3, r2
 80085ce:	6033      	str	r3, [r6, #0]
 80085d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80085d4:	4607      	mov	r7, r0
 80085d6:	460c      	mov	r4, r1
 80085d8:	b10a      	cbz	r2, 80085de <_printf_common+0x26>
 80085da:	3301      	adds	r3, #1
 80085dc:	6033      	str	r3, [r6, #0]
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	0699      	lsls	r1, r3, #26
 80085e2:	bf42      	ittt	mi
 80085e4:	6833      	ldrmi	r3, [r6, #0]
 80085e6:	3302      	addmi	r3, #2
 80085e8:	6033      	strmi	r3, [r6, #0]
 80085ea:	6825      	ldr	r5, [r4, #0]
 80085ec:	f015 0506 	ands.w	r5, r5, #6
 80085f0:	d106      	bne.n	8008600 <_printf_common+0x48>
 80085f2:	f104 0a19 	add.w	sl, r4, #25
 80085f6:	68e3      	ldr	r3, [r4, #12]
 80085f8:	6832      	ldr	r2, [r6, #0]
 80085fa:	1a9b      	subs	r3, r3, r2
 80085fc:	42ab      	cmp	r3, r5
 80085fe:	dc26      	bgt.n	800864e <_printf_common+0x96>
 8008600:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008604:	6822      	ldr	r2, [r4, #0]
 8008606:	3b00      	subs	r3, #0
 8008608:	bf18      	it	ne
 800860a:	2301      	movne	r3, #1
 800860c:	0692      	lsls	r2, r2, #26
 800860e:	d42b      	bmi.n	8008668 <_printf_common+0xb0>
 8008610:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008614:	4641      	mov	r1, r8
 8008616:	4638      	mov	r0, r7
 8008618:	47c8      	blx	r9
 800861a:	3001      	adds	r0, #1
 800861c:	d01e      	beq.n	800865c <_printf_common+0xa4>
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	6922      	ldr	r2, [r4, #16]
 8008622:	f003 0306 	and.w	r3, r3, #6
 8008626:	2b04      	cmp	r3, #4
 8008628:	bf02      	ittt	eq
 800862a:	68e5      	ldreq	r5, [r4, #12]
 800862c:	6833      	ldreq	r3, [r6, #0]
 800862e:	1aed      	subeq	r5, r5, r3
 8008630:	68a3      	ldr	r3, [r4, #8]
 8008632:	bf0c      	ite	eq
 8008634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008638:	2500      	movne	r5, #0
 800863a:	4293      	cmp	r3, r2
 800863c:	bfc4      	itt	gt
 800863e:	1a9b      	subgt	r3, r3, r2
 8008640:	18ed      	addgt	r5, r5, r3
 8008642:	2600      	movs	r6, #0
 8008644:	341a      	adds	r4, #26
 8008646:	42b5      	cmp	r5, r6
 8008648:	d11a      	bne.n	8008680 <_printf_common+0xc8>
 800864a:	2000      	movs	r0, #0
 800864c:	e008      	b.n	8008660 <_printf_common+0xa8>
 800864e:	2301      	movs	r3, #1
 8008650:	4652      	mov	r2, sl
 8008652:	4641      	mov	r1, r8
 8008654:	4638      	mov	r0, r7
 8008656:	47c8      	blx	r9
 8008658:	3001      	adds	r0, #1
 800865a:	d103      	bne.n	8008664 <_printf_common+0xac>
 800865c:	f04f 30ff 	mov.w	r0, #4294967295
 8008660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008664:	3501      	adds	r5, #1
 8008666:	e7c6      	b.n	80085f6 <_printf_common+0x3e>
 8008668:	18e1      	adds	r1, r4, r3
 800866a:	1c5a      	adds	r2, r3, #1
 800866c:	2030      	movs	r0, #48	@ 0x30
 800866e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008672:	4422      	add	r2, r4
 8008674:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008678:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800867c:	3302      	adds	r3, #2
 800867e:	e7c7      	b.n	8008610 <_printf_common+0x58>
 8008680:	2301      	movs	r3, #1
 8008682:	4622      	mov	r2, r4
 8008684:	4641      	mov	r1, r8
 8008686:	4638      	mov	r0, r7
 8008688:	47c8      	blx	r9
 800868a:	3001      	adds	r0, #1
 800868c:	d0e6      	beq.n	800865c <_printf_common+0xa4>
 800868e:	3601      	adds	r6, #1
 8008690:	e7d9      	b.n	8008646 <_printf_common+0x8e>
	...

08008694 <_printf_i>:
 8008694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008698:	7e0f      	ldrb	r7, [r1, #24]
 800869a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800869c:	2f78      	cmp	r7, #120	@ 0x78
 800869e:	4691      	mov	r9, r2
 80086a0:	4680      	mov	r8, r0
 80086a2:	460c      	mov	r4, r1
 80086a4:	469a      	mov	sl, r3
 80086a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80086aa:	d807      	bhi.n	80086bc <_printf_i+0x28>
 80086ac:	2f62      	cmp	r7, #98	@ 0x62
 80086ae:	d80a      	bhi.n	80086c6 <_printf_i+0x32>
 80086b0:	2f00      	cmp	r7, #0
 80086b2:	f000 80d1 	beq.w	8008858 <_printf_i+0x1c4>
 80086b6:	2f58      	cmp	r7, #88	@ 0x58
 80086b8:	f000 80b8 	beq.w	800882c <_printf_i+0x198>
 80086bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80086c4:	e03a      	b.n	800873c <_printf_i+0xa8>
 80086c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80086ca:	2b15      	cmp	r3, #21
 80086cc:	d8f6      	bhi.n	80086bc <_printf_i+0x28>
 80086ce:	a101      	add	r1, pc, #4	@ (adr r1, 80086d4 <_printf_i+0x40>)
 80086d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086d4:	0800872d 	.word	0x0800872d
 80086d8:	08008741 	.word	0x08008741
 80086dc:	080086bd 	.word	0x080086bd
 80086e0:	080086bd 	.word	0x080086bd
 80086e4:	080086bd 	.word	0x080086bd
 80086e8:	080086bd 	.word	0x080086bd
 80086ec:	08008741 	.word	0x08008741
 80086f0:	080086bd 	.word	0x080086bd
 80086f4:	080086bd 	.word	0x080086bd
 80086f8:	080086bd 	.word	0x080086bd
 80086fc:	080086bd 	.word	0x080086bd
 8008700:	0800883f 	.word	0x0800883f
 8008704:	0800876b 	.word	0x0800876b
 8008708:	080087f9 	.word	0x080087f9
 800870c:	080086bd 	.word	0x080086bd
 8008710:	080086bd 	.word	0x080086bd
 8008714:	08008861 	.word	0x08008861
 8008718:	080086bd 	.word	0x080086bd
 800871c:	0800876b 	.word	0x0800876b
 8008720:	080086bd 	.word	0x080086bd
 8008724:	080086bd 	.word	0x080086bd
 8008728:	08008801 	.word	0x08008801
 800872c:	6833      	ldr	r3, [r6, #0]
 800872e:	1d1a      	adds	r2, r3, #4
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6032      	str	r2, [r6, #0]
 8008734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008738:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800873c:	2301      	movs	r3, #1
 800873e:	e09c      	b.n	800887a <_printf_i+0x1e6>
 8008740:	6833      	ldr	r3, [r6, #0]
 8008742:	6820      	ldr	r0, [r4, #0]
 8008744:	1d19      	adds	r1, r3, #4
 8008746:	6031      	str	r1, [r6, #0]
 8008748:	0606      	lsls	r6, r0, #24
 800874a:	d501      	bpl.n	8008750 <_printf_i+0xbc>
 800874c:	681d      	ldr	r5, [r3, #0]
 800874e:	e003      	b.n	8008758 <_printf_i+0xc4>
 8008750:	0645      	lsls	r5, r0, #25
 8008752:	d5fb      	bpl.n	800874c <_printf_i+0xb8>
 8008754:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008758:	2d00      	cmp	r5, #0
 800875a:	da03      	bge.n	8008764 <_printf_i+0xd0>
 800875c:	232d      	movs	r3, #45	@ 0x2d
 800875e:	426d      	negs	r5, r5
 8008760:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008764:	4858      	ldr	r0, [pc, #352]	@ (80088c8 <_printf_i+0x234>)
 8008766:	230a      	movs	r3, #10
 8008768:	e011      	b.n	800878e <_printf_i+0xfa>
 800876a:	6821      	ldr	r1, [r4, #0]
 800876c:	6833      	ldr	r3, [r6, #0]
 800876e:	0608      	lsls	r0, r1, #24
 8008770:	f853 5b04 	ldr.w	r5, [r3], #4
 8008774:	d402      	bmi.n	800877c <_printf_i+0xe8>
 8008776:	0649      	lsls	r1, r1, #25
 8008778:	bf48      	it	mi
 800877a:	b2ad      	uxthmi	r5, r5
 800877c:	2f6f      	cmp	r7, #111	@ 0x6f
 800877e:	4852      	ldr	r0, [pc, #328]	@ (80088c8 <_printf_i+0x234>)
 8008780:	6033      	str	r3, [r6, #0]
 8008782:	bf14      	ite	ne
 8008784:	230a      	movne	r3, #10
 8008786:	2308      	moveq	r3, #8
 8008788:	2100      	movs	r1, #0
 800878a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800878e:	6866      	ldr	r6, [r4, #4]
 8008790:	60a6      	str	r6, [r4, #8]
 8008792:	2e00      	cmp	r6, #0
 8008794:	db05      	blt.n	80087a2 <_printf_i+0x10e>
 8008796:	6821      	ldr	r1, [r4, #0]
 8008798:	432e      	orrs	r6, r5
 800879a:	f021 0104 	bic.w	r1, r1, #4
 800879e:	6021      	str	r1, [r4, #0]
 80087a0:	d04b      	beq.n	800883a <_printf_i+0x1a6>
 80087a2:	4616      	mov	r6, r2
 80087a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80087a8:	fb03 5711 	mls	r7, r3, r1, r5
 80087ac:	5dc7      	ldrb	r7, [r0, r7]
 80087ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087b2:	462f      	mov	r7, r5
 80087b4:	42bb      	cmp	r3, r7
 80087b6:	460d      	mov	r5, r1
 80087b8:	d9f4      	bls.n	80087a4 <_printf_i+0x110>
 80087ba:	2b08      	cmp	r3, #8
 80087bc:	d10b      	bne.n	80087d6 <_printf_i+0x142>
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	07df      	lsls	r7, r3, #31
 80087c2:	d508      	bpl.n	80087d6 <_printf_i+0x142>
 80087c4:	6923      	ldr	r3, [r4, #16]
 80087c6:	6861      	ldr	r1, [r4, #4]
 80087c8:	4299      	cmp	r1, r3
 80087ca:	bfde      	ittt	le
 80087cc:	2330      	movle	r3, #48	@ 0x30
 80087ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80087d6:	1b92      	subs	r2, r2, r6
 80087d8:	6122      	str	r2, [r4, #16]
 80087da:	f8cd a000 	str.w	sl, [sp]
 80087de:	464b      	mov	r3, r9
 80087e0:	aa03      	add	r2, sp, #12
 80087e2:	4621      	mov	r1, r4
 80087e4:	4640      	mov	r0, r8
 80087e6:	f7ff fee7 	bl	80085b8 <_printf_common>
 80087ea:	3001      	adds	r0, #1
 80087ec:	d14a      	bne.n	8008884 <_printf_i+0x1f0>
 80087ee:	f04f 30ff 	mov.w	r0, #4294967295
 80087f2:	b004      	add	sp, #16
 80087f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	f043 0320 	orr.w	r3, r3, #32
 80087fe:	6023      	str	r3, [r4, #0]
 8008800:	4832      	ldr	r0, [pc, #200]	@ (80088cc <_printf_i+0x238>)
 8008802:	2778      	movs	r7, #120	@ 0x78
 8008804:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	6831      	ldr	r1, [r6, #0]
 800880c:	061f      	lsls	r7, r3, #24
 800880e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008812:	d402      	bmi.n	800881a <_printf_i+0x186>
 8008814:	065f      	lsls	r7, r3, #25
 8008816:	bf48      	it	mi
 8008818:	b2ad      	uxthmi	r5, r5
 800881a:	6031      	str	r1, [r6, #0]
 800881c:	07d9      	lsls	r1, r3, #31
 800881e:	bf44      	itt	mi
 8008820:	f043 0320 	orrmi.w	r3, r3, #32
 8008824:	6023      	strmi	r3, [r4, #0]
 8008826:	b11d      	cbz	r5, 8008830 <_printf_i+0x19c>
 8008828:	2310      	movs	r3, #16
 800882a:	e7ad      	b.n	8008788 <_printf_i+0xf4>
 800882c:	4826      	ldr	r0, [pc, #152]	@ (80088c8 <_printf_i+0x234>)
 800882e:	e7e9      	b.n	8008804 <_printf_i+0x170>
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	f023 0320 	bic.w	r3, r3, #32
 8008836:	6023      	str	r3, [r4, #0]
 8008838:	e7f6      	b.n	8008828 <_printf_i+0x194>
 800883a:	4616      	mov	r6, r2
 800883c:	e7bd      	b.n	80087ba <_printf_i+0x126>
 800883e:	6833      	ldr	r3, [r6, #0]
 8008840:	6825      	ldr	r5, [r4, #0]
 8008842:	6961      	ldr	r1, [r4, #20]
 8008844:	1d18      	adds	r0, r3, #4
 8008846:	6030      	str	r0, [r6, #0]
 8008848:	062e      	lsls	r6, r5, #24
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	d501      	bpl.n	8008852 <_printf_i+0x1be>
 800884e:	6019      	str	r1, [r3, #0]
 8008850:	e002      	b.n	8008858 <_printf_i+0x1c4>
 8008852:	0668      	lsls	r0, r5, #25
 8008854:	d5fb      	bpl.n	800884e <_printf_i+0x1ba>
 8008856:	8019      	strh	r1, [r3, #0]
 8008858:	2300      	movs	r3, #0
 800885a:	6123      	str	r3, [r4, #16]
 800885c:	4616      	mov	r6, r2
 800885e:	e7bc      	b.n	80087da <_printf_i+0x146>
 8008860:	6833      	ldr	r3, [r6, #0]
 8008862:	1d1a      	adds	r2, r3, #4
 8008864:	6032      	str	r2, [r6, #0]
 8008866:	681e      	ldr	r6, [r3, #0]
 8008868:	6862      	ldr	r2, [r4, #4]
 800886a:	2100      	movs	r1, #0
 800886c:	4630      	mov	r0, r6
 800886e:	f7f7 fd3f 	bl	80002f0 <memchr>
 8008872:	b108      	cbz	r0, 8008878 <_printf_i+0x1e4>
 8008874:	1b80      	subs	r0, r0, r6
 8008876:	6060      	str	r0, [r4, #4]
 8008878:	6863      	ldr	r3, [r4, #4]
 800887a:	6123      	str	r3, [r4, #16]
 800887c:	2300      	movs	r3, #0
 800887e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008882:	e7aa      	b.n	80087da <_printf_i+0x146>
 8008884:	6923      	ldr	r3, [r4, #16]
 8008886:	4632      	mov	r2, r6
 8008888:	4649      	mov	r1, r9
 800888a:	4640      	mov	r0, r8
 800888c:	47d0      	blx	sl
 800888e:	3001      	adds	r0, #1
 8008890:	d0ad      	beq.n	80087ee <_printf_i+0x15a>
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	079b      	lsls	r3, r3, #30
 8008896:	d413      	bmi.n	80088c0 <_printf_i+0x22c>
 8008898:	68e0      	ldr	r0, [r4, #12]
 800889a:	9b03      	ldr	r3, [sp, #12]
 800889c:	4298      	cmp	r0, r3
 800889e:	bfb8      	it	lt
 80088a0:	4618      	movlt	r0, r3
 80088a2:	e7a6      	b.n	80087f2 <_printf_i+0x15e>
 80088a4:	2301      	movs	r3, #1
 80088a6:	4632      	mov	r2, r6
 80088a8:	4649      	mov	r1, r9
 80088aa:	4640      	mov	r0, r8
 80088ac:	47d0      	blx	sl
 80088ae:	3001      	adds	r0, #1
 80088b0:	d09d      	beq.n	80087ee <_printf_i+0x15a>
 80088b2:	3501      	adds	r5, #1
 80088b4:	68e3      	ldr	r3, [r4, #12]
 80088b6:	9903      	ldr	r1, [sp, #12]
 80088b8:	1a5b      	subs	r3, r3, r1
 80088ba:	42ab      	cmp	r3, r5
 80088bc:	dcf2      	bgt.n	80088a4 <_printf_i+0x210>
 80088be:	e7eb      	b.n	8008898 <_printf_i+0x204>
 80088c0:	2500      	movs	r5, #0
 80088c2:	f104 0619 	add.w	r6, r4, #25
 80088c6:	e7f5      	b.n	80088b4 <_printf_i+0x220>
 80088c8:	08008aad 	.word	0x08008aad
 80088cc:	08008abe 	.word	0x08008abe

080088d0 <memmove>:
 80088d0:	4288      	cmp	r0, r1
 80088d2:	b510      	push	{r4, lr}
 80088d4:	eb01 0402 	add.w	r4, r1, r2
 80088d8:	d902      	bls.n	80088e0 <memmove+0x10>
 80088da:	4284      	cmp	r4, r0
 80088dc:	4623      	mov	r3, r4
 80088de:	d807      	bhi.n	80088f0 <memmove+0x20>
 80088e0:	1e43      	subs	r3, r0, #1
 80088e2:	42a1      	cmp	r1, r4
 80088e4:	d008      	beq.n	80088f8 <memmove+0x28>
 80088e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088ee:	e7f8      	b.n	80088e2 <memmove+0x12>
 80088f0:	4402      	add	r2, r0
 80088f2:	4601      	mov	r1, r0
 80088f4:	428a      	cmp	r2, r1
 80088f6:	d100      	bne.n	80088fa <memmove+0x2a>
 80088f8:	bd10      	pop	{r4, pc}
 80088fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008902:	e7f7      	b.n	80088f4 <memmove+0x24>

08008904 <_sbrk_r>:
 8008904:	b538      	push	{r3, r4, r5, lr}
 8008906:	4d06      	ldr	r5, [pc, #24]	@ (8008920 <_sbrk_r+0x1c>)
 8008908:	2300      	movs	r3, #0
 800890a:	4604      	mov	r4, r0
 800890c:	4608      	mov	r0, r1
 800890e:	602b      	str	r3, [r5, #0]
 8008910:	f7f8 fb28 	bl	8000f64 <_sbrk>
 8008914:	1c43      	adds	r3, r0, #1
 8008916:	d102      	bne.n	800891e <_sbrk_r+0x1a>
 8008918:	682b      	ldr	r3, [r5, #0]
 800891a:	b103      	cbz	r3, 800891e <_sbrk_r+0x1a>
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	bd38      	pop	{r3, r4, r5, pc}
 8008920:	240002a0 	.word	0x240002a0

08008924 <_realloc_r>:
 8008924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008928:	4607      	mov	r7, r0
 800892a:	4614      	mov	r4, r2
 800892c:	460d      	mov	r5, r1
 800892e:	b921      	cbnz	r1, 800893a <_realloc_r+0x16>
 8008930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008934:	4611      	mov	r1, r2
 8008936:	f7ff bc5b 	b.w	80081f0 <_malloc_r>
 800893a:	b92a      	cbnz	r2, 8008948 <_realloc_r+0x24>
 800893c:	f7ff fbec 	bl	8008118 <_free_r>
 8008940:	4625      	mov	r5, r4
 8008942:	4628      	mov	r0, r5
 8008944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008948:	f000 f81a 	bl	8008980 <_malloc_usable_size_r>
 800894c:	4284      	cmp	r4, r0
 800894e:	4606      	mov	r6, r0
 8008950:	d802      	bhi.n	8008958 <_realloc_r+0x34>
 8008952:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008956:	d8f4      	bhi.n	8008942 <_realloc_r+0x1e>
 8008958:	4621      	mov	r1, r4
 800895a:	4638      	mov	r0, r7
 800895c:	f7ff fc48 	bl	80081f0 <_malloc_r>
 8008960:	4680      	mov	r8, r0
 8008962:	b908      	cbnz	r0, 8008968 <_realloc_r+0x44>
 8008964:	4645      	mov	r5, r8
 8008966:	e7ec      	b.n	8008942 <_realloc_r+0x1e>
 8008968:	42b4      	cmp	r4, r6
 800896a:	4622      	mov	r2, r4
 800896c:	4629      	mov	r1, r5
 800896e:	bf28      	it	cs
 8008970:	4632      	movcs	r2, r6
 8008972:	f7ff fbc3 	bl	80080fc <memcpy>
 8008976:	4629      	mov	r1, r5
 8008978:	4638      	mov	r0, r7
 800897a:	f7ff fbcd 	bl	8008118 <_free_r>
 800897e:	e7f1      	b.n	8008964 <_realloc_r+0x40>

08008980 <_malloc_usable_size_r>:
 8008980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008984:	1f18      	subs	r0, r3, #4
 8008986:	2b00      	cmp	r3, #0
 8008988:	bfbc      	itt	lt
 800898a:	580b      	ldrlt	r3, [r1, r0]
 800898c:	18c0      	addlt	r0, r0, r3
 800898e:	4770      	bx	lr

08008990 <_init>:
 8008990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008992:	bf00      	nop
 8008994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008996:	bc08      	pop	{r3}
 8008998:	469e      	mov	lr, r3
 800899a:	4770      	bx	lr

0800899c <_fini>:
 800899c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899e:	bf00      	nop
 80089a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089a2:	bc08      	pop	{r3}
 80089a4:	469e      	mov	lr, r3
 80089a6:	4770      	bx	lr
